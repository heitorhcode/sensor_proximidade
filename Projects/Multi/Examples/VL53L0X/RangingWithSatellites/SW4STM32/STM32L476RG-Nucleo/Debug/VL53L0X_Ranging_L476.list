
VL53L0X_Ranging_L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014d8  0800cc18  0800cc18  0001cc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0f0  0800e0f0  00020838  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0f0  0800e0f0  0001e0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0f8  0800e0f8  00020838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e0f8  0800e0f8  0001e0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e100  0800e100  0001e100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000838  20000000  0800e108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000838  0800e940  00020838  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b20  0800e940  00020b20  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020838  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002755a  00000000  00000000  00020862  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d9e  00000000  00000000  00047dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001678  00000000  00000000  0004bb60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f0  00000000  00000000  0004d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a62f  00000000  00000000  0004e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014fe7  00000000  00000000  00078cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5bce  00000000  00000000  0008dcde  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001838ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063c8  00000000  00000000  00183928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000838 	.word	0x20000838
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cbfc 	.word	0x0800cbfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000083c 	.word	0x2000083c
 80001cc:	0800cbfc 	.word	0x0800cbfc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_I2cFailRecover>:
 *
 * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
 * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
 * this routine does use gpio to manipulate and recover i2c bus line in all cases.
 */
static void _I2cFailRecover(){
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    int i, nRetry=0;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
    // We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
    // by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
    // all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state

    // Enable I/O
    __GPIOB_CLK_ENABLE();
 800057a:	4b4c      	ldr	r3, [pc, #304]	; (80006ac <_I2cFailRecover+0x13c>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a4b      	ldr	r2, [pc, #300]	; (80006ac <_I2cFailRecover+0x13c>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b49      	ldr	r3, [pc, #292]	; (80006ac <_I2cFailRecover+0x13c>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000598:	4845      	ldr	r0, [pc, #276]	; (80006b0 <_I2cFailRecover+0x140>)
 800059a:	f007 fa56 	bl	8007a4a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a4:	4842      	ldr	r0, [pc, #264]	; (80006b0 <_I2cFailRecover+0x140>)
 80005a6:	f007 fa50 	bl	8007a4a <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9 ;
 80005aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005b0:	2311      	movs	r3, #17
 80005b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4619      	mov	r1, r3
 80005be:	483c      	ldr	r0, [pc, #240]	; (80006b0 <_I2cFailRecover+0x140>)
 80005c0:	f007 f880 	bl	80076c4 <HAL_GPIO_Init>
    //TODO we could do this faster by not using HAL delay 1ms for clk timing
    do{
        for( i=0; i<10; i++){
 80005c4:	2300      	movs	r3, #0
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
 80005c8:	e014      	b.n	80005f4 <_I2cFailRecover+0x84>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d0:	4837      	ldr	r0, [pc, #220]	; (80006b0 <_I2cFailRecover+0x140>)
 80005d2:	f007 fa3a 	bl	8007a4a <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f006 fcf0 	bl	8006fbc <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	4833      	ldr	r0, [pc, #204]	; (80006b0 <_I2cFailRecover+0x140>)
 80005e4:	f007 fa31 	bl	8007a4a <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f006 fce7 	bl	8006fbc <HAL_Delay>
        for( i=0; i<10; i++){
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	3301      	adds	r3, #1
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
 80005f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f6:	2b09      	cmp	r3, #9
 80005f8:	dde7      	ble.n	80005ca <_I2cFailRecover+0x5a>
        }
//        if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
//            static int RetryRecover;
//            RetryRecover++;
//        }
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 80005fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fe:	482c      	ldr	r0, [pc, #176]	; (80006b0 <_I2cFailRecover+0x140>)
 8000600:	f007 fa0c 	bl	8007a1c <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d104      	bne.n	8000614 <_I2cFailRecover+0xa4>
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	623a      	str	r2, [r7, #32]
 8000610:	2b06      	cmp	r3, #6
 8000612:	ddd7      	ble.n	80005c4 <_I2cFailRecover+0x54>

    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 8000614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000618:	4825      	ldr	r0, [pc, #148]	; (80006b0 <_I2cFailRecover+0x140>)
 800061a:	f007 f9ff 	bl	8007a1c <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d13e      	bne.n	80006a2 <_I2cFailRecover+0x132>
        __GPIOA_CLK_ENABLE();
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <_I2cFailRecover+0x13c>)
 8000626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000628:	4a20      	ldr	r2, [pc, #128]	; (80006ac <_I2cFailRecover+0x13c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <_I2cFailRecover+0x13c>)
 8000632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
        //We are still in bad i2c state warm user by blinking led but stay here
        GPIO_InitStruct.Pin = GPIO_PIN_5 ;
 800063c:	2320      	movs	r3, #32
 800063e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f007 f837 	bl	80076c4 <HAL_GPIO_Init>
        do{
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2120      	movs	r1, #32
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f007 f9f4 	bl	8007a4a <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8000662:	2021      	movs	r0, #33	; 0x21
 8000664:	f006 fcaa 	bl	8006fbc <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2120      	movs	r1, #32
 800066c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000670:	f007 f9eb 	bl	8007a4a <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8000674:	2021      	movs	r0, #33	; 0x21
 8000676:	f006 fca1 	bl	8006fbc <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2120      	movs	r1, #32
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f007 f9e2 	bl	8007a4a <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8000686:	2021      	movs	r0, #33	; 0x21
 8000688:	f006 fc98 	bl	8006fbc <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2120      	movs	r1, #32
 8000690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000694:	f007 f9d9 	bl	8007a4a <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 8000698:	f44f 7025 	mov.w	r0, #660	; 0x294
 800069c:	f006 fc8e 	bl	8006fbc <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006a0:	e7d9      	b.n	8000656 <_I2cFailRecover+0xe6>
        }while(1);
    }
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000400 	.word	0x48000400

080006b4 <XNUCLEO53L0A1_I2C1Configure>:



int XNUCLEO53L0A1_I2C1Configure() {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
    int status;
    GPIO_InitTypeDef GPIO_InitStruct;

    _I2cFailRecover();
 80006ba:	f7ff ff59 	bl	8000570 <_I2cFailRecover>

    /* Peripheral clock enable */
    __GPIOB_CLK_ENABLE();
 80006be:	4b25      	ldr	r3, [pc, #148]	; (8000754 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a24      	ldr	r2, [pc, #144]	; (8000754 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b22      	ldr	r3, [pc, #136]	; (8000754 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
    __I2C1_CLK_ENABLE();
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006da:	4a1e      	ldr	r2, [pc, #120]	; (8000754 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 80006dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e0:	6593      	str	r3, [r2, #88]	; 0x58
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <XNUCLEO53L0A1_I2C1Configure+0xa0>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

    /**I2C1 GPIO Configuration\n
     PB8     ------> I2C1_SCL\n
     PB9     ------> I2C1_SDA
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80006ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006f2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f4:	2312      	movs	r3, #18
 80006f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000700:	2304      	movs	r3, #4
 8000702:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	4619      	mov	r1, r3
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <XNUCLEO53L0A1_I2C1Configure+0xa4>)
 800070c:	f006 ffda 	bl	80076c4 <HAL_GPIO_Init>

    XNUCLEO53L0A1_hi2c.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <XNUCLEO53L0A1_I2C1Configure+0xac>)
 8000714:	601a      	str	r2, [r3, #0]
#ifdef __STM32F4xx_HAL_H
    XNUCLEO53L0A1_hi2c.Init.ClockSpeed = 400000;
    XNUCLEO53L0A1_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
#else
    /* STM32L4xx and L053 */
    XNUCLEO53L0A1_hi2c.Init.Timing = 0x00300F38; /* set 400KHz fast mode i2c*/
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 800071a:	605a      	str	r2, [r3, #4]
#endif
    XNUCLEO53L0A1_hi2c.Init.OwnAddress1 = 0;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
    XNUCLEO53L0A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8000724:	2201      	movs	r2, #1
 8000726:	60da      	str	r2, [r3, #12]
    XNUCLEO53L0A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
    XNUCLEO53L0A1_hi2c.Init.OwnAddress2 = 0;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
    XNUCLEO53L0A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
    XNUCLEO53L0A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
    status = HAL_I2C_Init(&XNUCLEO53L0A1_hi2c);
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <XNUCLEO53L0A1_I2C1Configure+0xa8>)
 8000742:	f007 f9b1 	bl	8007aa8 <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	61fb      	str	r3, [r7, #28]
    return status;
 800074a:	69fb      	ldr	r3, [r7, #28]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400
 800075c:	20000978 	.word	0x20000978
 8000760:	40005400 	.word	0x40005400
 8000764:	00300f38 	.word	0x00300f38

08000768 <XNUCLEO53L0A1_Init>:
done:
    return status;
}


int XNUCLEO53L0A1_Init(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
    int status;
    uint8_t ExpanderData[2];
    XNUCLEO53L0A1_USART2_UART_Init();
 800076e:	f000 fa87 	bl	8000c80 <XNUCLEO53L0A1_USART2_UART_Init>
    XNUCLEO53L0A1_I2C1Configure();
 8000772:	f7ff ff9f 	bl	80006b4 <XNUCLEO53L0A1_I2C1Configure>

    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 8000776:	463a      	mov	r2, r7
 8000778:	2302      	movs	r3, #2
 800077a:	2100      	movs	r1, #0
 800077c:	2086      	movs	r0, #134	; 0x86
 800077e:	f000 f925 	bl	80009cc <_ExpanderRd>
 8000782:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d105      	bne.n	8000796 <XNUCLEO53L0A1_Init+0x2e>
 800078a:	783b      	ldrb	r3, [r7, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <XNUCLEO53L0A1_Init+0x2e>
 8000790:	787b      	ldrb	r3, [r7, #1]
 8000792:	2b16      	cmp	r3, #22
 8000794:	d007      	beq.n	80007a6 <XNUCLEO53L0A1_Init+0x3e>
        XNUCLEO53L0A1_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr0 );
 8000796:	2386      	movs	r3, #134	; 0x86
 8000798:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800079c:	4931      	ldr	r1, [pc, #196]	; (8000864 <XNUCLEO53L0A1_Init+0xfc>)
 800079e:	4832      	ldr	r0, [pc, #200]	; (8000868 <XNUCLEO53L0A1_Init+0x100>)
 80007a0:	f000 fa20 	bl	8000be4 <uart_printf>
        goto done_err;
 80007a4:	e058      	b.n	8000858 <XNUCLEO53L0A1_Init+0xf0>

    }
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 80007a6:	463a      	mov	r2, r7
 80007a8:	2302      	movs	r3, #2
 80007aa:	2100      	movs	r1, #0
 80007ac:	2084      	movs	r0, #132	; 0x84
 80007ae:	f000 f90d 	bl	80009cc <_ExpanderRd>
 80007b2:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d105      	bne.n	80007c6 <XNUCLEO53L0A1_Init+0x5e>
 80007ba:	783b      	ldrb	r3, [r7, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d102      	bne.n	80007c6 <XNUCLEO53L0A1_Init+0x5e>
 80007c0:	787b      	ldrb	r3, [r7, #1]
 80007c2:	2b16      	cmp	r3, #22
 80007c4:	d007      	beq.n	80007d6 <XNUCLEO53L0A1_Init+0x6e>
        XNUCLEO53L0A1_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr1);
 80007c6:	2384      	movs	r3, #132	; 0x84
 80007c8:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80007cc:	4925      	ldr	r1, [pc, #148]	; (8000864 <XNUCLEO53L0A1_Init+0xfc>)
 80007ce:	4826      	ldr	r0, [pc, #152]	; (8000868 <XNUCLEO53L0A1_Init+0x100>)
 80007d0:	f000 fa08 	bl	8000be4 <uart_printf>
        goto done_err;
 80007d4:	e040      	b.n	8000858 <XNUCLEO53L0A1_Init+0xf0>
    }

    CurIOVal.u32=0x0;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <XNUCLEO53L0A1_Init+0x104>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
    /* setup expender   i/o direction  all output but exp1 bit 14*/
    ExpanderData[0] = 0xFF;
 80007dc:	23ff      	movs	r3, #255	; 0xff
 80007de:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xFF;
 80007e0:	23ff      	movs	r3, #255	; 0xff
 80007e2:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 80007e4:	463a      	mov	r2, r7
 80007e6:	2302      	movs	r3, #2
 80007e8:	2114      	movs	r1, #20
 80007ea:	2086      	movs	r0, #134	; 0x86
 80007ec:	f000 f920 	bl	8000a30 <_ExpanderWR>
 80007f0:	6078      	str	r0, [r7, #4]
    if (status) {
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d007      	beq.n	8000808 <XNUCLEO53L0A1_Init+0xa0>
        XNUCLEO53L0A1_ErrLog("Set Expander @0x%02X DR", I2cExpAddr0);
 80007f8:	2386      	movs	r3, #134	; 0x86
 80007fa:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80007fe:	4919      	ldr	r1, [pc, #100]	; (8000864 <XNUCLEO53L0A1_Init+0xfc>)
 8000800:	481b      	ldr	r0, [pc, #108]	; (8000870 <XNUCLEO53L0A1_Init+0x108>)
 8000802:	f000 f9ef 	bl	8000be4 <uart_printf>
        goto done_err;
 8000806:	e027      	b.n	8000858 <XNUCLEO53L0A1_Init+0xf0>
    }
    ExpanderData[0] = 0xFF;
 8000808:	23ff      	movs	r3, #255	; 0xff
 800080a:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 800080c:	23bf      	movs	r3, #191	; 0xbf
 800080e:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8000810:	463a      	mov	r2, r7
 8000812:	2302      	movs	r3, #2
 8000814:	2114      	movs	r1, #20
 8000816:	2084      	movs	r0, #132	; 0x84
 8000818:	f000 f90a 	bl	8000a30 <_ExpanderWR>
 800081c:	6078      	str	r0, [r7, #4]
    if (status) {
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d007      	beq.n	8000834 <XNUCLEO53L0A1_Init+0xcc>
        XNUCLEO53L0A1_ErrLog("Set Expander @0x%02X DR", I2cExpAddr1);
 8000824:	2384      	movs	r3, #132	; 0x84
 8000826:	f240 129f 	movw	r2, #415	; 0x19f
 800082a:	490e      	ldr	r1, [pc, #56]	; (8000864 <XNUCLEO53L0A1_Init+0xfc>)
 800082c:	4810      	ldr	r0, [pc, #64]	; (8000870 <XNUCLEO53L0A1_Init+0x108>)
 800082e:	f000 f9d9 	bl	8000be4 <uart_printf>
        goto done_err;
 8000832:	e011      	b.n	8000858 <XNUCLEO53L0A1_Init+0xf0>
    }
    /* shut down all segment and all device */
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <XNUCLEO53L0A1_Init+0x104>)
 8000836:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 800083a:	601a      	str	r2, [r3, #0]
    status= _ExpandersSetAllIO();
 800083c:	f000 f8a6 	bl	800098c <_ExpandersSetAllIO>
 8000840:	6078      	str	r0, [r7, #4]
    if( status ){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d006      	beq.n	8000856 <XNUCLEO53L0A1_Init+0xee>
        XNUCLEO53L0A1_ErrLog("Set initial i/o ");
 8000848:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 800084c:	4905      	ldr	r1, [pc, #20]	; (8000864 <XNUCLEO53L0A1_Init+0xfc>)
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <XNUCLEO53L0A1_Init+0x10c>)
 8000850:	f000 f9c8 	bl	8000be4 <uart_printf>
 8000854:	e000      	b.n	8000858 <XNUCLEO53L0A1_Init+0xf0>
    }

done_err:
 8000856:	bf00      	nop
    return status;
 8000858:	687b      	ldr	r3, [r7, #4]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	0800ce4c 	.word	0x0800ce4c
 8000868:	0800cc3c 	.word	0x0800cc3c
 800086c:	20000854 	.word	0x20000854
 8000870:	0800cc70 	.word	0x0800cc70
 8000874:	0800cc98 	.word	0x0800cc98

08000878 <XNUCLEO53L0A1_ResetId>:
    }
    *state = PortValue;
    return status;
}

int XNUCLEO53L0A1_ResetId(int DevNo, int state) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af02      	add	r7, sp, #8
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
    int status;
    switch( DevNo ){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b02      	cmp	r3, #2
 8000886:	d03e      	beq.n	8000906 <XNUCLEO53L0A1_ResetId+0x8e>
 8000888:	2b02      	cmp	r3, #2
 800088a:	dc04      	bgt.n	8000896 <XNUCLEO53L0A1_ResetId+0x1e>
 800088c:	2b00      	cmp	r3, #0
 800088e:	d021      	beq.n	80008d4 <XNUCLEO53L0A1_ResetId+0x5c>
 8000890:	2b01      	cmp	r3, #1
 8000892:	d006      	beq.n	80008a2 <XNUCLEO53L0A1_ResetId+0x2a>
 8000894:	e050      	b.n	8000938 <XNUCLEO53L0A1_ResetId+0xc0>
 8000896:	2b6c      	cmp	r3, #108	; 0x6c
 8000898:	d01c      	beq.n	80008d4 <XNUCLEO53L0A1_ResetId+0x5c>
 800089a:	2b72      	cmp	r3, #114	; 0x72
 800089c:	d033      	beq.n	8000906 <XNUCLEO53L0A1_ResetId+0x8e>
 800089e:	2b63      	cmp	r3, #99	; 0x63
 80008a0:	d14a      	bne.n	8000938 <XNUCLEO53L0A1_ResetId+0xc0>
    case XNUCLEO53L0A1_DEV_CENTER :
    case 'c' :
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008a4:	78db      	ldrb	r3, [r3, #3]
 80008a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008ae:	70da      	strb	r2, [r3, #3]
        if( state )
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d006      	beq.n	80008c4 <XNUCLEO53L0A1_ResetId+0x4c>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 80008b6:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008b8:	78db      	ldrb	r3, [r3, #3]
 80008ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008c2:	70da      	strb	r2, [r3, #3]
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 80008c4:	2301      	movs	r3, #1
 80008c6:	4a2c      	ldr	r2, [pc, #176]	; (8000978 <XNUCLEO53L0A1_ResetId+0x100>)
 80008c8:	2113      	movs	r1, #19
 80008ca:	2084      	movs	r0, #132	; 0x84
 80008cc:	f000 f8b0 	bl	8000a30 <_ExpanderWR>
 80008d0:	60f8      	str	r0, [r7, #12]
        break;
 80008d2:	e03c      	b.n	800094e <XNUCLEO53L0A1_ResetId+0xd6>
    case XNUCLEO53L0A1_DEV_LEFT :
    case 'l' :
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008d6:	785b      	ldrb	r3, [r3, #1]
 80008d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008e0:	705a      	strb	r2, [r3, #1]
        if( state )
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d006      	beq.n	80008f6 <XNUCLEO53L0A1_ResetId+0x7e>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008ea:	785b      	ldrb	r3, [r3, #1]
 80008ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 80008f4:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 80008f6:	2301      	movs	r3, #1
 80008f8:	4a20      	ldr	r2, [pc, #128]	; (800097c <XNUCLEO53L0A1_ResetId+0x104>)
 80008fa:	2113      	movs	r1, #19
 80008fc:	2086      	movs	r0, #134	; 0x86
 80008fe:	f000 f897 	bl	8000a30 <_ExpanderWR>
 8000902:	60f8      	str	r0, [r7, #12]
        break;
 8000904:	e023      	b.n	800094e <XNUCLEO53L0A1_ResetId+0xd6>
    case 'r' :
    case XNUCLEO53L0A1_DEV_RIGHT :
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000908:	785b      	ldrb	r3, [r3, #1]
 800090a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000912:	705a      	strb	r2, [r3, #1]
        if( state )
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d006      	beq.n	8000928 <XNUCLEO53L0A1_ResetId+0xb0>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000926:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8000928:	2301      	movs	r3, #1
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <XNUCLEO53L0A1_ResetId+0x104>)
 800092c:	2113      	movs	r1, #19
 800092e:	2086      	movs	r0, #134	; 0x86
 8000930:	f000 f87e 	bl	8000a30 <_ExpanderWR>
 8000934:	60f8      	str	r0, [r7, #12]
        break;
 8000936:	e00a      	b.n	800094e <XNUCLEO53L0A1_ResetId+0xd6>
    default:
        XNUCLEO53L0A1_ErrLog("Invalid DevNo %d",DevNo);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800093e:	4910      	ldr	r1, [pc, #64]	; (8000980 <XNUCLEO53L0A1_ResetId+0x108>)
 8000940:	4810      	ldr	r0, [pc, #64]	; (8000984 <XNUCLEO53L0A1_ResetId+0x10c>)
 8000942:	f000 f94f 	bl	8000be4 <uart_printf>
        status = -1;
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	60fb      	str	r3, [r7, #12]
        goto done;
 800094c:	e00d      	b.n	800096a <XNUCLEO53L0A1_ResetId+0xf2>
    }
//error with valid id
    if( status ){
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d009      	beq.n	8000968 <XNUCLEO53L0A1_ResetId+0xf0>
        XNUCLEO53L0A1_ErrLog("expander i/o error for DevNo %d state %d ",DevNo, state);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <XNUCLEO53L0A1_ResetId+0x108>)
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <XNUCLEO53L0A1_ResetId+0x110>)
 8000962:	f000 f93f 	bl	8000be4 <uart_printf>
 8000966:	e000      	b.n	800096a <XNUCLEO53L0A1_ResetId+0xf2>
    }
done:
 8000968:	bf00      	nop
    return status;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000854 	.word	0x20000854
 8000978:	20000857 	.word	0x20000857
 800097c:	20000855 	.word	0x20000855
 8000980:	0800ce78 	.word	0x0800ce78
 8000984:	0800cc18 	.word	0x0800cc18
 8000988:	0800ccd8 	.word	0x0800ccd8

0800098c <_ExpandersSetAllIO>:
}
/**
 * Set all i2c expended gpio in one go
 * @return i/o operation status
 */
static int _ExpandersSetAllIO(void){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
    int status;
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 8000992:	2302      	movs	r3, #2
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <_ExpandersSetAllIO+0x38>)
 8000996:	2112      	movs	r1, #18
 8000998:	2086      	movs	r0, #134	; 0x86
 800099a:	f000 f849 	bl	8000a30 <_ExpanderWR>
 800099e:	6078      	str	r0, [r7, #4]
    if( status ){
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d107      	bne.n	80009b6 <_ExpandersSetAllIO+0x2a>
        goto done_err;
    }
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 80009a6:	2302      	movs	r3, #2
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <_ExpandersSetAllIO+0x3c>)
 80009aa:	2112      	movs	r1, #18
 80009ac:	2084      	movs	r0, #132	; 0x84
 80009ae:	f000 f83f 	bl	8000a30 <_ExpanderWR>
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	e000      	b.n	80009b8 <_ExpandersSetAllIO+0x2c>
        goto done_err;
 80009b6:	bf00      	nop
done_err:
    return status;
 80009b8:	687b      	ldr	r3, [r7, #4]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000854 	.word	0x20000854
 80009c8:	20000856 	.word	0x20000856

080009cc <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr;
    RegAddr = index;
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	74fb      	strb	r3, [r7, #19]
    XNUCLEO53L0A1_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	b299      	uxth	r1, r3
 80009e4:	f107 0213 	add.w	r2, r7, #19
 80009e8:	2364      	movs	r3, #100	; 0x64
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <_ExpanderRd+0x60>)
 80009f0:	f007 f8ee 	bl	8007bd0 <HAL_I2C_Master_Transmit>
 80009f4:	4603      	mov	r3, r0
 80009f6:	617b      	str	r3, [r7, #20]
        if (status)
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d110      	bne.n	8000a20 <_ExpanderRd+0x54>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L0A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	b299      	uxth	r1, r3
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b298      	uxth	r0, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2264      	movs	r2, #100	; 0x64
 8000a0a:	fb02 f303 	mul.w	r3, r2, r3
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	4603      	mov	r3, r0
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <_ExpanderRd+0x60>)
 8000a16:	f007 f9db 	bl	8007dd0 <HAL_I2C_Master_Receive>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	e000      	b.n	8000a22 <_ExpanderRd+0x56>
            break;
 8000a20:	bf00      	nop
    } while (0);
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 8000a22:	697b      	ldr	r3, [r7, #20]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000978 	.word	0x20000978

08000a30 <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr + 1, data, n_data);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	3301      	adds	r3, #1
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	6879      	ldr	r1, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f00b fc74 	bl	800c33c <memcpy>
    XNUCLEO53L0A1_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	b299      	uxth	r1, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b298      	uxth	r0, r3
 8000a60:	f107 0214 	add.w	r2, r7, #20
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <_ExpanderWR+0x50>)
 8000a6c:	f007 f8b0 	bl	8007bd0 <HAL_I2C_Master_Transmit>
 8000a70:	4603      	mov	r3, r0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000978 	.word	0x20000978

08000a84 <XNUCLEO53L0A1_SetDisplayString>:
#undef S6
#undef DP

/** @} */

int XNUCLEO53L0A1_SetDisplayString(const char *str) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    int status;
    uint32_t Segments;
    int BitPos;
    int i;

    for( i=0; i<4 && str[i]!=0; i++){
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e027      	b.n	8000ae2 <XNUCLEO53L0A1_SetDisplayString+0x5e>
        Segments = (uint32_t)ascii_to_display_lut[(uint8_t)str[i]];
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <XNUCLEO53L0A1_SetDisplayString+0xbc>)
 8000a9e:	5c9b      	ldrb	r3, [r3, r2]
 8000aa0:	613b      	str	r3, [r7, #16]
        Segments =(~Segments)&0x7F;
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000aaa:	613b      	str	r3, [r7, #16]
        BitPos=DisplayBitPos[i];
 8000aac:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <XNUCLEO53L0A1_SetDisplayString+0xc0>)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab4:	60fb      	str	r3, [r7, #12]
        CurIOVal.u32 &=~(0x7F<<BitPos);
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	217f      	movs	r1, #127	; 0x7f
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac2:	43d2      	mvns	r2, r2
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	4a20      	ldr	r2, [pc, #128]	; (8000b48 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8000ac8:	6013      	str	r3, [r2, #0]
        CurIOVal.u32 |= Segments<<BitPos;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	6939      	ldr	r1, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8000ada:	6013      	str	r3, [r2, #0]
    for( i=0; i<4 && str[i]!=0; i++){
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	dc17      	bgt.n	8000b18 <XNUCLEO53L0A1_SetDisplayString+0x94>
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1ce      	bne.n	8000a92 <XNUCLEO53L0A1_SetDisplayString+0xe>
    }
    /* clear unused digit */
    for( ; i<4;i++){
 8000af4:	e010      	b.n	8000b18 <XNUCLEO53L0A1_SetDisplayString+0x94>
        BitPos=DisplayBitPos[i];
 8000af6:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <XNUCLEO53L0A1_SetDisplayString+0xc0>)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afe:	60fb      	str	r3, [r7, #12]
        CurIOVal.u32 |=0x7F<<BitPos;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	217f      	movs	r1, #127	; 0x7f
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8000b10:	6013      	str	r3, [r2, #0]
    for( ; i<4;i++){
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	ddeb      	ble.n	8000af6 <XNUCLEO53L0A1_SetDisplayString+0x72>
    }
    status = _ExpandersSetAllIO();
 8000b1e:	f7ff ff35 	bl	800098c <_ExpandersSetAllIO>
 8000b22:	60b8      	str	r0, [r7, #8]
    if( status ){
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d005      	beq.n	8000b36 <XNUCLEO53L0A1_SetDisplayString+0xb2>
        XNUCLEO53L0A1_ErrLog("Set i/o");
 8000b2a:	f240 320f 	movw	r2, #783	; 0x30f
 8000b2e:	4907      	ldr	r1, [pc, #28]	; (8000b4c <XNUCLEO53L0A1_SetDisplayString+0xc8>)
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <XNUCLEO53L0A1_SetDisplayString+0xcc>)
 8000b32:	f000 f857 	bl	8000be4 <uart_printf>
    }
    return status;
 8000b36:	68bb      	ldr	r3, [r7, #8]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	0800cd14 	.word	0x0800cd14
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000854 	.word	0x20000854
 8000b4c:	0800ce90 	.word	0x0800ce90
 8000b50:	0800ce14 	.word	0x0800ce14

08000b54 <HAL_UART_TxCpltCallback>:

static volatile int InUsed=0;
static char uart_buffer[256];
static uint32_t UartErrCnt=0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    // TODO check if any more to send and do it
    InUsed=0;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_UART_TxCpltCallback+0x18>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000858 	.word	0x20000858

08000b70 <uart_vprintf>:

int uart_vprintf(const char *msg, va_list ap){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
    int n;
    int status;
    while( InUsed ){
 8000b7a:	e000      	b.n	8000b7e <uart_vprintf+0xe>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8000b7c:	bf30      	wfi
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <uart_vprintf+0x64>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1fa      	bne.n	8000b7c <uart_vprintf+0xc>
           //
        __WFI();
    }
    InUsed|=1;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <uart_vprintf+0x64>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <uart_vprintf+0x64>)
 8000b90:	6013      	str	r3, [r2, #0]
    n=vsnprintf(uart_buffer, sizeof(uart_buffer),  msg, ap);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9a:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <uart_vprintf+0x68>)
 8000b9c:	f00b fc36 	bl	800c40c <vsniprintf>
 8000ba0:	60f8      	str	r0, [r7, #12]
    status = HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_buffer, n );
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	490b      	ldr	r1, [pc, #44]	; (8000bd8 <uart_vprintf+0x68>)
 8000baa:	480c      	ldr	r0, [pc, #48]	; (8000bdc <uart_vprintf+0x6c>)
 8000bac:	f009 fce0 	bl	800a570 <HAL_UART_Transmit_DMA>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60bb      	str	r3, [r7, #8]
    if( status ){
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <uart_vprintf+0x5a>
        UartErrCnt++;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <uart_vprintf+0x70>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <uart_vprintf+0x70>)
 8000bc2:	6013      	str	r3, [r2, #0]
        InUsed=0;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <uart_vprintf+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
    }
    return n;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000858 	.word	0x20000858
 8000bd8:	2000085c 	.word	0x2000085c
 8000bdc:	20000a0c 	.word	0x20000a0c
 8000be0:	2000095c 	.word	0x2000095c

08000be4 <uart_printf>:

int uart_printf(const char *msg, ...){
 8000be4:	b40f      	push	{r0, r1, r2, r3}
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
	va_list ap;
    int n;
    while( InUsed ){
 8000bec:	e000      	b.n	8000bf0 <uart_printf+0xc>
 8000bee:	bf30      	wfi
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <uart_printf+0x34>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1fa      	bne.n	8000bee <uart_printf+0xa>
        //
        __WFI();
    }
    va_start(ap, msg);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	603b      	str	r3, [r7, #0]
    n=uart_vprintf(msg, ap);
 8000bfe:	6839      	ldr	r1, [r7, #0]
 8000c00:	6938      	ldr	r0, [r7, #16]
 8000c02:	f7ff ffb5 	bl	8000b70 <uart_vprintf>
 8000c06:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return n;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr
 8000c18:	20000858 	.word	0x20000858

08000c1c <VL53L0A1_EXTI_Callback>:
 * @param DevNo     DeviceNumber  (for shared interrupt is  center always)
 * @param GPIO_Pin  EXTI Gpio Pin associated to the interrupt
 *
 * @ingroup   MSP_implement_common
 */
__weak void VL53L0A1_EXTI_Callback(int DevNo, int GPIO_Pin){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
    /**
     * built-in Does nothing redefined your's
     */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <DMA1_Channel7_IRQHandler>:
#if VL53L0A1_UART_DMA_TX
/**
* @brief This function handles DMA1 channel7 global interrupt.
*/
void DMA1_Channel7_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <DMA1_Channel7_IRQHandler+0x10>)
 8000c36:	f006 fc69 	bl	800750c <HAL_DMA_IRQHandler>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200009c4 	.word	0x200009c4

08000c44 <MX_DMA_Init>:
#endif
/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_DMA_Init+0x38>)
 8000c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <MX_DMA_Init+0x38>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6493      	str	r3, [r2, #72]	; 0x48
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_DMA_Init+0x38>)
 8000c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
#if VL53L0A1_UART_DMA_RX
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
#endif
#if VL53L0A1_UART_DMA_TX
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2011      	movs	r0, #17
 8000c68:	f006 fa91 	bl	800718e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c6c:	2011      	movs	r0, #17
 8000c6e:	f006 faaa 	bl	80071c6 <HAL_NVIC_EnableIRQ>
#endif

}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <XNUCLEO53L0A1_USART2_UART_Init>:

/* USART2 init function */
void XNUCLEO53L0A1_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  MX_DMA_Init();
 8000c84:	f7ff ffde 	bl	8000c44 <MX_DMA_Init>
  huart2.Instance = USART2;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <XNUCLEO53L0A1_USART2_UART_Init+0x54>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = USART2_BAUD_RATE;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart2);
 8000cc6:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <XNUCLEO53L0A1_USART2_UART_Init+0x50>)
 8000cc8:	f009 fc00 	bl	800a4cc <HAL_UART_Init>

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000a0c 	.word	0x20000a0c
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <HAL_UART_MspInit+0xac>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d148      	bne.n	8000d7c <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <HAL_UART_MspInit+0xb0>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cee:	4a26      	ldr	r2, [pc, #152]	; (8000d88 <HAL_UART_MspInit+0xb0>)
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <HAL_UART_MspInit+0xb0>)
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d02:	230c      	movs	r3, #12
 8000d04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d12:	2307      	movs	r3, #7
 8000d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f006 fcd0 	bl	80076c4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
#if VL53L0A1_UART_DMA_TX
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d26:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <HAL_UART_MspInit+0xb8>)
 8000d28:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d32:	2210      	movs	r2, #16
 8000d34:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_tx);
 8000d5a:	480c      	ldr	r0, [pc, #48]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d5c:	f006 fa76 	bl	800724c <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d64:	661a      	str	r2, [r3, #96]	; 0x60
 8000d66:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <HAL_UART_MspInit+0xb4>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_DMA_Init(&hdma_usart2_rx);

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
#endif

    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2026      	movs	r0, #38	; 0x26
 8000d72:	f006 fa0c 	bl	800718e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d76:	2026      	movs	r0, #38	; 0x26
 8000d78:	f006 fa25 	bl	80071c6 <HAL_NVIC_EnableIRQ>

  }
/* USER CODE BEGIN USART2_MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40004400 	.word	0x40004400
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	200009c4 	.word	0x200009c4
 8000d90:	40020080 	.word	0x40020080

08000d94 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <USART2_IRQHandler+0x10>)
 8000d9a:	f009 fc57 	bl	800a64c <HAL_UART_IRQHandler>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000a0c 	.word	0x20000a0c

08000da8 <HAL_GPIO_EXTI_Callback>:

/**
 * HAl Callback for EXTI
 * @param GPIO_Pin The GPIO pin EXTI was invoked
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
#if VL53L0A1_GPIO1_SHARED
    if( GPIO_Pin == VL53L0A1_GPIO1_C_GPIO_PIN ){
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
    }
#else
    switch(  GPIO_Pin  ){
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	2b80      	cmp	r3, #128	; 0x80
 8000db6:	d00b      	beq.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x28>
 8000db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dbc:	d00e      	beq.n	8000ddc <HAL_GPIO_EXTI_Callback+0x34>
 8000dbe:	2b10      	cmp	r3, #16
 8000dc0:	d000      	beq.n	8000dc4 <HAL_GPIO_EXTI_Callback+0x1c>
    case VL53L0A1_GPIO1_R_GPIO_PIN :
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
        break;

    default:
        break;
 8000dc2:	e011      	b.n	8000de8 <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff ff27 	bl	8000c1c <VL53L0A1_EXTI_Callback>
        break;
 8000dce:	e00b      	b.n	8000de8 <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_LEFT, GPIO_Pin);
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff ff21 	bl	8000c1c <VL53L0A1_EXTI_Callback>
        break;
 8000dda:	e005      	b.n	8000de8 <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	4619      	mov	r1, r3
 8000de0:	2002      	movs	r0, #2
 8000de2:	f7ff ff1b 	bl	8000c1c <VL53L0A1_EXTI_Callback>
        break;
 8000de6:	bf00      	nop
    }
#endif
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <EXTI4_IRQHandler>:
 * interrupt Handler for EXTI lines 4
 *
 * @note is only implemented if needed by configuration
 */
void EXTI4_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI4_USE_PIN);
 8000df4:	2010      	movs	r0, #16
 8000df6:	f006 fe3f 	bl	8007a78 <HAL_GPIO_EXTI_IRQHandler>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <EXTI9_5_IRQHandler>:
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI9_5_IRQHandler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI9_5_USE_PIN);
 8000e02:	2080      	movs	r0, #128	; 0x80
 8000e04:	f006 fe38 	bl	8007a78 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <EXTI15_10_IRQHandler>:
 * @note is only implemented if needed by configuration
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI15_10_IRQHandler(void){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI15_10_USE_PIN);
 8000e10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e14:	f006 fe30 	bl	8007a78 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	330a      	adds	r3, #10
 8000e2c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000e3a:	b299      	uxth	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f006 fec2 	bl	8007bd0 <HAL_I2C_Master_Transmit>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8000e50:	693b      	ldr	r3, [r7, #16]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b088      	sub	sp, #32
 8000e5e:	af02      	add	r7, sp, #8
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	330a      	adds	r3, #10
 8000e6a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	b299      	uxth	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f006 ffa0 	bl	8007dd0 <HAL_I2C_Master_Receive>
 8000e90:	4603      	mov	r3, r0
 8000e92:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8000e94:	693b      	ldr	r3, [r7, #16]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	460b      	mov	r3, r1
 8000eae:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b3f      	cmp	r3, #63	; 0x3f
 8000eb8:	d902      	bls.n	8000ec0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8000eba:	f06f 0303 	mvn.w	r3, #3
 8000ebe:	e016      	b.n	8000eee <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <VL53L0X_WriteMulti+0x58>)
 8000ec2:	7afb      	ldrb	r3, [r7, #11]
 8000ec4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <VL53L0X_WriteMulti+0x5c>)
 8000ecc:	f00b fa36 	bl	800c33c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <VL53L0X_WriteMulti+0x58>)
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff ff9f 	bl	8000e1c <_I2CWrite>
 8000ede:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000ee6:	23ec      	movs	r3, #236	; 0xec
 8000ee8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000a7c 	.word	0x20000a7c
 8000efc:	20000a7d 	.word	0x20000a7d

08000f00 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8000f14:	f107 030b 	add.w	r3, r7, #11
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f7ff ff7d 	bl	8000e1c <_I2CWrite>
 8000f22:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000f2a:	23ec      	movs	r3, #236	; 0xec
 8000f2c:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000f2e:	e00c      	b.n	8000f4a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff ff90 	bl	8000e5a <_I2CRead>
 8000f3a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000f42:	23ec      	movs	r3, #236	; 0xec
 8000f44:	75fb      	strb	r3, [r7, #23]
 8000f46:	e000      	b.n	8000f4a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8000f48:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8000f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
 8000f64:	4613      	mov	r3, r2
 8000f66:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <VL53L0X_WrByte+0x44>)
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <VL53L0X_WrByte+0x44>)
 8000f74:	78bb      	ldrb	r3, [r7, #2]
 8000f76:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8000f78:	2202      	movs	r2, #2
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <VL53L0X_WrByte+0x44>)
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff4d 	bl	8000e1c <_I2CWrite>
 8000f82:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000f8a:	23ec      	movs	r3, #236	; 0xec
 8000f8c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000a7c 	.word	0x20000a7c

08000fa0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
 8000fac:	4613      	mov	r3, r2
 8000fae:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <VL53L0X_WrWord+0x50>)
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8000fba:	883b      	ldrh	r3, [r7, #0]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <VL53L0X_WrWord+0x50>)
 8000fc4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8000fc6:	883b      	ldrh	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <VL53L0X_WrWord+0x50>)
 8000fcc:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8000fce:	2203      	movs	r2, #3
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <VL53L0X_WrWord+0x50>)
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ff22 	bl	8000e1c <_I2CWrite>
 8000fd8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000fe0:	23ec      	movs	r3, #236	; 0xec
 8000fe2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000a7c 	.word	0x20000a7c

08000ff4 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	4603      	mov	r3, r0
 8001004:	70fb      	strb	r3, [r7, #3]
 8001006:	460b      	mov	r3, r1
 8001008:	70bb      	strb	r3, [r7, #2]
 800100a:	4613      	mov	r3, r2
 800100c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8001012:	f107 020e 	add.w	r2, r7, #14
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f81e 	bl	800105c <VL53L0X_RdByte>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8001024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d110      	bne.n	800104e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800102c:	7bba      	ldrb	r2, [r7, #14]
 800102e:	78bb      	ldrb	r3, [r7, #2]
 8001030:	4013      	ands	r3, r2
 8001032:	b2da      	uxtb	r2, r3
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	4313      	orrs	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800103c:	7bba      	ldrb	r2, [r7, #14]
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	4619      	mov	r1, r3
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ff88 	bl	8000f58 <VL53L0X_WrByte>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e000      	b.n	8001050 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800104e:	bf00      	nop
done:
    return Status;
 8001050:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	460b      	mov	r3, r1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800106a:	2300      	movs	r3, #0
 800106c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800106e:	f107 030b 	add.w	r3, r7, #11
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff fed0 	bl	8000e1c <_I2CWrite>
 800107c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001084:	23ec      	movs	r3, #236	; 0xec
 8001086:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001088:	e00c      	b.n	80010a4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800108a:	2201      	movs	r2, #1
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff fee3 	bl	8000e5a <_I2CRead>
 8001094:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800109c:	23ec      	movs	r3, #236	; 0xec
 800109e:	75fb      	strb	r3, [r7, #23]
 80010a0:	e000      	b.n	80010a4 <VL53L0X_RdByte+0x48>
    }
done:
 80010a2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80010a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	460b      	mov	r3, r1
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80010be:	2300      	movs	r3, #0
 80010c0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80010c2:	f107 030b 	add.w	r3, r7, #11
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff fea6 	bl	8000e1c <_I2CWrite>
 80010d0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80010d8:	23ec      	movs	r3, #236	; 0xec
 80010da:	75fb      	strb	r3, [r7, #23]
        goto done;
 80010dc:	e017      	b.n	800110e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80010de:	2202      	movs	r2, #2
 80010e0:	490e      	ldr	r1, [pc, #56]	; (800111c <VL53L0X_RdWord+0x6c>)
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff feb9 	bl	8000e5a <_I2CRead>
 80010e8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80010f0:	23ec      	movs	r3, #236	; 0xec
 80010f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80010f4:	e00b      	b.n	800110e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <VL53L0X_RdWord+0x6c>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <VL53L0X_RdWord+0x6c>)
 8001102:	785b      	ldrb	r3, [r3, #1]
 8001104:	b29b      	uxth	r3, r3
 8001106:	4413      	add	r3, r2
 8001108:	b29a      	uxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800110e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000a7c 	.word	0x20000a7c

08001120 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	460b      	mov	r3, r1
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800112e:	2300      	movs	r3, #0
 8001130:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001132:	f107 030b 	add.w	r3, r7, #11
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f7ff fe6e 	bl	8000e1c <_I2CWrite>
 8001140:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001148:	23ec      	movs	r3, #236	; 0xec
 800114a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800114c:	e01b      	b.n	8001186 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800114e:	2204      	movs	r2, #4
 8001150:	4910      	ldr	r1, [pc, #64]	; (8001194 <VL53L0X_RdDWord+0x74>)
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff fe81 	bl	8000e5a <_I2CRead>
 8001158:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001160:	23ec      	movs	r3, #236	; 0xec
 8001162:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001164:	e00f      	b.n	8001186 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <VL53L0X_RdDWord+0x74>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	061a      	lsls	r2, r3, #24
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <VL53L0X_RdDWord+0x74>)
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	041b      	lsls	r3, r3, #16
 8001172:	441a      	add	r2, r3
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <VL53L0X_RdDWord+0x74>)
 8001176:	789b      	ldrb	r3, [r3, #2]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	4413      	add	r3, r2
 800117c:	4a05      	ldr	r2, [pc, #20]	; (8001194 <VL53L0X_RdDWord+0x74>)
 800117e:	78d2      	ldrb	r2, [r2, #3]
 8001180:	441a      	add	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8001186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000a7c 	.word	0x20000a7c

08001198 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80011a4:	2002      	movs	r0, #2
 80011a6:	f005 ff09 	bl	8006fbc <HAL_Delay>
    return status;
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af04      	add	r7, sp, #16
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x6c>)
 80011c8:	681c      	ldr	r4, [r3, #0]
 80011ca:	f005 feed 	bl	8006fa8 <HAL_GetTick>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x70>)
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x74>)
 80011da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80011de:	4621      	mov	r1, r4
 80011e0:	2001      	movs	r0, #1
 80011e2:	f005 fe49 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80011e6:	6839      	ldr	r1, [r7, #0]
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f002 fa81 	bl	80036f0 <VL53L0X_get_offset_calibration_data_micro_meter>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x6c>)
 80011f4:	681c      	ldr	r4, [r3, #0]
 80011f6:	f005 fed7 	bl	8006fa8 <HAL_GetTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x70>)
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	9200      	str	r2, [sp, #0]
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x78>)
 800120c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001210:	4621      	mov	r1, r4
 8001212:	2001      	movs	r0, #1
 8001214:	f005 fe30 	bl	8006e78 <trace_print_module_function>
	return Status;
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	200002cc 	.word	0x200002cc
 8001228:	0800d054 	.word	0x0800d054
 800122c:	0800ceb0 	.word	0x0800ceb0
 8001230:	0800cec4 	.word	0x0800cec4

08001234 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af04      	add	r7, sp, #16
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <VL53L0X_SetDeviceAddress+0x78>)
 8001246:	681c      	ldr	r4, [r3, #0]
 8001248:	f005 feae 	bl	8006fa8 <HAL_GetTick>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <VL53L0X_SetDeviceAddress+0x7c>)
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	9200      	str	r2, [sp, #0]
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <VL53L0X_SetDeviceAddress+0x80>)
 8001258:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800125c:	4621      	mov	r1, r4
 800125e:	2001      	movs	r0, #1
 8001260:	f005 fe0a 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	085b      	lsrs	r3, r3, #1
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	218a      	movs	r1, #138	; 0x8a
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fe72 	bl	8000f58 <VL53L0X_WrByte>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <VL53L0X_SetDeviceAddress+0x78>)
 800127a:	681c      	ldr	r4, [r3, #0]
 800127c:	f005 fe94 	bl	8006fa8 <HAL_GetTick>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <VL53L0X_SetDeviceAddress+0x7c>)
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	9200      	str	r2, [sp, #0]
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <VL53L0X_SetDeviceAddress+0x84>)
 8001292:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001296:	4621      	mov	r1, r4
 8001298:	2001      	movs	r0, #1
 800129a:	f005 fded 	bl	8006e78 <trace_print_module_function>
	return Status;
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd90      	pop	{r4, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200002cc 	.word	0x200002cc
 80012b0:	0800d120 	.word	0x0800d120
 80012b4:	0800ceb0 	.word	0x0800ceb0
 80012b8:	0800cec4 	.word	0x0800cec4

080012bc <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80012bc:	b5b0      	push	{r4, r5, r7, lr}
 80012be:	b09a      	sub	sp, #104	; 0x68
 80012c0:	af04      	add	r7, sp, #16
 80012c2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	VL53L0X_DeviceParameters_t CurrentParameters;
	int i;
	uint8_t StopVariable;

	LOG_FUNCTION_START("");
 80012ca:	4bbd      	ldr	r3, [pc, #756]	; (80015c0 <VL53L0X_DataInit+0x304>)
 80012cc:	681c      	ldr	r4, [r3, #0]
 80012ce:	f005 fe6b 	bl	8006fa8 <HAL_GetTick>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	4bbb      	ldr	r3, [pc, #748]	; (80015c4 <VL53L0X_DataInit+0x308>)
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	9200      	str	r2, [sp, #0]
 80012dc:	4bba      	ldr	r3, [pc, #744]	; (80015c8 <VL53L0X_DataInit+0x30c>)
 80012de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80012e2:	4621      	mov	r1, r4
 80012e4:	2001      	movs	r0, #1
 80012e6:	f005 fdc7 	bl	8006e78 <trace_print_module_function>
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80012ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d107      	bne.n	8001302 <VL53L0X_DataInit+0x46>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2188      	movs	r1, #136	; 0x88
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fe2e 	bl	8000f58 <VL53L0X_WrByte>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001310:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800131a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4aaa      	ldr	r2, [pc, #680]	; (80015cc <VL53L0X_DataInit+0x310>)
 8001322:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4aa9      	ldr	r2, [pc, #676]	; (80015d0 <VL53L0X_DataInit+0x314>)
 800132a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 faf8 	bl	8001930 <VL53L0X_GetDeviceParameters>
 8001340:	4603      	mov	r3, r0
 8001342:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8001346:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800134a:	2b00      	cmp	r3, #0
 800134c:	d112      	bne.n	8001374 <VL53L0X_DataInit+0xb8>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800134e:	2300      	movs	r3, #0
 8001350:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8001352:	2300      	movs	r3, #0
 8001354:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f103 0410 	add.w	r4, r3, #16
 800135c:	f107 0510 	add.w	r5, r7, #16
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2264      	movs	r2, #100	; 0x64
 8001378:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001382:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800138c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001396:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80013a2:	2201      	movs	r2, #1
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fdd6 	bl	8000f58 <VL53L0X_WrByte>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80013b4:	4313      	orrs	r3, r2
 80013b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80013ba:	2201      	movs	r2, #1
 80013bc:	21ff      	movs	r1, #255	; 0xff
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fdca 	bl	8000f58 <VL53L0X_WrByte>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80013cc:	4313      	orrs	r3, r2
 80013ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fdbe 	bl	8000f58 <VL53L0X_WrByte>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80013e4:	4313      	orrs	r3, r2
 80013e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80013ea:	f107 030f 	add.w	r3, r7, #15
 80013ee:	461a      	mov	r2, r3
 80013f0:	2191      	movs	r1, #145	; 0x91
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fe32 	bl	800105c <VL53L0X_RdByte>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001400:	4313      	orrs	r3, r2
 8001402:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800140e:	2201      	movs	r2, #1
 8001410:	2100      	movs	r1, #0
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fda0 	bl	8000f58 <VL53L0X_WrByte>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001420:	4313      	orrs	r3, r2
 8001422:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001426:	2200      	movs	r2, #0
 8001428:	21ff      	movs	r1, #255	; 0xff
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fd94 	bl	8000f58 <VL53L0X_WrByte>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001438:	4313      	orrs	r3, r2
 800143a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800143e:	2200      	movs	r2, #0
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fd88 	bl	8000f58 <VL53L0X_WrByte>
 8001448:	4603      	mov	r3, r0
 800144a:	461a      	mov	r2, r3
 800144c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001450:	4313      	orrs	r3, r2
 8001452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001456:	2300      	movs	r3, #0
 8001458:	653b      	str	r3, [r7, #80]	; 0x50
 800145a:	e014      	b.n	8001486 <VL53L0X_DataInit+0x1ca>
		if (Status == VL53L0X_ERROR_NONE)
 800145c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001460:	2b00      	cmp	r3, #0
 8001462:	d114      	bne.n	800148e <VL53L0X_DataInit+0x1d2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001466:	b29b      	uxth	r3, r3
 8001468:	2201      	movs	r2, #1
 800146a:	4619      	mov	r1, r3
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 ffe1 	bl	8002434 <VL53L0X_SetLimitCheckEnable>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800147a:	4313      	orrs	r3, r2
 800147c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001482:	3301      	adds	r3, #1
 8001484:	653b      	str	r3, [r7, #80]	; 0x50
 8001486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001488:	2b05      	cmp	r3, #5
 800148a:	dde7      	ble.n	800145c <VL53L0X_DataInit+0x1a0>
 800148c:	e000      	b.n	8001490 <VL53L0X_DataInit+0x1d4>
		else
			break;
 800148e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8001490:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001494:	2b00      	cmp	r3, #0
 8001496:	d107      	bne.n	80014a8 <VL53L0X_DataInit+0x1ec>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001498:	2200      	movs	r2, #0
 800149a:	2102      	movs	r1, #2
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 ffc9 	bl	8002434 <VL53L0X_SetLimitCheckEnable>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80014a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d107      	bne.n	80014c0 <VL53L0X_DataInit+0x204>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80014b0:	2200      	movs	r2, #0
 80014b2:	2103      	movs	r1, #3
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 ffbd 	bl	8002434 <VL53L0X_SetLimitCheckEnable>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80014c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d107      	bne.n	80014d8 <VL53L0X_DataInit+0x21c>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80014c8:	2200      	movs	r2, #0
 80014ca:	2104      	movs	r1, #4
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 ffb1 	bl	8002434 <VL53L0X_SetLimitCheckEnable>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80014d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d107      	bne.n	80014f0 <VL53L0X_DataInit+0x234>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80014e0:	2200      	movs	r2, #0
 80014e2:	2105      	movs	r1, #5
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 ffa5 	bl	8002434 <VL53L0X_SetLimitCheckEnable>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80014f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d108      	bne.n	800150a <VL53L0X_DataInit+0x24e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80014f8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80014fc:	2100      	movs	r1, #0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f001 f89c 	bl	800263c <VL53L0X_SetLimitCheckValue>
 8001504:	4603      	mov	r3, r0
 8001506:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800150a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800150e:	2b00      	cmp	r3, #0
 8001510:	d108      	bne.n	8001524 <VL53L0X_DataInit+0x268>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001516:	2101      	movs	r1, #1
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f001 f88f 	bl	800263c <VL53L0X_SetLimitCheckValue>
 800151e:	4603      	mov	r3, r0
 8001520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001524:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001528:	2b00      	cmp	r3, #0
 800152a:	d108      	bne.n	800153e <VL53L0X_DataInit+0x282>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800152c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001530:	2102      	movs	r1, #2
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f001 f882 	bl	800263c <VL53L0X_SetLimitCheckValue>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800153e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001542:	2b00      	cmp	r3, #0
 8001544:	d107      	bne.n	8001556 <VL53L0X_DataInit+0x29a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001546:	2200      	movs	r2, #0
 8001548:	2103      	movs	r1, #3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f001 f876 	bl	800263c <VL53L0X_SetLimitCheckValue>
 8001550:	4603      	mov	r3, r0
 8001552:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001556:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10f      	bne.n	800157e <VL53L0X_DataInit+0x2c2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	22ff      	movs	r2, #255	; 0xff
 8001562:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001566:	22ff      	movs	r2, #255	; 0xff
 8001568:	2101      	movs	r1, #1
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fcf4 	bl	8000f58 <VL53L0X_WrByte>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800157e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <VL53L0X_DataInit+0x2d2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <VL53L0X_DataInit+0x304>)
 8001590:	681c      	ldr	r4, [r3, #0]
 8001592:	f005 fd09 	bl	8006fa8 <HAL_GetTick>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <VL53L0X_DataInit+0x308>)
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	9200      	str	r2, [sp, #0]
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <VL53L0X_DataInit+0x318>)
 80015a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015ac:	4621      	mov	r1, r4
 80015ae:	2001      	movs	r0, #1
 80015b0:	f005 fc62 	bl	8006e78 <trace_print_module_function>
	return Status;
 80015b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3758      	adds	r7, #88	; 0x58
 80015bc:	46bd      	mov	sp, r7
 80015be:	bdb0      	pop	{r4, r5, r7, pc}
 80015c0:	200002cc 	.word	0x200002cc
 80015c4:	0800d13c 	.word	0x0800d13c
 80015c8:	0800ceb0 	.word	0x0800ceb0
 80015cc:	00016b85 	.word	0x00016b85
 80015d0:	000970a4 	.word	0x000970a4
 80015d4:	0800cec4 	.word	0x0800cec4

080015d8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b0a0      	sub	sp, #128	; 0x80
 80015dc:	af04      	add	r7, sp, #16
 80015de:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	2240      	movs	r2, #64	; 0x40
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00a feaf 	bl	800c352 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");
 8001614:	4bc1      	ldr	r3, [pc, #772]	; (800191c <VL53L0X_StaticInit+0x344>)
 8001616:	681c      	ldr	r4, [r3, #0]
 8001618:	f005 fcc6 	bl	8006fa8 <HAL_GetTick>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	4bbf      	ldr	r3, [pc, #764]	; (8001920 <VL53L0X_StaticInit+0x348>)
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	9200      	str	r2, [sp, #0]
 8001626:	4bbf      	ldr	r3, [pc, #764]	; (8001924 <VL53L0X_StaticInit+0x34c>)
 8001628:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800162c:	4621      	mov	r1, r4
 800162e:	2001      	movs	r0, #1
 8001630:	f005 fc22 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8001634:	2101      	movs	r1, #1
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f003 f804 	bl	8004644 <VL53L0X_get_info_from_device>
 800163c:	4603      	mov	r3, r0
 800163e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001648:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8001654:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001658:	2b01      	cmp	r3, #1
 800165a:	d80d      	bhi.n	8001678 <VL53L0X_StaticInit+0xa0>
 800165c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001660:	2b01      	cmp	r3, #1
 8001662:	d102      	bne.n	800166a <VL53L0X_StaticInit+0x92>
		((ApertureSpads == 1) && (count > 32)) ||
 8001664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001666:	2b20      	cmp	r3, #32
 8001668:	d806      	bhi.n	8001678 <VL53L0X_StaticInit+0xa0>
 800166a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10e      	bne.n	8001690 <VL53L0X_StaticInit+0xb8>
		((ApertureSpads == 0) && (count > 12)))
 8001672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001674:	2b0c      	cmp	r3, #12
 8001676:	d90b      	bls.n	8001690 <VL53L0X_StaticInit+0xb8>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8001678:	f107 0218 	add.w	r2, r7, #24
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f002 fa2d 	bl	8003ae2 <VL53L0X_perform_ref_spad_management>
 8001688:	4603      	mov	r3, r0
 800168a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800168e:	e009      	b.n	80016a4 <VL53L0X_StaticInit+0xcc>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8001690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001694:	461a      	mov	r2, r3
 8001696:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f002 fc2e 	bl	8003efa <VL53L0X_set_reference_spads>
 800169e:	4603      	mov	r3, r0
 80016a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80016a4:	4ba0      	ldr	r3, [pc, #640]	; (8001928 <VL53L0X_StaticInit+0x350>)
 80016a6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80016a8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10f      	bne.n	80016d0 <VL53L0X_StaticInit+0xf8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80016b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80016ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d104      	bne.n	80016cc <VL53L0X_StaticInit+0xf4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80016c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80016ca:	e001      	b.n	80016d0 <VL53L0X_StaticInit+0xf8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80016cc:	4b96      	ldr	r3, [pc, #600]	; (8001928 <VL53L0X_StaticInit+0x350>)
 80016ce:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80016d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d106      	bne.n	80016e6 <VL53L0X_StaticInit+0x10e>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80016d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f004 fc42 	bl	8005f64 <VL53L0X_load_tuning_settings>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80016e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10a      	bne.n	8001704 <VL53L0X_StaticInit+0x12c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80016ee:	2300      	movs	r3, #0
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2304      	movs	r3, #4
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f001 fd4b 	bl	8003194 <VL53L0X_SetGpioConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001704:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001708:	2b00      	cmp	r3, #0
 800170a:	d121      	bne.n	8001750 <VL53L0X_StaticInit+0x178>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800170c:	2201      	movs	r2, #1
 800170e:	21ff      	movs	r1, #255	; 0xff
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fc21 	bl	8000f58 <VL53L0X_WrByte>
 8001716:	4603      	mov	r3, r0
 8001718:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800171c:	f107 031a 	add.w	r3, r7, #26
 8001720:	461a      	mov	r2, r3
 8001722:	2184      	movs	r1, #132	; 0x84
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff fcc3 	bl	80010b0 <VL53L0X_RdWord>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001732:	4313      	orrs	r3, r2
 8001734:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001738:	2200      	movs	r2, #0
 800173a:	21ff      	movs	r1, #255	; 0xff
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fc0b 	bl	8000f58 <VL53L0X_WrByte>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800174a:	4313      	orrs	r3, r2
 800174c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001750:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001754:	2b00      	cmp	r3, #0
 8001756:	d105      	bne.n	8001764 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8001758:	8b7b      	ldrh	r3, [r7, #26]
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	461a      	mov	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8001764:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001768:	2b00      	cmp	r3, #0
 800176a:	d108      	bne.n	800177e <VL53L0X_StaticInit+0x1a6>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f8dc 	bl	8001930 <VL53L0X_GetDeviceParameters>
 8001778:	4603      	mov	r3, r0
 800177a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800177e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001782:	2b00      	cmp	r3, #0
 8001784:	d110      	bne.n	80017a8 <VL53L0X_StaticInit+0x1d0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8001786:	f107 0319 	add.w	r3, r7, #25
 800178a:	4619      	mov	r1, r3
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fa3b 	bl	8001c08 <VL53L0X_GetFractionEnable>
 8001792:	4603      	mov	r3, r0
 8001794:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8001798:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <VL53L0X_StaticInit+0x1d0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80017a0:	7e7a      	ldrb	r2, [r7, #25]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80017a8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10e      	bne.n	80017ce <VL53L0X_StaticInit+0x1f6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f103 0410 	add.w	r4, r3, #16
 80017b6:	f107 051c 	add.w	r5, r7, #28
 80017ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80017ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d111      	bne.n	80017fa <VL53L0X_StaticInit+0x222>
		Status = VL53L0X_RdByte(Dev,
 80017d6:	f107 0319 	add.w	r3, r7, #25
 80017da:	461a      	mov	r2, r3
 80017dc:	2101      	movs	r1, #1
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fc3c 	bl	800105c <VL53L0X_RdByte>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80017ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d103      	bne.n	80017fa <VL53L0X_StaticInit+0x222>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80017f2:	7e7a      	ldrb	r2, [r7, #25]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80017fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d107      	bne.n	8001812 <VL53L0X_StaticInit+0x23a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fb4a 	bl	8001ea0 <VL53L0X_SetSequenceStepEnable>
 800180c:	4603      	mov	r3, r0
 800180e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8001812:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001816:	2b00      	cmp	r3, #0
 8001818:	d107      	bne.n	800182a <VL53L0X_StaticInit+0x252>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800181a:	2200      	movs	r2, #0
 800181c:	2102      	movs	r1, #2
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fb3e 	bl	8001ea0 <VL53L0X_SetSequenceStepEnable>
 8001824:	4603      	mov	r3, r0
 8001826:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800182a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800182e:	2b00      	cmp	r3, #0
 8001830:	d103      	bne.n	800183a <VL53L0X_StaticInit+0x262>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2203      	movs	r2, #3
 8001836:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800183a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <VL53L0X_StaticInit+0x27e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8001842:	f107 0313 	add.w	r3, r7, #19
 8001846:	461a      	mov	r2, r3
 8001848:	2100      	movs	r1, #0
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fae6 	bl	8001e1c <VL53L0X_GetVcselPulsePeriod>
 8001850:	4603      	mov	r3, r0
 8001852:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001856:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800185a:	2b00      	cmp	r3, #0
 800185c:	d103      	bne.n	8001866 <VL53L0X_StaticInit+0x28e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800185e:	7cfa      	ldrb	r2, [r7, #19]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8001866:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <VL53L0X_StaticInit+0x2aa>
		Status = VL53L0X_GetVcselPulsePeriod(
 800186e:	f107 0313 	add.w	r3, r7, #19
 8001872:	461a      	mov	r2, r3
 8001874:	2101      	movs	r1, #1
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fad0 	bl	8001e1c <VL53L0X_GetVcselPulsePeriod>
 800187c:	4603      	mov	r3, r0
 800187e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001882:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001886:	2b00      	cmp	r3, #0
 8001888:	d103      	bne.n	8001892 <VL53L0X_StaticInit+0x2ba>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800188a:	7cfa      	ldrb	r2, [r7, #19]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8001892:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <VL53L0X_StaticInit+0x2d6>
		Status = get_sequence_step_timeout(
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	461a      	mov	r2, r3
 80018a0:	2103      	movs	r1, #3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f003 fca8 	bl	80051f8 <get_sequence_step_timeout>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80018ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <VL53L0X_StaticInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80018be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <VL53L0X_StaticInit+0x302>
		Status = get_sequence_step_timeout(
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	461a      	mov	r2, r3
 80018cc:	2104      	movs	r1, #4
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f003 fc92 	bl	80051f8 <get_sequence_step_timeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80018da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d103      	bne.n	80018ea <VL53L0X_StaticInit+0x312>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			Dev,
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <VL53L0X_StaticInit+0x344>)
 80018ec:	681c      	ldr	r4, [r3, #0]
 80018ee:	f005 fb5b 	bl	8006fa8 <HAL_GetTick>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <VL53L0X_StaticInit+0x348>)
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	9200      	str	r2, [sp, #0]
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <VL53L0X_StaticInit+0x354>)
 8001904:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001908:	4621      	mov	r1, r4
 800190a:	2001      	movs	r0, #1
 800190c:	f005 fab4 	bl	8006e78 <trace_print_module_function>
	return Status;
 8001910:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8001914:	4618      	mov	r0, r3
 8001916:	3770      	adds	r7, #112	; 0x70
 8001918:	46bd      	mov	sp, r7
 800191a:	bdb0      	pop	{r4, r5, r7, pc}
 800191c:	200002cc 	.word	0x200002cc
 8001920:	0800d190 	.word	0x0800d190
 8001924:	0800ceb0 	.word	0x0800ceb0
 8001928:	20000010 	.word	0x20000010
 800192c:	0800cec4 	.word	0x0800cec4

08001930 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af04      	add	r7, sp, #16
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");
 800193e:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <VL53L0X_GetDeviceParameters+0x168>)
 8001940:	681c      	ldr	r4, [r3, #0]
 8001942:	f005 fb31 	bl	8006fa8 <HAL_GetTick>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	4b54      	ldr	r3, [pc, #336]	; (8001a9c <VL53L0X_GetDeviceParameters+0x16c>)
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	9200      	str	r2, [sp, #0]
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <VL53L0X_GetDeviceParameters+0x170>)
 8001952:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001956:	4621      	mov	r1, r4
 8001958:	2001      	movs	r0, #1
 800195a:	f005 fa8d 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f914 	bl	8001b90 <VL53L0X_GetDeviceMode>
 8001968:	4603      	mov	r3, r0
 800196a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800196c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d107      	bne.n	8001984 <VL53L0X_GetDeviceParameters+0x54>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	3308      	adds	r3, #8
 8001978:	4619      	mov	r1, r3
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fc5e 	bl	800223c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8001980:	4603      	mov	r3, r0
 8001982:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8001984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <VL53L0X_GetDeviceParameters+0x62>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d107      	bne.n	80019aa <VL53L0X_GetDeviceParameters+0x7a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	3310      	adds	r3, #16
 800199e:	4619      	mov	r1, r3
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fce9 	bl	8002378 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80019a6:	4603      	mov	r3, r0
 80019a8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80019aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d107      	bne.n	80019c2 <VL53L0X_GetDeviceParameters+0x92>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	3314      	adds	r3, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fbfd 	bl	80011b8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d134      	bne.n	8001a34 <VL53L0X_GetDeviceParameters+0x104>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	e02a      	b.n	8001a26 <VL53L0X_GetDeviceParameters+0xf6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d12a      	bne.n	8001a2e <VL53L0X_GetDeviceParameters+0xfe>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	b299      	uxth	r1, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	3308      	adds	r3, #8
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	3304      	adds	r3, #4
 80019e8:	461a      	mov	r2, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 feb2 	bl	8002754 <VL53L0X_GetLimitCheckValue>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d117      	bne.n	8001a32 <VL53L0X_GetDeviceParameters+0x102>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	b299      	uxth	r1, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3318      	adds	r3, #24
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	461a      	mov	r2, r3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fdc7 	bl	80025a4 <VL53L0X_GetLimitCheckEnable>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	3301      	adds	r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	ddd1      	ble.n	80019d0 <VL53L0X_GetDeviceParameters+0xa0>
 8001a2c:	e002      	b.n	8001a34 <VL53L0X_GetDeviceParameters+0x104>
				break;
 8001a2e:	bf00      	nop
 8001a30:	e000      	b.n	8001a34 <VL53L0X_GetDeviceParameters+0x104>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8001a32:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d107      	bne.n	8001a4c <VL53L0X_GetDeviceParameters+0x11c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	333c      	adds	r3, #60	; 0x3c
 8001a40:	4619      	mov	r1, r3
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 ff3e 	bl	80028c4 <VL53L0X_GetWrapAroundCheckEnable>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d107      	bne.n	8001a64 <VL53L0X_GetDeviceParameters+0x134>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3304      	adds	r3, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f95c 	bl	8001d18 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <VL53L0X_GetDeviceParameters+0x168>)
 8001a66:	681c      	ldr	r4, [r3, #0]
 8001a68:	f005 fa9e 	bl	8006fa8 <HAL_GetTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <VL53L0X_GetDeviceParameters+0x16c>)
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <VL53L0X_GetDeviceParameters+0x174>)
 8001a7e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a82:	4621      	mov	r1, r4
 8001a84:	2001      	movs	r0, #1
 8001a86:	f005 f9f7 	bl	8006e78 <trace_print_module_function>
	return Status;
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd90      	pop	{r4, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200002cc 	.word	0x200002cc
 8001a9c:	0800d1f0 	.word	0x0800d1f0
 8001aa0:	0800ceb0 	.word	0x0800ceb0
 8001aa4:	0800cec4 	.word	0x0800cec4

08001aa8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af04      	add	r7, sp, #16
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <VL53L0X_SetDeviceMode+0xd8>)
 8001aba:	681c      	ldr	r4, [r3, #0]
 8001abc:	f005 fa74 	bl	8006fa8 <HAL_GetTick>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <VL53L0X_SetDeviceMode+0xdc>)
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	9200      	str	r2, [sp, #0]
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <VL53L0X_SetDeviceMode+0xe0>)
 8001ad0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f005 f9ce 	bl	8006e78 <trace_print_module_function>

	switch (DeviceMode) {
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	2b15      	cmp	r3, #21
 8001ae0:	d832      	bhi.n	8001b48 <VL53L0X_SetDeviceMode+0xa0>
 8001ae2:	a201      	add	r2, pc, #4	; (adr r2, 8001ae8 <VL53L0X_SetDeviceMode+0x40>)
 8001ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae8:	08001b41 	.word	0x08001b41
 8001aec:	08001b41 	.word	0x08001b41
 8001af0:	08001b49 	.word	0x08001b49
 8001af4:	08001b41 	.word	0x08001b41
 8001af8:	08001b49 	.word	0x08001b49
 8001afc:	08001b49 	.word	0x08001b49
 8001b00:	08001b49 	.word	0x08001b49
 8001b04:	08001b49 	.word	0x08001b49
 8001b08:	08001b49 	.word	0x08001b49
 8001b0c:	08001b49 	.word	0x08001b49
 8001b10:	08001b49 	.word	0x08001b49
 8001b14:	08001b49 	.word	0x08001b49
 8001b18:	08001b49 	.word	0x08001b49
 8001b1c:	08001b49 	.word	0x08001b49
 8001b20:	08001b49 	.word	0x08001b49
 8001b24:	08001b49 	.word	0x08001b49
 8001b28:	08001b49 	.word	0x08001b49
 8001b2c:	08001b49 	.word	0x08001b49
 8001b30:	08001b49 	.word	0x08001b49
 8001b34:	08001b49 	.word	0x08001b49
 8001b38:	08001b41 	.word	0x08001b41
 8001b3c:	08001b41 	.word	0x08001b41
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	741a      	strb	r2, [r3, #16]
		break;
 8001b46:	e001      	b.n	8001b4c <VL53L0X_SetDeviceMode+0xa4>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8001b48:	23f8      	movs	r3, #248	; 0xf8
 8001b4a:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <VL53L0X_SetDeviceMode+0xd8>)
 8001b4e:	681c      	ldr	r4, [r3, #0]
 8001b50:	f005 fa2a 	bl	8006fa8 <HAL_GetTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5c:	9302      	str	r3, [sp, #8]
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <VL53L0X_SetDeviceMode+0xdc>)
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	9200      	str	r2, [sp, #0]
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <VL53L0X_SetDeviceMode+0xe4>)
 8001b66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f005 f983 	bl	8006e78 <trace_print_module_function>
	return Status;
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200002cc 	.word	0x200002cc
 8001b84:	0800d20c 	.word	0x0800d20c
 8001b88:	0800ced4 	.word	0x0800ced4
 8001b8c:	0800cec4 	.word	0x0800cec4

08001b90 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <VL53L0X_GetDeviceMode+0x68>)
 8001ba0:	681c      	ldr	r4, [r3, #0]
 8001ba2:	f005 fa01 	bl	8006fa8 <HAL_GetTick>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <VL53L0X_GetDeviceMode+0x6c>)
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	9200      	str	r2, [sp, #0]
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <VL53L0X_GetDeviceMode+0x70>)
 8001bb2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f005 f95d 	bl	8006e78 <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7c1a      	ldrb	r2, [r3, #16]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <VL53L0X_GetDeviceMode+0x68>)
 8001bc8:	681c      	ldr	r4, [r3, #0]
 8001bca:	f005 f9ed 	bl	8006fa8 <HAL_GetTick>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <VL53L0X_GetDeviceMode+0x6c>)
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	9200      	str	r2, [sp, #0]
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <VL53L0X_GetDeviceMode+0x74>)
 8001be0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001be4:	4621      	mov	r1, r4
 8001be6:	2001      	movs	r0, #1
 8001be8:	f005 f946 	bl	8006e78 <trace_print_module_function>
	return Status;
 8001bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd90      	pop	{r4, r7, pc}
 8001bf8:	200002cc 	.word	0x200002cc
 8001bfc:	0800d224 	.word	0x0800d224
 8001c00:	0800ceb0 	.word	0x0800ceb0
 8001c04:	0800cec4 	.word	0x0800cec4

08001c08 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af04      	add	r7, sp, #16
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001c16:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <VL53L0X_GetFractionEnable+0x84>)
 8001c18:	681c      	ldr	r4, [r3, #0]
 8001c1a:	f005 f9c5 	bl	8006fa8 <HAL_GetTick>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <VL53L0X_GetFractionEnable+0x88>)
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	9200      	str	r2, [sp, #0]
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <VL53L0X_GetFractionEnable+0x8c>)
 8001c2a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c2e:	4621      	mov	r1, r4
 8001c30:	2001      	movs	r0, #1
 8001c32:	f005 f921 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	2109      	movs	r1, #9
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fa0e 	bl	800105c <VL53L0X_RdByte>
 8001c40:	4603      	mov	r3, r0
 8001c42:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8001c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d106      	bne.n	8001c5a <VL53L0X_GetFractionEnable+0x52>
		*pEnabled = (*pEnabled & 1);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <VL53L0X_GetFractionEnable+0x84>)
 8001c5c:	681c      	ldr	r4, [r3, #0]
 8001c5e:	f005 f9a3 	bl	8006fa8 <HAL_GetTick>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <VL53L0X_GetFractionEnable+0x88>)
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	9200      	str	r2, [sp, #0]
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <VL53L0X_GetFractionEnable+0x90>)
 8001c74:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c78:	4621      	mov	r1, r4
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f005 f8fc 	bl	8006e78 <trace_print_module_function>
	return Status;
 8001c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd90      	pop	{r4, r7, pc}
 8001c8c:	200002cc 	.word	0x200002cc
 8001c90:	0800d25c 	.word	0x0800d25c
 8001c94:	0800ceb0 	.word	0x0800ceb0
 8001c98:	0800cec4 	.word	0x0800cec4

08001c9c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af04      	add	r7, sp, #16
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8001cac:	681c      	ldr	r4, [r3, #0]
 8001cae:	f005 f97b 	bl	8006fa8 <HAL_GetTick>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	9200      	str	r2, [sp, #0]
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x74>)
 8001cbe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f005 f8d7 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8001cca:	6839      	ldr	r1, [r7, #0]
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f003 ff27 	bl	8005b20 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8001cd8:	681c      	ldr	r4, [r3, #0]
 8001cda:	f005 f965 	bl	8006fa8 <HAL_GetTick>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	9200      	str	r2, [sp, #0]
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x78>)
 8001cf0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f005 f8be 	bl	8006e78 <trace_print_module_function>

	return Status;
 8001cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	200002cc 	.word	0x200002cc
 8001d0c:	0800d2b0 	.word	0x0800d2b0
 8001d10:	0800ceb0 	.word	0x0800ceb0
 8001d14:	0800cec4 	.word	0x0800cec4

08001d18 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af04      	add	r7, sp, #16
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8001d28:	681c      	ldr	r4, [r3, #0]
 8001d2a:	f005 f93d 	bl	8006fa8 <HAL_GetTick>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x70>)
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	9200      	str	r2, [sp, #0]
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x74>)
 8001d3a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d3e:	4621      	mov	r1, r4
 8001d40:	2001      	movs	r0, #1
 8001d42:	f005 f899 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8001d46:	6839      	ldr	r1, [r7, #0]
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f004 f81b 	bl	8005d84 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8001d54:	681c      	ldr	r4, [r3, #0]
 8001d56:	f005 f927 	bl	8006fa8 <HAL_GetTick>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x70>)
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	9200      	str	r2, [sp, #0]
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x78>)
 8001d6c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d70:	4621      	mov	r1, r4
 8001d72:	2001      	movs	r0, #1
 8001d74:	f005 f880 	bl	8006e78 <trace_print_module_function>
	return Status;
 8001d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	200002cc 	.word	0x200002cc
 8001d88:	0800d2e0 	.word	0x0800d2e0
 8001d8c:	0800ceb0 	.word	0x0800ceb0
 8001d90:	0800cec4 	.word	0x0800cec4

08001d94 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af04      	add	r7, sp, #16
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
 8001da0:	4613      	mov	r3, r2
 8001da2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <VL53L0X_SetVcselPulsePeriod+0x78>)
 8001daa:	681c      	ldr	r4, [r3, #0]
 8001dac:	f005 f8fc 	bl	8006fa8 <HAL_GetTick>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <VL53L0X_SetVcselPulsePeriod+0x7c>)
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	9200      	str	r2, [sp, #0]
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <VL53L0X_SetVcselPulsePeriod+0x80>)
 8001dbc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f005 f858 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8001dc8:	78ba      	ldrb	r2, [r7, #2]
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f003 fbe5 	bl	800559e <VL53L0X_set_vcsel_pulse_period>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <VL53L0X_SetVcselPulsePeriod+0x78>)
 8001dda:	681c      	ldr	r4, [r3, #0]
 8001ddc:	f005 f8e4 	bl	8006fa8 <HAL_GetTick>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de8:	9302      	str	r3, [sp, #8]
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <VL53L0X_SetVcselPulsePeriod+0x7c>)
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	9200      	str	r2, [sp, #0]
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <VL53L0X_SetVcselPulsePeriod+0x84>)
 8001df2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001df6:	4621      	mov	r1, r4
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f005 f83d 	bl	8006e78 <trace_print_module_function>
	return Status;
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd90      	pop	{r4, r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200002cc 	.word	0x200002cc
 8001e10:	0800d310 	.word	0x0800d310
 8001e14:	0800ceb0 	.word	0x0800ceb0
 8001e18:	0800cec4 	.word	0x0800cec4

08001e1c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b08b      	sub	sp, #44	; 0x2c
 8001e20:	af04      	add	r7, sp, #16
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	460b      	mov	r3, r1
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <VL53L0X_GetVcselPulsePeriod+0x74>)
 8001e30:	681c      	ldr	r4, [r3, #0]
 8001e32:	f005 f8b9 	bl	8006fa8 <HAL_GetTick>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <VL53L0X_GetVcselPulsePeriod+0x78>)
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	9200      	str	r2, [sp, #0]
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <VL53L0X_GetVcselPulsePeriod+0x7c>)
 8001e42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e46:	4621      	mov	r1, r4
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f005 f815 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4619      	mov	r1, r3
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f003 fe2b 	bl	8005ab0 <VL53L0X_get_vcsel_pulse_period>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <VL53L0X_GetVcselPulsePeriod+0x74>)
 8001e60:	681c      	ldr	r4, [r3, #0]
 8001e62:	f005 f8a1 	bl	8006fa8 <HAL_GetTick>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e6e:	9302      	str	r3, [sp, #8]
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <VL53L0X_GetVcselPulsePeriod+0x78>)
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	9200      	str	r2, [sp, #0]
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <VL53L0X_GetVcselPulsePeriod+0x80>)
 8001e78:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f004 fffa 	bl	8006e78 <trace_print_module_function>
	return Status;
 8001e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	371c      	adds	r7, #28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd90      	pop	{r4, r7, pc}
 8001e90:	200002cc 	.word	0x200002cc
 8001e94:	0800d32c 	.word	0x0800d32c
 8001e98:	0800ceb0 	.word	0x0800ceb0
 8001e9c:	0800cec4 	.word	0x0800cec4

08001ea0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b08b      	sub	sp, #44	; 0x2c
 8001ea4:	af04      	add	r7, sp, #16
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	70fb      	strb	r3, [r7, #3]
 8001eac:	4613      	mov	r3, r2
 8001eae:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");
 8001ebc:	4b5b      	ldr	r3, [pc, #364]	; (800202c <VL53L0X_SetSequenceStepEnable+0x18c>)
 8001ebe:	681c      	ldr	r4, [r3, #0]
 8001ec0:	f005 f872 	bl	8006fa8 <HAL_GetTick>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b59      	ldr	r3, [pc, #356]	; (8002030 <VL53L0X_SetSequenceStepEnable+0x190>)
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	9200      	str	r2, [sp, #0]
 8001ece:	4b59      	ldr	r3, [pc, #356]	; (8002034 <VL53L0X_SetSequenceStepEnable+0x194>)
 8001ed0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f004 ffce 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001edc:	f107 030f 	add.w	r3, r7, #15
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff f8b9 	bl	800105c <VL53L0X_RdByte>
 8001eea:	4603      	mov	r3, r0
 8001eec:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8001ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d15a      	bne.n	8001fb0 <VL53L0X_SetSequenceStepEnable+0x110>
		if (SequenceStepEnabled == 1) {
 8001efa:	78bb      	ldrb	r3, [r7, #2]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d12b      	bne.n	8001f58 <VL53L0X_SetSequenceStepEnable+0xb8>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d825      	bhi.n	8001f52 <VL53L0X_SetSequenceStepEnable+0xb2>
 8001f06:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <VL53L0X_SetSequenceStepEnable+0x6c>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	08001f21 	.word	0x08001f21
 8001f10:	08001f2b 	.word	0x08001f2b
 8001f14:	08001f35 	.word	0x08001f35
 8001f18:	08001f3f 	.word	0x08001f3f
 8001f1c:	08001f49 	.word	0x08001f49
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8001f20:	7dbb      	ldrb	r3, [r7, #22]
 8001f22:	f043 0310 	orr.w	r3, r3, #16
 8001f26:	75bb      	strb	r3, [r7, #22]
				break;
 8001f28:	e043      	b.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8001f2a:	7dbb      	ldrb	r3, [r7, #22]
 8001f2c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001f30:	75bb      	strb	r3, [r7, #22]
				break;
 8001f32:	e03e      	b.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8001f34:	7dbb      	ldrb	r3, [r7, #22]
 8001f36:	f043 0304 	orr.w	r3, r3, #4
 8001f3a:	75bb      	strb	r3, [r7, #22]
				break;
 8001f3c:	e039      	b.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8001f3e:	7dbb      	ldrb	r3, [r7, #22]
 8001f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f44:	75bb      	strb	r3, [r7, #22]
				break;
 8001f46:	e034      	b.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8001f48:	7dbb      	ldrb	r3, [r7, #22]
 8001f4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f4e:	75bb      	strb	r3, [r7, #22]
				break;
 8001f50:	e02f      	b.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001f52:	23fc      	movs	r3, #252	; 0xfc
 8001f54:	75fb      	strb	r3, [r7, #23]
 8001f56:	e02c      	b.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d825      	bhi.n	8001faa <VL53L0X_SetSequenceStepEnable+0x10a>
 8001f5e:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <VL53L0X_SetSequenceStepEnable+0xc4>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001f79 	.word	0x08001f79
 8001f68:	08001f83 	.word	0x08001f83
 8001f6c:	08001f8d 	.word	0x08001f8d
 8001f70:	08001f97 	.word	0x08001f97
 8001f74:	08001fa1 	.word	0x08001fa1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8001f78:	7dbb      	ldrb	r3, [r7, #22]
 8001f7a:	f023 0310 	bic.w	r3, r3, #16
 8001f7e:	75bb      	strb	r3, [r7, #22]
				break;
 8001f80:	e017      	b.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8001f82:	7dbb      	ldrb	r3, [r7, #22]
 8001f84:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001f88:	75bb      	strb	r3, [r7, #22]
				break;
 8001f8a:	e012      	b.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8001f8c:	7dbb      	ldrb	r3, [r7, #22]
 8001f8e:	f023 0304 	bic.w	r3, r3, #4
 8001f92:	75bb      	strb	r3, [r7, #22]
				break;
 8001f94:	e00d      	b.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8001f96:	7dbb      	ldrb	r3, [r7, #22]
 8001f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f9c:	75bb      	strb	r3, [r7, #22]
				break;
 8001f9e:	e008      	b.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8001fa0:	7dbb      	ldrb	r3, [r7, #22]
 8001fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fa6:	75bb      	strb	r3, [r7, #22]
				break;
 8001fa8:	e003      	b.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001faa:	23fc      	movs	r3, #252	; 0xfc
 8001fac:	75fb      	strb	r3, [r7, #23]
 8001fae:	e000      	b.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			}
		}
 8001fb0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	7dba      	ldrb	r2, [r7, #22]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d01e      	beq.n	8001ff8 <VL53L0X_SetSequenceStepEnable+0x158>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8001fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d107      	bne.n	8001fd2 <VL53L0X_SetSequenceStepEnable+0x132>
			Status = VL53L0X_WrByte(Dev,
 8001fc2:	7dbb      	ldrb	r3, [r7, #22]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7fe ffc5 	bl	8000f58 <VL53L0X_WrByte>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8001fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <VL53L0X_SetSequenceStepEnable+0x142>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7dba      	ldrb	r2, [r7, #22]
 8001fde:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8001fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <VL53L0X_SetSequenceStepEnable+0x158>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001ff0:	6939      	ldr	r1, [r7, #16]
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fe52 	bl	8001c9c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
				MeasurementTimingBudgetMicroSeconds);
		}
	}

	LOG_FUNCTION_END(Status);
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <VL53L0X_SetSequenceStepEnable+0x18c>)
 8001ffa:	681c      	ldr	r4, [r3, #0]
 8001ffc:	f004 ffd4 	bl	8006fa8 <HAL_GetTick>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <VL53L0X_SetSequenceStepEnable+0x190>)
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	9200      	str	r2, [sp, #0]
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <VL53L0X_SetSequenceStepEnable+0x198>)
 8002012:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002016:	4621      	mov	r1, r4
 8002018:	2001      	movs	r0, #1
 800201a:	f004 ff2d 	bl	8006e78 <trace_print_module_function>

	return Status;
 800201e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002022:	4618      	mov	r0, r3
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	200002cc 	.word	0x200002cc
 8002030:	0800d348 	.word	0x0800d348
 8002034:	0800ceb0 	.word	0x0800ceb0
 8002038:	0800cec4 	.word	0x0800cec4

0800203c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b08b      	sub	sp, #44	; 0x2c
 8002040:	af04      	add	r7, sp, #16
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	72fb      	strb	r3, [r7, #11]
 800204a:	4613      	mov	r3, r2
 800204c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");
 8002058:	4b32      	ldr	r3, [pc, #200]	; (8002124 <sequence_step_enabled+0xe8>)
 800205a:	681c      	ldr	r4, [r3, #0]
 800205c:	f004 ffa4 	bl	8006fa8 <HAL_GetTick>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	4b30      	ldr	r3, [pc, #192]	; (8002128 <sequence_step_enabled+0xec>)
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	9200      	str	r2, [sp, #0]
 800206a:	4b30      	ldr	r3, [pc, #192]	; (800212c <sequence_step_enabled+0xf0>)
 800206c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002070:	4621      	mov	r1, r4
 8002072:	2001      	movs	r0, #1
 8002074:	f004 ff00 	bl	8006e78 <trace_print_module_function>

	switch (SequenceStepId) {
 8002078:	7afb      	ldrb	r3, [r7, #11]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d836      	bhi.n	80020ec <sequence_step_enabled+0xb0>
 800207e:	a201      	add	r2, pc, #4	; (adr r2, 8002084 <sequence_step_enabled+0x48>)
 8002080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002084:	08002099 	.word	0x08002099
 8002088:	080020ab 	.word	0x080020ab
 800208c:	080020bd 	.word	0x080020bd
 8002090:	080020cf 	.word	0x080020cf
 8002094:	080020e1 	.word	0x080020e1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8002098:	7abb      	ldrb	r3, [r7, #10]
 800209a:	111b      	asrs	r3, r3, #4
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	701a      	strb	r2, [r3, #0]
		break;
 80020a8:	e022      	b.n	80020f0 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80020aa:	7abb      	ldrb	r3, [r7, #10]
 80020ac:	10db      	asrs	r3, r3, #3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	701a      	strb	r2, [r3, #0]
		break;
 80020ba:	e019      	b.n	80020f0 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80020bc:	7abb      	ldrb	r3, [r7, #10]
 80020be:	109b      	asrs	r3, r3, #2
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	701a      	strb	r2, [r3, #0]
		break;
 80020cc:	e010      	b.n	80020f0 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80020ce:	7abb      	ldrb	r3, [r7, #10]
 80020d0:	119b      	asrs	r3, r3, #6
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	701a      	strb	r2, [r3, #0]
		break;
 80020de:	e007      	b.n	80020f0 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80020e0:	7abb      	ldrb	r3, [r7, #10]
 80020e2:	09db      	lsrs	r3, r3, #7
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	701a      	strb	r2, [r3, #0]
		break;
 80020ea:	e001      	b.n	80020f0 <sequence_step_enabled+0xb4>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80020ec:	23fc      	movs	r3, #252	; 0xfc
 80020ee:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <sequence_step_enabled+0xe8>)
 80020f2:	681c      	ldr	r4, [r3, #0]
 80020f4:	f004 ff58 	bl	8006fa8 <HAL_GetTick>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002100:	9302      	str	r3, [sp, #8]
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <sequence_step_enabled+0xec>)
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	9200      	str	r2, [sp, #0]
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <sequence_step_enabled+0xf4>)
 800210a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800210e:	4621      	mov	r1, r4
 8002110:	2001      	movs	r0, #1
 8002112:	f004 feb1 	bl	8006e78 <trace_print_module_function>
	return Status;
 8002116:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800211a:	4618      	mov	r0, r3
 800211c:	371c      	adds	r7, #28
 800211e:	46bd      	mov	sp, r7
 8002120:	bd90      	pop	{r4, r7, pc}
 8002122:	bf00      	nop
 8002124:	200002cc 	.word	0x200002cc
 8002128:	0800d368 	.word	0x0800d368
 800212c:	0800ceb0 	.word	0x0800ceb0
 8002130:	0800cec4 	.word	0x0800cec4

08002134 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af04      	add	r7, sp, #16
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");
 8002146:	4b39      	ldr	r3, [pc, #228]	; (800222c <VL53L0X_GetSequenceStepEnables+0xf8>)
 8002148:	681c      	ldr	r4, [r3, #0]
 800214a:	f004 ff2d 	bl	8006fa8 <HAL_GetTick>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	4b37      	ldr	r3, [pc, #220]	; (8002230 <VL53L0X_GetSequenceStepEnables+0xfc>)
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	9200      	str	r2, [sp, #0]
 8002158:	4b36      	ldr	r3, [pc, #216]	; (8002234 <VL53L0X_GetSequenceStepEnables+0x100>)
 800215a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800215e:	4621      	mov	r1, r4
 8002160:	2001      	movs	r0, #1
 8002162:	f004 fe89 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002166:	f107 030e 	add.w	r3, r7, #14
 800216a:	461a      	mov	r2, r3
 800216c:	2101      	movs	r1, #1
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe ff74 	bl	800105c <VL53L0X_RdByte>
 8002174:	4603      	mov	r3, r0
 8002176:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8002178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <VL53L0X_GetSequenceStepEnables+0x5c>
		Status = sequence_step_enabled(Dev,
 8002180:	7bba      	ldrb	r2, [r7, #14]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2100      	movs	r1, #0
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ff58 	bl	800203c <sequence_step_enabled>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d108      	bne.n	80021aa <VL53L0X_GetSequenceStepEnables+0x76>
		Status = sequence_step_enabled(Dev,
 8002198:	7bba      	ldrb	r2, [r7, #14]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	3302      	adds	r3, #2
 800219e:	2101      	movs	r1, #1
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff4b 	bl	800203c <sequence_step_enabled>
 80021a6:	4603      	mov	r3, r0
 80021a8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d108      	bne.n	80021c4 <VL53L0X_GetSequenceStepEnables+0x90>
		Status = sequence_step_enabled(Dev,
 80021b2:	7bba      	ldrb	r2, [r7, #14]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	2102      	movs	r1, #2
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ff3e 	bl	800203c <sequence_step_enabled>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80021c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d108      	bne.n	80021de <VL53L0X_GetSequenceStepEnables+0xaa>
		Status = sequence_step_enabled(Dev,
 80021cc:	7bba      	ldrb	r2, [r7, #14]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	3303      	adds	r3, #3
 80021d2:	2103      	movs	r1, #3
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff31 	bl	800203c <sequence_step_enabled>
 80021da:	4603      	mov	r3, r0
 80021dc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d108      	bne.n	80021f8 <VL53L0X_GetSequenceStepEnables+0xc4>
		Status = sequence_step_enabled(Dev,
 80021e6:	7bba      	ldrb	r2, [r7, #14]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	3304      	adds	r3, #4
 80021ec:	2104      	movs	r1, #4
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff24 	bl	800203c <sequence_step_enabled>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <VL53L0X_GetSequenceStepEnables+0xf8>)
 80021fa:	681c      	ldr	r4, [r3, #0]
 80021fc:	f004 fed4 	bl	8006fa8 <HAL_GetTick>
 8002200:	4603      	mov	r3, r0
 8002202:	461a      	mov	r2, r3
 8002204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <VL53L0X_GetSequenceStepEnables+0xfc>)
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	9200      	str	r2, [sp, #0]
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <VL53L0X_GetSequenceStepEnables+0x104>)
 8002212:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002216:	4621      	mov	r1, r4
 8002218:	2001      	movs	r0, #1
 800221a:	f004 fe2d 	bl	8006e78 <trace_print_module_function>
	return Status;
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bd90      	pop	{r4, r7, pc}
 800222a:	bf00      	nop
 800222c:	200002cc 	.word	0x200002cc
 8002230:	0800d3a0 	.word	0x0800d3a0
 8002234:	0800ceb0 	.word	0x0800ceb0
 8002238:	0800cec4 	.word	0x0800cec4

0800223c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af04      	add	r7, sp, #16
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");
 800224a:	4b28      	ldr	r3, [pc, #160]	; (80022ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb0>)
 800224c:	681c      	ldr	r4, [r3, #0]
 800224e:	f004 feab 	bl	8006fa8 <HAL_GetTick>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb4>)
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	9200      	str	r2, [sp, #0]
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb8>)
 800225e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002262:	4621      	mov	r1, r4
 8002264:	2001      	movs	r0, #1
 8002266:	f004 fe07 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	461a      	mov	r2, r3
 8002270:	21f8      	movs	r1, #248	; 0xf8
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe ff1c 	bl	80010b0 <VL53L0X_RdWord>
 8002278:	4603      	mov	r3, r0
 800227a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800227c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d108      	bne.n	8002296 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5a>
		Status = VL53L0X_RdDWord(Dev,
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	461a      	mov	r2, r3
 800228a:	2104      	movs	r1, #4
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7fe ff47 	bl	8001120 <VL53L0X_RdDWord>
 8002292:	4603      	mov	r3, r0
 8002294:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7c>
		if (osc_calibrate_val != 0) {
 800229e:	89bb      	ldrh	r3, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x74>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	89ba      	ldrh	r2, [r7, #12]
 80022a8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb0>)
 80022ba:	681c      	ldr	r4, [r3, #0]
 80022bc:	f004 fe74 	bl	8006fa8 <HAL_GetTick>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb4>)
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	9200      	str	r2, [sp, #0]
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xbc>)
 80022d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80022d6:	4621      	mov	r1, r4
 80022d8:	2001      	movs	r0, #1
 80022da:	f004 fdcd 	bl	8006e78 <trace_print_module_function>
	return Status;
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd90      	pop	{r4, r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200002cc 	.word	0x200002cc
 80022f0:	0800d474 	.word	0x0800d474
 80022f4:	0800ceb0 	.word	0x0800ceb0
 80022f8:	0800cec4 	.word	0x0800cec4

080022fc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af04      	add	r7, sp, #16
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <VL53L0X_GetXTalkCompensationEnable+0x6c>)
 800230c:	681c      	ldr	r4, [r3, #0]
 800230e:	f004 fe4b 	bl	8006fa8 <HAL_GetTick>
 8002312:	4603      	mov	r3, r0
 8002314:	461a      	mov	r2, r3
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <VL53L0X_GetXTalkCompensationEnable+0x70>)
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	9200      	str	r2, [sp, #0]
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <VL53L0X_GetXTalkCompensationEnable+0x74>)
 800231e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002322:	4621      	mov	r1, r4
 8002324:	2001      	movs	r0, #1
 8002326:	f004 fda7 	bl	8006e78 <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7f1b      	ldrb	r3, [r3, #28]
 800232e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	7bba      	ldrb	r2, [r7, #14]
 8002334:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <VL53L0X_GetXTalkCompensationEnable+0x6c>)
 8002338:	681c      	ldr	r4, [r3, #0]
 800233a:	f004 fe35 	bl	8006fa8 <HAL_GetTick>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002346:	9302      	str	r3, [sp, #8]
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <VL53L0X_GetXTalkCompensationEnable+0x70>)
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	9200      	str	r2, [sp, #0]
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <VL53L0X_GetXTalkCompensationEnable+0x78>)
 8002350:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002354:	4621      	mov	r1, r4
 8002356:	2001      	movs	r0, #1
 8002358:	f004 fd8e 	bl	8006e78 <trace_print_module_function>
	return Status;
 800235c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	bd90      	pop	{r4, r7, pc}
 8002368:	200002cc 	.word	0x200002cc
 800236c:	0800d4c8 	.word	0x0800d4c8
 8002370:	0800ceb0 	.word	0x0800ceb0
 8002374:	0800cec4 	.word	0x0800cec4

08002378 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b08b      	sub	sp, #44	; 0x2c
 800237c:	af04      	add	r7, sp, #16
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002382:	2300      	movs	r3, #0
 8002384:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");
 8002386:	4b27      	ldr	r3, [pc, #156]	; (8002424 <VL53L0X_GetXTalkCompensationRateMegaCps+0xac>)
 8002388:	681c      	ldr	r4, [r3, #0]
 800238a:	f004 fe0d 	bl	8006fa8 <HAL_GetTick>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb0>)
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	9200      	str	r2, [sp, #0]
 8002398:	4b24      	ldr	r3, [pc, #144]	; (800242c <VL53L0X_GetXTalkCompensationRateMegaCps+0xb4>)
 800239a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800239e:	4621      	mov	r1, r4
 80023a0:	2001      	movs	r0, #1
 80023a2:	f004 fd69 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_RdWord(Dev,
 80023a6:	f107 030e 	add.w	r3, r7, #14
 80023aa:	461a      	mov	r2, r3
 80023ac:	2120      	movs	r1, #32
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7fe fe7e 	bl	80010b0 <VL53L0X_RdWord>
 80023b4:	4603      	mov	r3, r0
 80023b6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80023b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d118      	bne.n	80023f2 <VL53L0X_GetXTalkCompensationRateMegaCps+0x7a>
		if (Value == 0) {
 80023c0:	89fb      	ldrh	r3, [r7, #14]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <VL53L0X_GetXTalkCompensationRateMegaCps+0x62>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
 80023d8:	e00b      	b.n	80023f2 <VL53L0X_GetXTalkCompensationRateMegaCps+0x7a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80023da:	89fb      	ldrh	r3, [r7, #14]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <VL53L0X_GetXTalkCompensationRateMegaCps+0xac>)
 80023f4:	681c      	ldr	r4, [r3, #0]
 80023f6:	f004 fdd7 	bl	8006fa8 <HAL_GetTick>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002402:	9302      	str	r3, [sp, #8]
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb0>)
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	9200      	str	r2, [sp, #0]
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb8>)
 800240c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002410:	4621      	mov	r1, r4
 8002412:	2001      	movs	r0, #1
 8002414:	f004 fd30 	bl	8006e78 <trace_print_module_function>
	return Status;
 8002418:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800241c:	4618      	mov	r0, r3
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	bd90      	pop	{r4, r7, pc}
 8002424:	200002cc 	.word	0x200002cc
 8002428:	0800d514 	.word	0x0800d514
 800242c:	0800ceb0 	.word	0x0800ceb0
 8002430:	0800cec4 	.word	0x0800cec4

08002434 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b08b      	sub	sp, #44	; 0x2c
 8002438:	af04      	add	r7, sp, #16
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	807b      	strh	r3, [r7, #2]
 8002440:	4613      	mov	r3, r2
 8002442:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002444:	2300      	movs	r3, #0
 8002446:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 8002454:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <VL53L0X_SetLimitCheckEnable+0x160>)
 8002456:	681c      	ldr	r4, [r3, #0]
 8002458:	f004 fda6 	bl	8006fa8 <HAL_GetTick>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	4b4d      	ldr	r3, [pc, #308]	; (8002598 <VL53L0X_SetLimitCheckEnable+0x164>)
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	9200      	str	r2, [sp, #0]
 8002466:	4b4d      	ldr	r3, [pc, #308]	; (800259c <VL53L0X_SetLimitCheckEnable+0x168>)
 8002468:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800246c:	4621      	mov	r1, r4
 800246e:	2001      	movs	r0, #1
 8002470:	f004 fd02 	bl	8006e78 <trace_print_module_function>

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002474:	887b      	ldrh	r3, [r7, #2]
 8002476:	2b05      	cmp	r3, #5
 8002478:	d902      	bls.n	8002480 <VL53L0X_SetLimitCheckEnable+0x4c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800247a:	23fc      	movs	r3, #252	; 0xfc
 800247c:	75fb      	strb	r3, [r7, #23]
 800247e:	e05b      	b.n	8002538 <VL53L0X_SetLimitCheckEnable+0x104>
	} else {
		if (LimitCheckEnable == 0) {
 8002480:	787b      	ldrb	r3, [r7, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <VL53L0X_SetLimitCheckEnable+0x60>
			TempFix1616 = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800248e:	2301      	movs	r3, #1
 8002490:	73bb      	strb	r3, [r7, #14]
 8002492:	e00a      	b.n	80024aa <VL53L0X_SetLimitCheckEnable+0x76>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	330c      	adds	r3, #12
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d841      	bhi.n	8002534 <VL53L0X_SetLimitCheckEnable+0x100>
 80024b0:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <VL53L0X_SetLimitCheckEnable+0x84>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024d1 	.word	0x080024d1
 80024bc:	080024db 	.word	0x080024db
 80024c0:	080024f1 	.word	0x080024f1
 80024c4:	080024fb 	.word	0x080024fb
 80024c8:	08002505 	.word	0x08002505
 80024cc:	0800251d 	.word	0x0800251d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80024d8:	e02e      	b.n	8002538 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	2144      	movs	r1, #68	; 0x44
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7fe fd5b 	bl	8000fa0 <VL53L0X_WrWord>
 80024ea:	4603      	mov	r3, r0
 80024ec:	75fb      	strb	r3, [r7, #23]

			break;
 80024ee:	e023      	b.n	8002538 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80024f8:	e01e      	b.n	8002538 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8002502:	e019      	b.n	8002538 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8002504:	7bbb      	ldrb	r3, [r7, #14]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800250a:	7b7b      	ldrb	r3, [r7, #13]
 800250c:	22fe      	movs	r2, #254	; 0xfe
 800250e:	2160      	movs	r1, #96	; 0x60
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7fe fd6f 	bl	8000ff4 <VL53L0X_UpdateByte>
 8002516:	4603      	mov	r3, r0
 8002518:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800251a:	e00d      	b.n	8002538 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800251c:	7bbb      	ldrb	r3, [r7, #14]
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002522:	7b7b      	ldrb	r3, [r7, #13]
 8002524:	22ef      	movs	r2, #239	; 0xef
 8002526:	2160      	movs	r1, #96	; 0x60
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7fe fd63 	bl	8000ff4 <VL53L0X_UpdateByte>
 800252e:	4603      	mov	r3, r0
 8002530:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8002532:	e001      	b.n	8002538 <VL53L0X_SetLimitCheckEnable+0x104>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002534:	23fc      	movs	r3, #252	; 0xfc
 8002536:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10f      	bne.n	8002560 <VL53L0X_SetLimitCheckEnable+0x12c>
		if (LimitCheckEnable == 0) {
 8002540:	787b      	ldrb	r3, [r7, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <VL53L0X_SetLimitCheckEnable+0x120>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002552:	e005      	b.n	8002560 <VL53L0X_SetLimitCheckEnable+0x12c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <VL53L0X_SetLimitCheckEnable+0x160>)
 8002562:	681c      	ldr	r4, [r3, #0]
 8002564:	f004 fd20 	bl	8006fa8 <HAL_GetTick>
 8002568:	4603      	mov	r3, r0
 800256a:	461a      	mov	r2, r3
 800256c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002570:	9302      	str	r3, [sp, #8]
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <VL53L0X_SetLimitCheckEnable+0x164>)
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	9200      	str	r2, [sp, #0]
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <VL53L0X_SetLimitCheckEnable+0x16c>)
 800257a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800257e:	4621      	mov	r1, r4
 8002580:	2001      	movs	r0, #1
 8002582:	f004 fc79 	bl	8006e78 <trace_print_module_function>
	return Status;
 8002586:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800258a:	4618      	mov	r0, r3
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}
 8002592:	bf00      	nop
 8002594:	200002cc 	.word	0x200002cc
 8002598:	0800d5cc 	.word	0x0800d5cc
 800259c:	0800ceb0 	.word	0x0800ceb0
 80025a0:	0800cec4 	.word	0x0800cec4

080025a4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b08b      	sub	sp, #44	; 0x2c
 80025a8:	af04      	add	r7, sp, #16
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	460b      	mov	r3, r1
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <VL53L0X_GetLimitCheckEnable+0x88>)
 80025b8:	681c      	ldr	r4, [r3, #0]
 80025ba:	f004 fcf5 	bl	8006fa8 <HAL_GetTick>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <VL53L0X_GetLimitCheckEnable+0x8c>)
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	9200      	str	r2, [sp, #0]
 80025c8:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <VL53L0X_GetLimitCheckEnable+0x90>)
 80025ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80025ce:	4621      	mov	r1, r4
 80025d0:	2001      	movs	r0, #1
 80025d2:	f004 fc51 	bl	8006e78 <trace_print_module_function>

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80025d6:	897b      	ldrh	r3, [r7, #10]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d905      	bls.n	80025e8 <VL53L0X_GetLimitCheckEnable+0x44>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80025dc:	23fc      	movs	r3, #252	; 0xfc
 80025de:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e008      	b.n	80025fa <VL53L0X_GetLimitCheckEnable+0x56>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80025e8:	897b      	ldrh	r3, [r7, #10]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4413      	add	r3, r2
 80025ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025f2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7dba      	ldrb	r2, [r7, #22]
 80025f8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <VL53L0X_GetLimitCheckEnable+0x88>)
 80025fc:	681c      	ldr	r4, [r3, #0]
 80025fe:	f004 fcd3 	bl	8006fa8 <HAL_GetTick>
 8002602:	4603      	mov	r3, r0
 8002604:	461a      	mov	r2, r3
 8002606:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800260a:	9302      	str	r3, [sp, #8]
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <VL53L0X_GetLimitCheckEnable+0x8c>)
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	9200      	str	r2, [sp, #0]
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <VL53L0X_GetLimitCheckEnable+0x94>)
 8002614:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002618:	4621      	mov	r1, r4
 800261a:	2001      	movs	r0, #1
 800261c:	f004 fc2c 	bl	8006e78 <trace_print_module_function>
	return Status;
 8002620:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002624:	4618      	mov	r0, r3
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}
 800262c:	200002cc 	.word	0x200002cc
 8002630:	0800d5e8 	.word	0x0800d5e8
 8002634:	0800ceb0 	.word	0x0800ceb0
 8002638:	0800cec4 	.word	0x0800cec4

0800263c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b08b      	sub	sp, #44	; 0x2c
 8002640:	af04      	add	r7, sp, #16
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	460b      	mov	r3, r1
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <VL53L0X_SetLimitCheckValue+0x108>)
 8002650:	681c      	ldr	r4, [r3, #0]
 8002652:	f004 fca9 	bl	8006fa8 <HAL_GetTick>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <VL53L0X_SetLimitCheckValue+0x10c>)
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	9200      	str	r2, [sp, #0]
 8002660:	4b3a      	ldr	r3, [pc, #232]	; (800274c <VL53L0X_SetLimitCheckValue+0x110>)
 8002662:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002666:	4621      	mov	r1, r4
 8002668:	2001      	movs	r0, #1
 800266a:	f004 fc05 	bl	8006e78 <trace_print_module_function>

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002678:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800267a:	7dbb      	ldrb	r3, [r7, #22]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <VL53L0X_SetLimitCheckValue+0x54>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002680:	897b      	ldrh	r3, [r7, #10]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	330c      	adds	r3, #12
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e040      	b.n	8002712 <VL53L0X_SetLimitCheckValue+0xd6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8002690:	897b      	ldrh	r3, [r7, #10]
 8002692:	2b05      	cmp	r3, #5
 8002694:	d830      	bhi.n	80026f8 <VL53L0X_SetLimitCheckValue+0xbc>
 8002696:	a201      	add	r2, pc, #4	; (adr r2, 800269c <VL53L0X_SetLimitCheckValue+0x60>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	080026b5 	.word	0x080026b5
 80026a0:	080026bd 	.word	0x080026bd
 80026a4:	080026d3 	.word	0x080026d3
 80026a8:	080026db 	.word	0x080026db
 80026ac:	080026e3 	.word	0x080026e3
 80026b0:	080026e3 	.word	0x080026e3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80026ba:	e01f      	b.n	80026fc <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	2144      	movs	r1, #68	; 0x44
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f7fe fc6a 	bl	8000fa0 <VL53L0X_WrWord>
 80026cc:	4603      	mov	r3, r0
 80026ce:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80026d0:	e014      	b.n	80026fc <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80026d8:	e010      	b.n	80026fc <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80026e0:	e00c      	b.n	80026fc <VL53L0X_SetLimitCheckValue+0xc0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	2164      	movs	r1, #100	; 0x64
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7fe fc57 	bl	8000fa0 <VL53L0X_WrWord>
 80026f2:	4603      	mov	r3, r0
 80026f4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80026f6:	e001      	b.n	80026fc <VL53L0X_SetLimitCheckValue+0xc0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80026f8:	23fc      	movs	r3, #252	; 0xfc
 80026fa:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80026fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <VL53L0X_SetLimitCheckValue+0xd6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002704:	897b      	ldrh	r3, [r7, #10]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	330c      	adds	r3, #12
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <VL53L0X_SetLimitCheckValue+0x108>)
 8002714:	681c      	ldr	r4, [r3, #0]
 8002716:	f004 fc47 	bl	8006fa8 <HAL_GetTick>
 800271a:	4603      	mov	r3, r0
 800271c:	461a      	mov	r2, r3
 800271e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <VL53L0X_SetLimitCheckValue+0x10c>)
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	9200      	str	r2, [sp, #0]
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <VL53L0X_SetLimitCheckValue+0x114>)
 800272c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002730:	4621      	mov	r1, r4
 8002732:	2001      	movs	r0, #1
 8002734:	f004 fba0 	bl	8006e78 <trace_print_module_function>
	return Status;
 8002738:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800273c:	4618      	mov	r0, r3
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd90      	pop	{r4, r7, pc}
 8002744:	200002cc 	.word	0x200002cc
 8002748:	0800d604 	.word	0x0800d604
 800274c:	0800ceb0 	.word	0x0800ceb0
 8002750:	0800cec4 	.word	0x0800cec4

08002754 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b08d      	sub	sp, #52	; 0x34
 8002758:	af04      	add	r7, sp, #16
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	460b      	mov	r3, r1
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002762:	2300      	movs	r3, #0
 8002764:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");
 800276a:	4b52      	ldr	r3, [pc, #328]	; (80028b4 <VL53L0X_GetLimitCheckValue+0x160>)
 800276c:	681c      	ldr	r4, [r3, #0]
 800276e:	f004 fc1b 	bl	8006fa8 <HAL_GetTick>
 8002772:	4603      	mov	r3, r0
 8002774:	461a      	mov	r2, r3
 8002776:	4b50      	ldr	r3, [pc, #320]	; (80028b8 <VL53L0X_GetLimitCheckValue+0x164>)
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	9200      	str	r2, [sp, #0]
 800277c:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <VL53L0X_GetLimitCheckValue+0x168>)
 800277e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002782:	4621      	mov	r1, r4
 8002784:	2001      	movs	r0, #1
 8002786:	f004 fb77 	bl	8006e78 <trace_print_module_function>

	switch (LimitCheckId) {
 800278a:	897b      	ldrh	r3, [r7, #10]
 800278c:	2b05      	cmp	r3, #5
 800278e:	d847      	bhi.n	8002820 <VL53L0X_GetLimitCheckValue+0xcc>
 8002790:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <VL53L0X_GetLimitCheckValue+0x44>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027b1 	.word	0x080027b1
 800279c:	080027bd 	.word	0x080027bd
 80027a0:	080027e3 	.word	0x080027e3
 80027a4:	080027ef 	.word	0x080027ef
 80027a8:	080027fb 	.word	0x080027fb
 80027ac:	080027fb 	.word	0x080027fb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	77bb      	strb	r3, [r7, #30]
		break;
 80027ba:	e033      	b.n	8002824 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80027bc:	f107 0316 	add.w	r3, r7, #22
 80027c0:	461a      	mov	r2, r3
 80027c2:	2144      	movs	r1, #68	; 0x44
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7fe fc73 	bl	80010b0 <VL53L0X_RdWord>
 80027ca:	4603      	mov	r3, r0
 80027cc:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80027ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <VL53L0X_GetLimitCheckValue+0x88>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80027d6:	8afb      	ldrh	r3, [r7, #22]
 80027d8:	025b      	lsls	r3, r3, #9
 80027da:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80027dc:	2301      	movs	r3, #1
 80027de:	77bb      	strb	r3, [r7, #30]
		break;
 80027e0:	e020      	b.n	8002824 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	77bb      	strb	r3, [r7, #30]
		break;
 80027ec:	e01a      	b.n	8002824 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	77bb      	strb	r3, [r7, #30]
		break;
 80027f8:	e014      	b.n	8002824 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80027fa:	f107 0316 	add.w	r3, r7, #22
 80027fe:	461a      	mov	r2, r3
 8002800:	2164      	movs	r1, #100	; 0x64
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f7fe fc54 	bl	80010b0 <VL53L0X_RdWord>
 8002808:	4603      	mov	r3, r0
 800280a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800280c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <VL53L0X_GetLimitCheckValue+0xc6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002814:	8afb      	ldrh	r3, [r7, #22]
 8002816:	025b      	lsls	r3, r3, #9
 8002818:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	77bb      	strb	r3, [r7, #30]
		break;
 800281e:	e001      	b.n	8002824 <VL53L0X_GetLimitCheckValue+0xd0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002820:	23fc      	movs	r3, #252	; 0xfc
 8002822:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002824:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d12a      	bne.n	8002882 <VL53L0X_GetLimitCheckValue+0x12e>

		if (EnableZeroValue == 1) {
 800282c:	7fbb      	ldrb	r3, [r7, #30]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d124      	bne.n	800287c <VL53L0X_GetLimitCheckValue+0x128>

			if (TempFix1616 == 0) {
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d110      	bne.n	800285a <VL53L0X_GetLimitCheckValue+0x106>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8002838:	897b      	ldrh	r3, [r7, #10]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	330c      	adds	r3, #12
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800284c:	897b      	ldrh	r3, [r7, #10]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4413      	add	r3, r2
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002858:	e013      	b.n	8002882 <VL53L0X_GetLimitCheckValue+0x12e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002860:	897b      	ldrh	r3, [r7, #10]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	330c      	adds	r3, #12
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800286e:	897b      	ldrh	r3, [r7, #10]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800287a:	e002      	b.n	8002882 <VL53L0X_GetLimitCheckValue+0x12e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <VL53L0X_GetLimitCheckValue+0x160>)
 8002884:	681c      	ldr	r4, [r3, #0]
 8002886:	f004 fb8f 	bl	8006fa8 <HAL_GetTick>
 800288a:	4603      	mov	r3, r0
 800288c:	461a      	mov	r2, r3
 800288e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002892:	9302      	str	r3, [sp, #8]
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <VL53L0X_GetLimitCheckValue+0x164>)
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	9200      	str	r2, [sp, #0]
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <VL53L0X_GetLimitCheckValue+0x16c>)
 800289c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80028a0:	4621      	mov	r1, r4
 80028a2:	2001      	movs	r0, #1
 80028a4:	f004 fae8 	bl	8006e78 <trace_print_module_function>
	return Status;
 80028a8:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3724      	adds	r7, #36	; 0x24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	200002cc 	.word	0x200002cc
 80028b8:	0800d620 	.word	0x0800d620
 80028bc:	0800ceb0 	.word	0x0800ceb0
 80028c0:	0800cec4 	.word	0x0800cec4

080028c4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b089      	sub	sp, #36	; 0x24
 80028c8:	af04      	add	r7, sp, #16
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");
 80028d2:	4b27      	ldr	r3, [pc, #156]	; (8002970 <VL53L0X_GetWrapAroundCheckEnable+0xac>)
 80028d4:	681c      	ldr	r4, [r3, #0]
 80028d6:	f004 fb67 	bl	8006fa8 <HAL_GetTick>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	4b25      	ldr	r3, [pc, #148]	; (8002974 <VL53L0X_GetWrapAroundCheckEnable+0xb0>)
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	9200      	str	r2, [sp, #0]
 80028e4:	4b24      	ldr	r3, [pc, #144]	; (8002978 <VL53L0X_GetWrapAroundCheckEnable+0xb4>)
 80028e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80028ea:	4621      	mov	r1, r4
 80028ec:	2001      	movs	r0, #1
 80028ee:	f004 fac3 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80028f2:	f107 030e 	add.w	r3, r7, #14
 80028f6:	461a      	mov	r2, r3
 80028f8:	2101      	movs	r1, #1
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe fbae 	bl	800105c <VL53L0X_RdByte>
 8002900:	4603      	mov	r3, r0
 8002902:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8002904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10e      	bne.n	800292a <VL53L0X_GetWrapAroundCheckEnable+0x66>
		PALDevDataSet(Dev, SequenceConfig, data);
 800290c:	7bba      	ldrb	r2, [r7, #14]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8002914:	7bbb      	ldrb	r3, [r7, #14]
 8002916:	b25b      	sxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	da03      	bge.n	8002924 <VL53L0X_GetWrapAroundCheckEnable+0x60>
			*pWrapAroundCheckEnable = 0x01;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e002      	b.n	800292a <VL53L0X_GetWrapAroundCheckEnable+0x66>
		else
			*pWrapAroundCheckEnable = 0x00;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800292a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d104      	bne.n	800293c <VL53L0X_GetWrapAroundCheckEnable+0x78>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <VL53L0X_GetWrapAroundCheckEnable+0xac>)
 800293e:	681c      	ldr	r4, [r3, #0]
 8002940:	f004 fb32 	bl	8006fa8 <HAL_GetTick>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294c:	9302      	str	r3, [sp, #8]
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <VL53L0X_GetWrapAroundCheckEnable+0xb0>)
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	9200      	str	r2, [sp, #0]
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <VL53L0X_GetWrapAroundCheckEnable+0xb8>)
 8002956:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800295a:	4621      	mov	r1, r4
 800295c:	2001      	movs	r0, #1
 800295e:	f004 fa8b 	bl	8006e78 <trace_print_module_function>
	return Status;
 8002962:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	bf00      	nop
 8002970:	200002cc 	.word	0x200002cc
 8002974:	0800d680 	.word	0x0800d680
 8002978:	0800ceb0 	.word	0x0800ceb0
 800297c:	0800cec4 	.word	0x0800cec4

08002980 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af04      	add	r7, sp, #16
 8002986:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <VL53L0X_PerformSingleMeasurement+0xb0>)
 800298e:	681c      	ldr	r4, [r3, #0]
 8002990:	f004 fb0a 	bl	8006fa8 <HAL_GetTick>
 8002994:	4603      	mov	r3, r0
 8002996:	461a      	mov	r2, r3
 8002998:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <VL53L0X_PerformSingleMeasurement+0xb4>)
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	9200      	str	r2, [sp, #0]
 800299e:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <VL53L0X_PerformSingleMeasurement+0xb8>)
 80029a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80029a4:	4621      	mov	r1, r4
 80029a6:	2001      	movs	r0, #1
 80029a8:	f004 fa66 	bl	8006e78 <trace_print_module_function>

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80029ac:	f107 030e 	add.w	r3, r7, #14
 80029b0:	4619      	mov	r1, r3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff f8ec 	bl	8001b90 <VL53L0X_GetDeviceMode>
 80029b8:	4603      	mov	r3, r0
 80029ba:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80029bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d107      	bne.n	80029d4 <VL53L0X_PerformSingleMeasurement+0x54>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80029c4:	7bbb      	ldrb	r3, [r7, #14]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d104      	bne.n	80029d4 <VL53L0X_PerformSingleMeasurement+0x54>
		Status = VL53L0X_StartMeasurement(Dev);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f8e0 	bl	8002b90 <VL53L0X_StartMeasurement>
 80029d0:	4603      	mov	r3, r0
 80029d2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80029d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d104      	bne.n	80029e6 <VL53L0X_PerformSingleMeasurement+0x66>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f001 fd0f 	bl	8004400 <VL53L0X_measurement_poll_for_completion>
 80029e2:	4603      	mov	r3, r0
 80029e4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <VL53L0X_PerformSingleMeasurement+0x7c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80029ee:	7bbb      	ldrb	r3, [r7, #14]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <VL53L0X_PerformSingleMeasurement+0x7c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2203      	movs	r2, #3
 80029f8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <VL53L0X_PerformSingleMeasurement+0xb0>)
 80029fe:	681c      	ldr	r4, [r3, #0]
 8002a00:	f004 fad2 	bl	8006fa8 <HAL_GetTick>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461a      	mov	r2, r3
 8002a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0c:	9302      	str	r3, [sp, #8]
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <VL53L0X_PerformSingleMeasurement+0xb4>)
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	9200      	str	r2, [sp, #0]
 8002a14:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <VL53L0X_PerformSingleMeasurement+0xbc>)
 8002a16:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f004 fa2b 	bl	8006e78 <trace_print_module_function>
	return Status;
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd90      	pop	{r4, r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	200002cc 	.word	0x200002cc
 8002a34:	0800d6e4 	.word	0x0800d6e4
 8002a38:	0800ceb0 	.word	0x0800ceb0
 8002a3c:	0800cec4 	.word	0x0800cec4

08002a40 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b08b      	sub	sp, #44	; 0x2c
 8002a44:	af04      	add	r7, sp, #16
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <VL53L0X_PerformRefCalibration+0x74>)
 8002a52:	681c      	ldr	r4, [r3, #0]
 8002a54:	f004 faa8 	bl	8006fa8 <HAL_GetTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <VL53L0X_PerformRefCalibration+0x78>)
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	9200      	str	r2, [sp, #0]
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <VL53L0X_PerformRefCalibration+0x7c>)
 8002a64:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002a68:	4621      	mov	r1, r4
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f004 fa04 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8002a70:	2301      	movs	r3, #1
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f001 fc84 	bl	8004384 <VL53L0X_perform_ref_calibration>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <VL53L0X_PerformRefCalibration+0x74>)
 8002a82:	681c      	ldr	r4, [r3, #0]
 8002a84:	f004 fa90 	bl	8006fa8 <HAL_GetTick>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a90:	9302      	str	r3, [sp, #8]
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <VL53L0X_PerformRefCalibration+0x78>)
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	9200      	str	r2, [sp, #0]
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <VL53L0X_PerformRefCalibration+0x80>)
 8002a9a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f004 f9e9 	bl	8006e78 <trace_print_module_function>
	return Status;
 8002aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd90      	pop	{r4, r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200002cc 	.word	0x200002cc
 8002ab8:	0800d734 	.word	0x0800d734
 8002abc:	0800ceb0 	.word	0x0800ceb0
 8002ac0:	0800cec4 	.word	0x0800cec4

08002ac4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8002ada:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8002adc:	7dbb      	ldrb	r3, [r7, #22]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d005      	beq.n	8002aee <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8002ae2:	7dbb      	ldrb	r3, [r7, #22]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d002      	beq.n	8002aee <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8002ae8:	7dbb      	ldrb	r3, [r7, #22]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d147      	bne.n	8002b7e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002aee:	f107 030c 	add.w	r3, r7, #12
 8002af2:	f107 0210 	add.w	r2, r7, #16
 8002af6:	2101      	movs	r1, #1
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fc9d 	bl	8003438 <VL53L0X_GetInterruptThresholds>
 8002afe:	4603      	mov	r3, r0
 8002b00:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002b08:	d803      	bhi.n	8002b12 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8002b0a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8002b0c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002b10:	d935      	bls.n	8002b7e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8002b12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d131      	bne.n	8002b7e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8002b20:	491a      	ldr	r1, [pc, #104]	; (8002b8c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f003 fa1e 	bl	8005f64 <VL53L0X_load_tuning_settings>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	75fb      	strb	r3, [r7, #23]
 8002b2c:	e027      	b.n	8002b7e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002b2e:	2204      	movs	r2, #4
 8002b30:	21ff      	movs	r1, #255	; 0xff
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe fa10 	bl	8000f58 <VL53L0X_WrByte>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2170      	movs	r1, #112	; 0x70
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fa06 	bl	8000f58 <VL53L0X_WrByte>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002b56:	2200      	movs	r2, #0
 8002b58:	21ff      	movs	r1, #255	; 0xff
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe f9fc 	bl	8000f58 <VL53L0X_WrByte>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461a      	mov	r2, r3
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2180      	movs	r1, #128	; 0x80
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fe f9f2 	bl	8000f58 <VL53L0X_WrByte>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461a      	mov	r2, r3
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8002b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000104 	.word	0x20000104

08002b90 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b08b      	sub	sp, #44	; 0x2c
 8002b94:	af04      	add	r7, sp, #16
 8002b96:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");
 8002ba0:	4b6c      	ldr	r3, [pc, #432]	; (8002d54 <VL53L0X_StartMeasurement+0x1c4>)
 8002ba2:	681c      	ldr	r4, [r3, #0]
 8002ba4:	f004 fa00 	bl	8006fa8 <HAL_GetTick>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461a      	mov	r2, r3
 8002bac:	4b6a      	ldr	r3, [pc, #424]	; (8002d58 <VL53L0X_StartMeasurement+0x1c8>)
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	9200      	str	r2, [sp, #0]
 8002bb2:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <VL53L0X_StartMeasurement+0x1cc>)
 8002bb4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002bb8:	4621      	mov	r1, r4
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f004 f95c 	bl	8006e78 <trace_print_module_function>

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002bc0:	f107 030e 	add.w	r3, r7, #14
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe ffe2 	bl	8001b90 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7fe f9c1 	bl	8000f58 <VL53L0X_WrByte>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002bda:	2201      	movs	r2, #1
 8002bdc:	21ff      	movs	r1, #255	; 0xff
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe f9ba 	bl	8000f58 <VL53L0X_WrByte>
 8002be4:	4603      	mov	r3, r0
 8002be6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2100      	movs	r1, #0
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7fe f9b3 	bl	8000f58 <VL53L0X_WrByte>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2191      	movs	r1, #145	; 0x91
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7fe f9a9 	bl	8000f58 <VL53L0X_WrByte>
 8002c06:	4603      	mov	r3, r0
 8002c08:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe f9a2 	bl	8000f58 <VL53L0X_WrByte>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	21ff      	movs	r1, #255	; 0xff
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7fe f99b 	bl	8000f58 <VL53L0X_WrByte>
 8002c22:	4603      	mov	r3, r0
 8002c24:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2180      	movs	r1, #128	; 0x80
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe f994 	bl	8000f58 <VL53L0X_WrByte>
 8002c30:	4603      	mov	r3, r0
 8002c32:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8002c34:	7bbb      	ldrb	r3, [r7, #14]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d037      	beq.n	8002caa <VL53L0X_StartMeasurement+0x11a>
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d04f      	beq.n	8002cde <VL53L0X_StartMeasurement+0x14e>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d167      	bne.n	8002d12 <VL53L0X_StartMeasurement+0x182>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8002c42:	2201      	movs	r2, #1
 8002c44:	2100      	movs	r1, #0
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe f986 	bl	8000f58 <VL53L0X_WrByte>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8002c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d15d      	bne.n	8002d18 <VL53L0X_StartMeasurement+0x188>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <VL53L0X_StartMeasurement+0xe8>
					Status = VL53L0X_RdByte(Dev,
 8002c66:	f107 030d 	add.w	r3, r7, #13
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe f9f4 	bl	800105c <VL53L0X_RdByte>
 8002c74:	4603      	mov	r3, r0
 8002c76:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8002c7e:	7b7a      	ldrb	r2, [r7, #13]
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	4013      	ands	r3, r2
 8002c84:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d107      	bne.n	8002c9c <VL53L0X_StartMeasurement+0x10c>
				&& (Status == VL53L0X_ERROR_NONE)
 8002c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <VL53L0X_StartMeasurement+0x10c>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c9a:	d3e1      	bcc.n	8002c60 <VL53L0X_StartMeasurement+0xd0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002ca2:	d339      	bcc.n	8002d18 <VL53L0X_StartMeasurement+0x188>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002ca4:	23f9      	movs	r3, #249	; 0xf9
 8002ca6:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8002ca8:	e036      	b.n	8002d18 <VL53L0X_StartMeasurement+0x188>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <VL53L0X_StartMeasurement+0x12e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff05 	bl	8002ac4 <VL53L0X_CheckAndLoadInterruptSettings>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe f948 	bl	8000f58 <VL53L0X_WrByte>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8002ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d123      	bne.n	8002d1c <VL53L0X_StartMeasurement+0x18c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002cdc:	e01e      	b.n	8002d1c <VL53L0X_StartMeasurement+0x18c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d105      	bne.n	8002cf2 <VL53L0X_StartMeasurement+0x162>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff feeb 	bl	8002ac4 <VL53L0X_CheckAndLoadInterruptSettings>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fe f92e 	bl	8000f58 <VL53L0X_WrByte>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8002d00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <VL53L0X_StartMeasurement+0x190>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002d10:	e006      	b.n	8002d20 <VL53L0X_StartMeasurement+0x190>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002d12:	23f8      	movs	r3, #248	; 0xf8
 8002d14:	75fb      	strb	r3, [r7, #23]
 8002d16:	e004      	b.n	8002d22 <VL53L0X_StartMeasurement+0x192>
		break;
 8002d18:	bf00      	nop
 8002d1a:	e002      	b.n	8002d22 <VL53L0X_StartMeasurement+0x192>
		break;
 8002d1c:	bf00      	nop
 8002d1e:	e000      	b.n	8002d22 <VL53L0X_StartMeasurement+0x192>
		break;
 8002d20:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
 8002d22:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <VL53L0X_StartMeasurement+0x1c4>)
 8002d24:	681c      	ldr	r4, [r3, #0]
 8002d26:	f004 f93f 	bl	8006fa8 <HAL_GetTick>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d32:	9302      	str	r3, [sp, #8]
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <VL53L0X_StartMeasurement+0x1c8>)
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	9200      	str	r2, [sp, #0]
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <VL53L0X_StartMeasurement+0x1d0>)
 8002d3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002d40:	4621      	mov	r1, r4
 8002d42:	2001      	movs	r0, #1
 8002d44:	f004 f898 	bl	8006e78 <trace_print_module_function>
	return Status;
 8002d48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd90      	pop	{r4, r7, pc}
 8002d54:	200002cc 	.word	0x200002cc
 8002d58:	0800d7b8 	.word	0x0800d7b8
 8002d5c:	0800ceb0 	.word	0x0800ceb0
 8002d60:	0800cec4 	.word	0x0800cec4

08002d64 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af04      	add	r7, sp, #16
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");
 8002d72:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <VL53L0X_GetMeasurementDataReady+0xc8>)
 8002d74:	681c      	ldr	r4, [r3, #0]
 8002d76:	f004 f917 	bl	8006fa8 <HAL_GetTick>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <VL53L0X_GetMeasurementDataReady+0xcc>)
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	9200      	str	r2, [sp, #0]
 8002d84:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <VL53L0X_GetMeasurementDataReady+0xd0>)
 8002d86:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f004 f873 	bl	8006e78 <trace_print_module_function>

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8002d98:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8002d9a:	7bbb      	ldrb	r3, [r7, #14]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d112      	bne.n	8002dc6 <VL53L0X_GetMeasurementDataReady+0x62>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8002da0:	f107 0308 	add.w	r3, r7, #8
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fc14 	bl	80035d4 <VL53L0X_GetInterruptMaskStatus>
 8002dac:	4603      	mov	r3, r0
 8002dae:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d103      	bne.n	8002dbe <VL53L0X_GetMeasurementDataReady+0x5a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e01c      	b.n	8002df8 <VL53L0X_GetMeasurementDataReady+0x94>
		else
			*pMeasurementDataReady = 0;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e018      	b.n	8002df8 <VL53L0X_GetMeasurementDataReady+0x94>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8002dc6:	f107 030d 	add.w	r3, r7, #13
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2114      	movs	r1, #20
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe f944 	bl	800105c <VL53L0X_RdByte>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8002dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <VL53L0X_GetMeasurementDataReady+0x94>
			if (SysRangeStatusRegister & 0x01)
 8002de0:	7b7b      	ldrb	r3, [r7, #13]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <VL53L0X_GetMeasurementDataReady+0x8e>
				*pMeasurementDataReady = 1;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e002      	b.n	8002df8 <VL53L0X_GetMeasurementDataReady+0x94>
			else
				*pMeasurementDataReady = 0;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <VL53L0X_GetMeasurementDataReady+0xc8>)
 8002dfa:	681c      	ldr	r4, [r3, #0]
 8002dfc:	f004 f8d4 	bl	8006fa8 <HAL_GetTick>
 8002e00:	4603      	mov	r3, r0
 8002e02:	461a      	mov	r2, r3
 8002e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e08:	9302      	str	r3, [sp, #8]
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <VL53L0X_GetMeasurementDataReady+0xcc>)
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	9200      	str	r2, [sp, #0]
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <VL53L0X_GetMeasurementDataReady+0xd4>)
 8002e12:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002e16:	4621      	mov	r1, r4
 8002e18:	2001      	movs	r0, #1
 8002e1a:	f004 f82d 	bl	8006e78 <trace_print_module_function>
	return Status;
 8002e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd90      	pop	{r4, r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200002cc 	.word	0x200002cc
 8002e30:	0800d7ec 	.word	0x0800d7ec
 8002e34:	0800ceb0 	.word	0x0800ceb0
 8002e38:	0800cec4 	.word	0x0800cec4

08002e3c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002e3c:	b5b0      	push	{r4, r5, r7, lr}
 8002e3e:	b098      	sub	sp, #96	; 0x60
 8002e40:	af04      	add	r7, sp, #16
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint16_t XtalkRangeMilliMeter;
	uint16_t LinearityCorrectiveGain;
	uint8_t localBuffer[12];
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");
 8002e4c:	4b9e      	ldr	r3, [pc, #632]	; (80030c8 <VL53L0X_GetRangingMeasurementData+0x28c>)
 8002e4e:	681c      	ldr	r4, [r3, #0]
 8002e50:	f004 f8aa 	bl	8006fa8 <HAL_GetTick>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b9c      	ldr	r3, [pc, #624]	; (80030cc <VL53L0X_GetRangingMeasurementData+0x290>)
 8002e5a:	9301      	str	r3, [sp, #4]
 8002e5c:	9200      	str	r2, [sp, #0]
 8002e5e:	4b9c      	ldr	r3, [pc, #624]	; (80030d0 <VL53L0X_GetRangingMeasurementData+0x294>)
 8002e60:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002e64:	4621      	mov	r1, r4
 8002e66:	2001      	movs	r0, #1
 8002e68:	f004 f806 	bl	8006e78 <trace_print_module_function>
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002e6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e70:	230c      	movs	r3, #12
 8002e72:	2114      	movs	r1, #20
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7fe f843 	bl	8000f00 <VL53L0X_ReadMulti>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8002e80:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 80d2 	bne.w	800302e <VL53L0X_GetRangingMeasurementData+0x1f2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8002e96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8002eb2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	025b      	lsls	r3, r3, #9
 8002ec8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ece:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8002ed0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8002ee6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002eea:	025b      	lsls	r3, r3, #9
 8002eec:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8002ef2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002f0e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8002f10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8002f1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8002f26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8002f2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f30:	d047      	beq.n	8002fc2 <VL53L0X_GetRangingMeasurementData+0x186>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8002f32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002f34:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002f40:	4a64      	ldr	r2, [pc, #400]	; (80030d4 <VL53L0X_GetRangingMeasurementData+0x298>)
 8002f42:	fb82 1203 	smull	r1, r2, r2, r3
 8002f46:	1192      	asrs	r2, r2, #6
 8002f48:	17db      	asrs	r3, r3, #31
 8002f4a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8002f4c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7f1b      	ldrb	r3, [r3, #28]
 8002f5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8002f5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d02d      	beq.n	8002fc2 <VL53L0X_GetRangingMeasurementData+0x186>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8002f66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f68:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	121b      	asrs	r3, r3, #8
 8002f72:	461a      	mov	r2, r3
				if ((SignalRate
 8002f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10d      	bne.n	8002f96 <VL53L0X_GetRangingMeasurementData+0x15a>
					<= 0) {
					if (RangeFractionalEnable)
 8002f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <VL53L0X_GetRangingMeasurementData+0x150>
						XtalkRangeMilliMeter = 8888;
 8002f82:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8002f86:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f8a:	e016      	b.n	8002fba <VL53L0X_GetRangingMeasurementData+0x17e>
					else
						XtalkRangeMilliMeter = 8888
 8002f8c:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8002f90:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f94:	e011      	b.n	8002fba <VL53L0X_GetRangingMeasurementData+0x17e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8002f96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f9c:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8002fa0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002fa2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8002faa:	121b      	asrs	r3, r3, #8
 8002fac:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8002fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb0:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8002fb6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8002fba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002fbe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8002fc2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00d      	beq.n	8002fe6 <VL53L0X_GetRangingMeasurementData+0x1aa>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8002fca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8002fd6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	019b      	lsls	r3, r3, #6
 8002fde:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	75da      	strb	r2, [r3, #23]
 8002fe4:	e006      	b.n	8002ff4 <VL53L0X_GetRangingMeasurementData+0x1b8>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002fec:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8002ff4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002ff8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8002ffc:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	4613      	mov	r3, r2
 8003008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f003 fd0a 	bl	8006a24 <VL53L0X_get_pal_range_status>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003018:	4313      	orrs	r3, r2
 800301a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800301e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <VL53L0X_GetRangingMeasurementData+0x1f2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8003026:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800302e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003032:	2b00      	cmp	r3, #0
 8003034:	d12f      	bne.n	8003096 <VL53L0X_GetRangingMeasurementData+0x25a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f107 040c 	add.w	r4, r7, #12
 800303c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8003040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003044:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003048:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8003050:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800305e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8003064:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800306a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8003070:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8003076:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800307c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003086:	f107 050c 	add.w	r5, r7, #12
 800308a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800308c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800308e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003092:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <VL53L0X_GetRangingMeasurementData+0x28c>)
 8003098:	681c      	ldr	r4, [r3, #0]
 800309a:	f003 ff85 	bl	8006fa8 <HAL_GetTick>
 800309e:	4603      	mov	r3, r0
 80030a0:	461a      	mov	r2, r3
 80030a2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80030a6:	9302      	str	r3, [sp, #8]
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <VL53L0X_GetRangingMeasurementData+0x290>)
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	9200      	str	r2, [sp, #0]
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <VL53L0X_GetRangingMeasurementData+0x29c>)
 80030b0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80030b4:	4621      	mov	r1, r4
 80030b6:	2001      	movs	r0, #1
 80030b8:	f003 fede 	bl	8006e78 <trace_print_module_function>
	return Status;
 80030bc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3750      	adds	r7, #80	; 0x50
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bdb0      	pop	{r4, r5, r7, pc}
 80030c8:	200002cc 	.word	0x200002cc
 80030cc:	0800d838 	.word	0x0800d838
 80030d0:	0800ceb0 	.word	0x0800ceb0
 80030d4:	10624dd3 	.word	0x10624dd3
 80030d8:	0800cec4 	.word	0x0800cec4

080030dc <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af04      	add	r7, sp, #16
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");
 80030ea:	4b26      	ldr	r3, [pc, #152]	; (8003184 <VL53L0X_PerformSingleRangingMeasurement+0xa8>)
 80030ec:	681c      	ldr	r4, [r3, #0]
 80030ee:	f003 ff5b 	bl	8006fa8 <HAL_GetTick>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b24      	ldr	r3, [pc, #144]	; (8003188 <VL53L0X_PerformSingleRangingMeasurement+0xac>)
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	9200      	str	r2, [sp, #0]
 80030fc:	4b23      	ldr	r3, [pc, #140]	; (800318c <VL53L0X_PerformSingleRangingMeasurement+0xb0>)
 80030fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003102:	4621      	mov	r1, r4
 8003104:	2001      	movs	r0, #1
 8003106:	f003 feb7 	bl	8006e78 <trace_print_module_function>

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800310a:	2100      	movs	r1, #0
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fe fccb 	bl	8001aa8 <VL53L0X_SetDeviceMode>
 8003112:	4603      	mov	r3, r0
 8003114:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d104      	bne.n	8003128 <VL53L0X_PerformSingleRangingMeasurement+0x4c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff fc2e 	bl	8002980 <VL53L0X_PerformSingleMeasurement>
 8003124:	4603      	mov	r3, r0
 8003126:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <VL53L0X_PerformSingleRangingMeasurement+0x60>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003130:	6839      	ldr	r1, [r7, #0]
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff fe82 	bl	8002e3c <VL53L0X_GetRangingMeasurementData>
 8003138:	4603      	mov	r3, r0
 800313a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800313c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <VL53L0X_PerformSingleRangingMeasurement+0x74>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003144:	2100      	movs	r1, #0
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f9d8 	bl	80034fc <VL53L0X_ClearInterruptMask>
 800314c:	4603      	mov	r3, r0
 800314e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <VL53L0X_PerformSingleRangingMeasurement+0xa8>)
 8003152:	681c      	ldr	r4, [r3, #0]
 8003154:	f003 ff28 	bl	8006fa8 <HAL_GetTick>
 8003158:	4603      	mov	r3, r0
 800315a:	461a      	mov	r2, r3
 800315c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003160:	9302      	str	r3, [sp, #8]
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <VL53L0X_PerformSingleRangingMeasurement+0xac>)
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	9200      	str	r2, [sp, #0]
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <VL53L0X_PerformSingleRangingMeasurement+0xb4>)
 800316a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800316e:	4621      	mov	r1, r4
 8003170:	2001      	movs	r0, #1
 8003172:	f003 fe81 	bl	8006e78 <trace_print_module_function>
	return Status;
 8003176:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bd90      	pop	{r4, r7, pc}
 8003182:	bf00      	nop
 8003184:	200002cc 	.word	0x200002cc
 8003188:	0800d8a0 	.word	0x0800d8a0
 800318c:	0800ceb0 	.word	0x0800ceb0
 8003190:	0800cec4 	.word	0x0800cec4

08003194 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af04      	add	r7, sp, #16
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	4608      	mov	r0, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	461a      	mov	r2, r3
 80031a2:	4603      	mov	r3, r0
 80031a4:	70fb      	strb	r3, [r7, #3]
 80031a6:	460b      	mov	r3, r1
 80031a8:	70bb      	strb	r3, [r7, #2]
 80031aa:	4613      	mov	r3, r2
 80031ac:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");
 80031b2:	4b9d      	ldr	r3, [pc, #628]	; (8003428 <VL53L0X_SetGpioConfig+0x294>)
 80031b4:	681c      	ldr	r4, [r3, #0]
 80031b6:	f003 fef7 	bl	8006fa8 <HAL_GetTick>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461a      	mov	r2, r3
 80031be:	4b9b      	ldr	r3, [pc, #620]	; (800342c <VL53L0X_SetGpioConfig+0x298>)
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	9200      	str	r2, [sp, #0]
 80031c4:	4b9a      	ldr	r3, [pc, #616]	; (8003430 <VL53L0X_SetGpioConfig+0x29c>)
 80031c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80031ca:	4621      	mov	r1, r4
 80031cc:	2001      	movs	r0, #1
 80031ce:	f003 fe53 	bl	8006e78 <trace_print_module_function>

	if (Pin != 0) {
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <VL53L0X_SetGpioConfig+0x4a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80031d8:	23f6      	movs	r3, #246	; 0xf6
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e10a      	b.n	80033f4 <VL53L0X_SetGpioConfig+0x260>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80031de:	78bb      	ldrb	r3, [r7, #2]
 80031e0:	2b14      	cmp	r3, #20
 80031e2:	d111      	bne.n	8003208 <VL53L0X_SetGpioConfig+0x74>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80031e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <VL53L0X_SetGpioConfig+0x5e>
			data = 0x10;
 80031ec:	2310      	movs	r3, #16
 80031ee:	73bb      	strb	r3, [r7, #14]
 80031f0:	e001      	b.n	80031f6 <VL53L0X_SetGpioConfig+0x62>
		else
			data = 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80031f6:	7bbb      	ldrb	r3, [r7, #14]
 80031f8:	461a      	mov	r2, r3
 80031fa:	2184      	movs	r1, #132	; 0x84
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7fd feab 	bl	8000f58 <VL53L0X_WrByte>
 8003202:	4603      	mov	r3, r0
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	e0f5      	b.n	80033f4 <VL53L0X_SetGpioConfig+0x260>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8003208:	78bb      	ldrb	r3, [r7, #2]
 800320a:	2b15      	cmp	r3, #21
 800320c:	f040 8097 	bne.w	800333e <VL53L0X_SetGpioConfig+0x1aa>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003210:	2201      	movs	r2, #1
 8003212:	21ff      	movs	r1, #255	; 0xff
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7fd fe9f 	bl	8000f58 <VL53L0X_WrByte>
 800321a:	4603      	mov	r3, r0
 800321c:	461a      	mov	r2, r3
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	4313      	orrs	r3, r2
 8003222:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003224:	2200      	movs	r2, #0
 8003226:	2100      	movs	r1, #0
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7fd fe95 	bl	8000f58 <VL53L0X_WrByte>
 800322e:	4603      	mov	r3, r0
 8003230:	461a      	mov	r2, r3
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	4313      	orrs	r3, r2
 8003236:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003238:	2200      	movs	r2, #0
 800323a:	21ff      	movs	r1, #255	; 0xff
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7fd fe8b 	bl	8000f58 <VL53L0X_WrByte>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	4313      	orrs	r3, r2
 800324a:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800324c:	2201      	movs	r2, #1
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7fd fe81 	bl	8000f58 <VL53L0X_WrByte>
 8003256:	4603      	mov	r3, r0
 8003258:	461a      	mov	r2, r3
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	4313      	orrs	r3, r2
 800325e:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8003260:	2202      	movs	r2, #2
 8003262:	2185      	movs	r1, #133	; 0x85
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fd fe77 	bl	8000f58 <VL53L0X_WrByte>
 800326a:	4603      	mov	r3, r0
 800326c:	461a      	mov	r2, r3
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	4313      	orrs	r3, r2
 8003272:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8003274:	2204      	movs	r2, #4
 8003276:	21ff      	movs	r1, #255	; 0xff
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7fd fe6d 	bl	8000f58 <VL53L0X_WrByte>
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	4313      	orrs	r3, r2
 8003286:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8003288:	2200      	movs	r2, #0
 800328a:	21cd      	movs	r1, #205	; 0xcd
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fd fe63 	bl	8000f58 <VL53L0X_WrByte>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	4313      	orrs	r3, r2
 800329a:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800329c:	2211      	movs	r2, #17
 800329e:	21cc      	movs	r1, #204	; 0xcc
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7fd fe59 	bl	8000f58 <VL53L0X_WrByte>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461a      	mov	r2, r3
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80032b0:	2207      	movs	r2, #7
 80032b2:	21ff      	movs	r1, #255	; 0xff
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7fd fe4f 	bl	8000f58 <VL53L0X_WrByte>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80032c4:	2200      	movs	r2, #0
 80032c6:	21be      	movs	r1, #190	; 0xbe
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7fd fe45 	bl	8000f58 <VL53L0X_WrByte>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80032d8:	2206      	movs	r2, #6
 80032da:	21ff      	movs	r1, #255	; 0xff
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7fd fe3b 	bl	8000f58 <VL53L0X_WrByte>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80032ec:	2209      	movs	r2, #9
 80032ee:	21cc      	movs	r1, #204	; 0xcc
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fd fe31 	bl	8000f58 <VL53L0X_WrByte>
 80032f6:	4603      	mov	r3, r0
 80032f8:	461a      	mov	r2, r3
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003300:	2200      	movs	r2, #0
 8003302:	21ff      	movs	r1, #255	; 0xff
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7fd fe27 	bl	8000f58 <VL53L0X_WrByte>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	4313      	orrs	r3, r2
 8003312:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003314:	2201      	movs	r2, #1
 8003316:	21ff      	movs	r1, #255	; 0xff
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7fd fe1d 	bl	8000f58 <VL53L0X_WrByte>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	4313      	orrs	r3, r2
 8003326:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003328:	2200      	movs	r2, #0
 800332a:	2100      	movs	r1, #0
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fd fe13 	bl	8000f58 <VL53L0X_WrByte>
 8003332:	4603      	mov	r3, r0
 8003334:	461a      	mov	r2, r3
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	4313      	orrs	r3, r2
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e05a      	b.n	80033f4 <VL53L0X_SetGpioConfig+0x260>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800333e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d122      	bne.n	800338c <VL53L0X_SetGpioConfig+0x1f8>
			switch (Functionality) {
 8003346:	787b      	ldrb	r3, [r7, #1]
 8003348:	2b04      	cmp	r3, #4
 800334a:	d81c      	bhi.n	8003386 <VL53L0X_SetGpioConfig+0x1f2>
 800334c:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <VL53L0X_SetGpioConfig+0x1c0>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	08003369 	.word	0x08003369
 8003358:	0800336f 	.word	0x0800336f
 800335c:	08003375 	.word	0x08003375
 8003360:	0800337b 	.word	0x0800337b
 8003364:	08003381 	.word	0x08003381
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8003368:	2300      	movs	r3, #0
 800336a:	73bb      	strb	r3, [r7, #14]
				break;
 800336c:	e00f      	b.n	800338e <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800336e:	2301      	movs	r3, #1
 8003370:	73bb      	strb	r3, [r7, #14]
				break;
 8003372:	e00c      	b.n	800338e <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8003374:	2302      	movs	r3, #2
 8003376:	73bb      	strb	r3, [r7, #14]
				break;
 8003378:	e009      	b.n	800338e <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800337a:	2303      	movs	r3, #3
 800337c:	73bb      	strb	r3, [r7, #14]
				break;
 800337e:	e006      	b.n	800338e <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8003380:	2304      	movs	r3, #4
 8003382:	73bb      	strb	r3, [r7, #14]
				break;
 8003384:	e003      	b.n	800338e <VL53L0X_SetGpioConfig+0x1fa>
			default:
				Status =
 8003386:	23f5      	movs	r3, #245	; 0xf5
 8003388:	73fb      	strb	r3, [r7, #15]
 800338a:	e000      	b.n	800338e <VL53L0X_SetGpioConfig+0x1fa>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800338c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800338e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d107      	bne.n	80033a6 <VL53L0X_SetGpioConfig+0x212>
			Status = VL53L0X_WrByte(Dev,
 8003396:	7bbb      	ldrb	r3, [r7, #14]
 8003398:	461a      	mov	r2, r3
 800339a:	210a      	movs	r1, #10
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fd fddb 	bl	8000f58 <VL53L0X_WrByte>
 80033a2:	4603      	mov	r3, r0
 80033a4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80033a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d110      	bne.n	80033d0 <VL53L0X_SetGpioConfig+0x23c>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80033ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <VL53L0X_SetGpioConfig+0x228>
				data = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73bb      	strb	r3, [r7, #14]
 80033ba:	e001      	b.n	80033c0 <VL53L0X_SetGpioConfig+0x22c>
			else
				data = (uint8_t)(1 << 4);
 80033bc:	2310      	movs	r3, #16
 80033be:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80033c0:	7bbb      	ldrb	r3, [r7, #14]
 80033c2:	22ef      	movs	r2, #239	; 0xef
 80033c4:	2184      	movs	r1, #132	; 0x84
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fd fe14 	bl	8000ff4 <VL53L0X_UpdateByte>
 80033cc:	4603      	mov	r3, r0
 80033ce:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80033d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d103      	bne.n	80033e0 <VL53L0X_SetGpioConfig+0x24c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	787a      	ldrb	r2, [r7, #1]
 80033dc:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80033e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <VL53L0X_SetGpioConfig+0x260>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80033e8:	2100      	movs	r1, #0
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f886 	bl	80034fc <VL53L0X_ClearInterruptMask>
 80033f0:	4603      	mov	r3, r0
 80033f2:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <VL53L0X_SetGpioConfig+0x294>)
 80033f6:	681c      	ldr	r4, [r3, #0]
 80033f8:	f003 fdd6 	bl	8006fa8 <HAL_GetTick>
 80033fc:	4603      	mov	r3, r0
 80033fe:	461a      	mov	r2, r3
 8003400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003404:	9302      	str	r3, [sp, #8]
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <VL53L0X_SetGpioConfig+0x298>)
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	9200      	str	r2, [sp, #0]
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <VL53L0X_SetGpioConfig+0x2a0>)
 800340e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003412:	4621      	mov	r1, r4
 8003414:	2001      	movs	r0, #1
 8003416:	f003 fd2f 	bl	8006e78 <trace_print_module_function>
	return Status;
 800341a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bd90      	pop	{r4, r7, pc}
 8003426:	bf00      	nop
 8003428:	200002cc 	.word	0x200002cc
 800342c:	0800d920 	.word	0x0800d920
 8003430:	0800ceb0 	.word	0x0800ceb0
 8003434:	0800cec4 	.word	0x0800cec4

08003438 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b08b      	sub	sp, #44	; 0x2c
 800343c:	af04      	add	r7, sp, #16
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	460b      	mov	r3, r1
 8003446:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003448:	2300      	movs	r3, #0
 800344a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");
 800344c:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <VL53L0X_GetInterruptThresholds+0xb0>)
 800344e:	681c      	ldr	r4, [r3, #0]
 8003450:	f003 fdaa 	bl	8006fa8 <HAL_GetTick>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	4b24      	ldr	r3, [pc, #144]	; (80034ec <VL53L0X_GetInterruptThresholds+0xb4>)
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	9200      	str	r2, [sp, #0]
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <VL53L0X_GetInterruptThresholds+0xb8>)
 8003460:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003464:	4621      	mov	r1, r4
 8003466:	2001      	movs	r0, #1
 8003468:	f003 fd06 	bl	8006e78 <trace_print_module_function>

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	461a      	mov	r2, r3
 8003472:	210e      	movs	r1, #14
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f7fd fe1b 	bl	80010b0 <VL53L0X_RdWord>
 800347a:	4603      	mov	r3, r0
 800347c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800347e:	8abb      	ldrh	r3, [r7, #20]
 8003480:	045b      	lsls	r3, r3, #17
 8003482:	461a      	mov	r2, r3
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <VL53L0X_GetInterruptThresholds+0xbc>)
 8003486:	4013      	ands	r3, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800348c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10f      	bne.n	80034b4 <VL53L0X_GetInterruptThresholds+0x7c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	461a      	mov	r2, r3
 800349a:	210c      	movs	r1, #12
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7fd fe07 	bl	80010b0 <VL53L0X_RdWord>
 80034a2:	4603      	mov	r3, r0
 80034a4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80034a6:	8abb      	ldrh	r3, [r7, #20]
 80034a8:	045b      	lsls	r3, r3, #17
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <VL53L0X_GetInterruptThresholds+0xbc>)
 80034ae:	4013      	ands	r3, r2
		*pThresholdHigh =
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <VL53L0X_GetInterruptThresholds+0xb0>)
 80034b6:	681c      	ldr	r4, [r3, #0]
 80034b8:	f003 fd76 	bl	8006fa8 <HAL_GetTick>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034c4:	9302      	str	r3, [sp, #8]
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <VL53L0X_GetInterruptThresholds+0xb4>)
 80034c8:	9301      	str	r3, [sp, #4]
 80034ca:	9200      	str	r2, [sp, #0]
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <VL53L0X_GetInterruptThresholds+0xc0>)
 80034ce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80034d2:	4621      	mov	r1, r4
 80034d4:	2001      	movs	r0, #1
 80034d6:	f003 fccf 	bl	8006e78 <trace_print_module_function>
	return Status;
 80034da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd90      	pop	{r4, r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200002cc 	.word	0x200002cc
 80034ec:	0800d970 	.word	0x0800d970
 80034f0:	0800ceb0 	.word	0x0800ceb0
 80034f4:	1ffe0000 	.word	0x1ffe0000
 80034f8:	0800cec4 	.word	0x0800cec4

080034fc <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b089      	sub	sp, #36	; 0x24
 8003500:	af04      	add	r7, sp, #16
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");
 800350a:	4b2e      	ldr	r3, [pc, #184]	; (80035c4 <VL53L0X_ClearInterruptMask+0xc8>)
 800350c:	681c      	ldr	r4, [r3, #0]
 800350e:	f003 fd4b 	bl	8006fa8 <HAL_GetTick>
 8003512:	4603      	mov	r3, r0
 8003514:	461a      	mov	r2, r3
 8003516:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <VL53L0X_ClearInterruptMask+0xcc>)
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	9200      	str	r2, [sp, #0]
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <VL53L0X_ClearInterruptMask+0xd0>)
 800351e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003522:	4621      	mov	r1, r4
 8003524:	2001      	movs	r0, #1
 8003526:	f003 fca7 	bl	8006e78 <trace_print_module_function>

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800352e:	2201      	movs	r2, #1
 8003530:	210b      	movs	r1, #11
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd fd10 	bl	8000f58 <VL53L0X_WrByte>
 8003538:	4603      	mov	r3, r0
 800353a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800353c:	2200      	movs	r2, #0
 800353e:	210b      	movs	r1, #11
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fd fd09 	bl	8000f58 <VL53L0X_WrByte>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	4313      	orrs	r3, r2
 800354e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8003550:	f107 030d 	add.w	r3, r7, #13
 8003554:	461a      	mov	r2, r3
 8003556:	2113      	movs	r1, #19
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fd fd7f 	bl	800105c <VL53L0X_RdByte>
 800355e:	4603      	mov	r3, r0
 8003560:	461a      	mov	r2, r3
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	4313      	orrs	r3, r2
 8003566:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8003568:	7bbb      	ldrb	r3, [r7, #14]
 800356a:	3301      	adds	r3, #1
 800356c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800356e:	7b7b      	ldrb	r3, [r7, #13]
 8003570:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8003574:	2b00      	cmp	r3, #0
 8003576:	d006      	beq.n	8003586 <VL53L0X_ClearInterruptMask+0x8a>
			&& (LoopCount < 3)
 8003578:	7bbb      	ldrb	r3, [r7, #14]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d803      	bhi.n	8003586 <VL53L0X_ClearInterruptMask+0x8a>
			&& (Status == VL53L0X_ERROR_NONE));
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0d3      	beq.n	800352e <VL53L0X_ClearInterruptMask+0x32>


	if (LoopCount >= 3)
 8003586:	7bbb      	ldrb	r3, [r7, #14]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <VL53L0X_ClearInterruptMask+0x94>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800358c:	23f4      	movs	r3, #244	; 0xf4
 800358e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <VL53L0X_ClearInterruptMask+0xc8>)
 8003592:	681c      	ldr	r4, [r3, #0]
 8003594:	f003 fd08 	bl	8006fa8 <HAL_GetTick>
 8003598:	4603      	mov	r3, r0
 800359a:	461a      	mov	r2, r3
 800359c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a0:	9302      	str	r3, [sp, #8]
 80035a2:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <VL53L0X_ClearInterruptMask+0xcc>)
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	9200      	str	r2, [sp, #0]
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <VL53L0X_ClearInterruptMask+0xd4>)
 80035aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80035ae:	4621      	mov	r1, r4
 80035b0:	2001      	movs	r0, #1
 80035b2:	f003 fc61 	bl	8006e78 <trace_print_module_function>
	return Status;
 80035b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd90      	pop	{r4, r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200002cc 	.word	0x200002cc
 80035c8:	0800d9b0 	.word	0x0800d9b0
 80035cc:	0800ceb0 	.word	0x0800ceb0
 80035d0:	0800cec4 	.word	0x0800cec4

080035d4 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b089      	sub	sp, #36	; 0x24
 80035d8:	af04      	add	r7, sp, #16
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");
 80035e2:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <VL53L0X_GetInterruptMaskStatus+0x8c>)
 80035e4:	681c      	ldr	r4, [r3, #0]
 80035e6:	f003 fcdf 	bl	8006fa8 <HAL_GetTick>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <VL53L0X_GetInterruptMaskStatus+0x90>)
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	9200      	str	r2, [sp, #0]
 80035f4:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <VL53L0X_GetInterruptMaskStatus+0x94>)
 80035f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80035fa:	4621      	mov	r1, r4
 80035fc:	2001      	movs	r0, #1
 80035fe:	f003 fc3b 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8003602:	f107 030e 	add.w	r3, r7, #14
 8003606:	461a      	mov	r2, r3
 8003608:	2113      	movs	r1, #19
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd fd26 	bl	800105c <VL53L0X_RdByte>
 8003610:	4603      	mov	r3, r0
 8003612:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8003614:	7bbb      	ldrb	r3, [r7, #14]
 8003616:	f003 0207 	and.w	r2, r3, #7
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800361e:	7bbb      	ldrb	r3, [r7, #14]
 8003620:	f003 0318 	and.w	r3, r3, #24
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <VL53L0X_GetInterruptMaskStatus+0x58>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8003628:	23fa      	movs	r3, #250	; 0xfa
 800362a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <VL53L0X_GetInterruptMaskStatus+0x8c>)
 800362e:	681c      	ldr	r4, [r3, #0]
 8003630:	f003 fcba 	bl	8006fa8 <HAL_GetTick>
 8003634:	4603      	mov	r3, r0
 8003636:	461a      	mov	r2, r3
 8003638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363c:	9302      	str	r3, [sp, #8]
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <VL53L0X_GetInterruptMaskStatus+0x90>)
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	9200      	str	r2, [sp, #0]
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <VL53L0X_GetInterruptMaskStatus+0x98>)
 8003646:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800364a:	4621      	mov	r1, r4
 800364c:	2001      	movs	r0, #1
 800364e:	f003 fc13 	bl	8006e78 <trace_print_module_function>
	return Status;
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	bd90      	pop	{r4, r7, pc}
 800365e:	bf00      	nop
 8003660:	200002cc 	.word	0x200002cc
 8003664:	0800d9cc 	.word	0x0800d9cc
 8003668:	0800ceb0 	.word	0x0800ceb0
 800366c:	0800cec4 	.word	0x0800cec4

08003670 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b08b      	sub	sp, #44	; 0x2c
 8003674:	af04      	add	r7, sp, #16
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800367c:	2300      	movs	r3, #0
 800367e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <VL53L0X_PerformRefSpadManagement+0x70>)
 8003682:	681c      	ldr	r4, [r3, #0]
 8003684:	f003 fc90 	bl	8006fa8 <HAL_GetTick>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <VL53L0X_PerformRefSpadManagement+0x74>)
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	9200      	str	r2, [sp, #0]
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <VL53L0X_PerformRefSpadManagement+0x78>)
 8003694:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003698:	4621      	mov	r1, r4
 800369a:	2001      	movs	r0, #1
 800369c:	f003 fbec 	bl	8006e78 <trace_print_module_function>

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fa1c 	bl	8003ae2 <VL53L0X_perform_ref_spad_management>
 80036aa:	4603      	mov	r3, r0
 80036ac:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <VL53L0X_PerformRefSpadManagement+0x70>)
 80036b0:	681c      	ldr	r4, [r3, #0]
 80036b2:	f003 fc79 	bl	8006fa8 <HAL_GetTick>
 80036b6:	4603      	mov	r3, r0
 80036b8:	461a      	mov	r2, r3
 80036ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036be:	9302      	str	r3, [sp, #8]
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <VL53L0X_PerformRefSpadManagement+0x74>)
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	9200      	str	r2, [sp, #0]
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <VL53L0X_PerformRefSpadManagement+0x7c>)
 80036c8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80036cc:	4621      	mov	r1, r4
 80036ce:	2001      	movs	r0, #1
 80036d0:	f003 fbd2 	bl	8006e78 <trace_print_module_function>

	return Status;
 80036d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd90      	pop	{r4, r7, pc}
 80036e0:	200002cc 	.word	0x200002cc
 80036e4:	0800dad8 	.word	0x0800dad8
 80036e8:	0800ceb0 	.word	0x0800ceb0
 80036ec:	0800cec4 	.word	0x0800cec4

080036f0 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80036fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003702:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8003704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003708:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800370a:	f107 0308 	add.w	r3, r7, #8
 800370e:	461a      	mov	r2, r3
 8003710:	2128      	movs	r1, #40	; 0x28
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd fccc 	bl	80010b0 <VL53L0X_RdWord>
 8003718:	4603      	mov	r3, r0
 800371a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800371c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11e      	bne.n	8003762 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372a:	b29b      	uxth	r3, r3
 800372c:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800372e:	893b      	ldrh	r3, [r7, #8]
 8003730:	461a      	mov	r2, r3
 8003732:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003736:	429a      	cmp	r2, r3
 8003738:	dd0b      	ble.n	8003752 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800373a:	893a      	ldrh	r2, [r7, #8]
 800373c:	897b      	ldrh	r3, [r7, #10]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	b29b      	uxth	r3, r3
 8003742:	b21b      	sxth	r3, r3
 8003744:	461a      	mov	r2, r3
					* 250;
 8003746:	23fa      	movs	r3, #250	; 0xfa
 8003748:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e007      	b.n	8003762 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8003752:	893b      	ldrh	r3, [r7, #8]
 8003754:	b21b      	sxth	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	23fa      	movs	r3, #250	; 0xfa
 800375a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8003762:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800376e:	b480      	push	{r7}
 8003770:	b08b      	sub	sp, #44	; 0x2c
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800377c:	2308      	movs	r3, #8
 800377e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	f04f 32ff 	mov.w	r2, #4294967295
 800378a:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	fbb3 f2f2 	udiv	r2, r3, r2
 800379e:	69b9      	ldr	r1, [r7, #24]
 80037a0:	fb01 f202 	mul.w	r2, r1, r2
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	e030      	b.n	8003810 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	4413      	add	r3, r2
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80037bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d11e      	bne.n	8003802 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80037c4:	7ffa      	ldrb	r2, [r7, #31]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	fa42 f303 	asr.w	r3, r2, r3
 80037cc:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80037d2:	e016      	b.n	8003802 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80037d4:	7ffb      	ldrb	r3, [r7, #31]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00b      	beq.n	80037f6 <get_next_good_spad+0x88>
				success = 1;
 80037de:	2301      	movs	r3, #1
 80037e0:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	fb02 f203 	mul.w	r2, r2, r3
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	4413      	add	r3, r2
 80037ee:	461a      	mov	r2, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	601a      	str	r2, [r3, #0]
				break;
 80037f4:	e009      	b.n	800380a <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80037f6:	7ffb      	ldrb	r3, [r7, #31]
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	3301      	adds	r3, #1
 8003800:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8003802:	6a3a      	ldr	r2, [r7, #32]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	429a      	cmp	r2, r3
 8003808:	d3e4      	bcc.n	80037d4 <get_next_good_spad+0x66>
				coarseIndex++) {
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	3301      	adds	r3, #1
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8003810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d202      	bcs.n	800381e <get_next_good_spad+0xb0>
 8003818:	7fbb      	ldrb	r3, [r7, #30]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0c7      	beq.n	80037ae <get_next_good_spad+0x40>
		}
	}
}
 800381e:	bf00      	nop
 8003820:	372c      	adds	r7, #44	; 0x2c
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	099b      	lsrs	r3, r3, #6
 8003838:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800383a:	4a07      	ldr	r2, [pc, #28]	; (8003858 <is_aperture+0x30>)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <is_aperture+0x22>
		isAperture = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	200002bc 	.word	0x200002bc

0800385c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003868:	2300      	movs	r3, #0
 800386a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800386c:	2308      	movs	r3, #8
 800386e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003882:	69b9      	ldr	r1, [r7, #24]
 8003884:	fb01 f202 	mul.w	r2, r1, r2
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	429a      	cmp	r2, r3
 8003892:	d302      	bcc.n	800389a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003894:	23ce      	movs	r3, #206	; 0xce
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e010      	b.n	80038bc <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4413      	add	r3, r2
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	b25a      	sxtb	r2, r3
 80038a4:	2101      	movs	r1, #1
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	4313      	orrs	r3, r2
 80038b0:	b259      	sxtb	r1, r3
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	4413      	add	r3, r2
 80038b8:	b2ca      	uxtb	r2, r1
 80038ba:	701a      	strb	r2, [r3, #0]

	return status;
 80038bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3724      	adds	r7, #36	; 0x24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80038d4:	2306      	movs	r3, #6
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	21b0      	movs	r1, #176	; 0xb0
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd fae0 	bl	8000ea0 <VL53L0X_WriteMulti>
 80038e0:	4603      	mov	r3, r0
 80038e2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80038e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80038fa:	2306      	movs	r3, #6
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	21b0      	movs	r1, #176	; 0xb0
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fd fafd 	bl	8000f00 <VL53L0X_ReadMulti>
 8003906:	4603      	mov	r3, r0
 8003908:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800390a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b08c      	sub	sp, #48	; 0x30
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	460b      	mov	r3, r1
 8003924:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003926:	2300      	movs	r3, #0
 8003928:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800392c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800392e:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8003930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003932:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8003934:	2300      	movs	r3, #0
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
 8003938:	e02b      	b.n	8003992 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800393a:	f107 031c 	add.w	r3, r7, #28
 800393e:	6a3a      	ldr	r2, [r7, #32]
 8003940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ff13 	bl	800376e <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d103      	bne.n	8003958 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003950:	23ce      	movs	r3, #206	; 0xce
 8003952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8003956:	e020      	b.n	800399a <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	461a      	mov	r2, r3
 800395c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395e:	4413      	add	r3, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff61 	bl	8003828 <is_aperture>
 8003966:	4603      	mov	r3, r0
 8003968:	461a      	mov	r2, r3
 800396a:	7afb      	ldrb	r3, [r7, #11]
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003970:	23ce      	movs	r3, #206	; 0xce
 8003972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8003976:	e010      	b.n	800399a <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003980:	6838      	ldr	r0, [r7, #0]
 8003982:	f7ff ff6b 	bl	800385c <enable_spad_bit>
		currentSpad++;
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	3301      	adds	r3, #1
 800398a:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	3301      	adds	r3, #1
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
 8003992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003996:	429a      	cmp	r2, r3
 8003998:	d3cf      	bcc.n	800393a <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800399a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800399c:	6a3a      	ldr	r2, [r7, #32]
 800399e:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80039a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80039a8:	6839      	ldr	r1, [r7, #0]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff ff8d 	bl	80038ca <set_ref_spad_map>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80039b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d121      	bne.n	8003a02 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80039be:	f107 0314 	add.w	r3, r7, #20
 80039c2:	4619      	mov	r1, r3
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff ff93 	bl	80038f0 <get_ref_spad_map>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80039d4:	e011      	b.n	80039fa <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	4413      	add	r3, r2
 80039dc:	781a      	ldrb	r2, [r3, #0]
 80039de:	f107 0114 	add.w	r1, r7, #20
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	440b      	add	r3, r1
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d003      	beq.n	80039f4 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80039ec:	23ce      	movs	r3, #206	; 0xce
 80039ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80039f2:	e006      	b.n	8003a02 <enable_ref_spads+0xec>
			}
			i++;
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	3301      	adds	r3, #1
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d3e9      	bcc.n	80039d6 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8003a02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3730      	adds	r7, #48	; 0x30
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b08a      	sub	sp, #40	; 0x28
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003a2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8003a2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d107      	bne.n	8003a46 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8003a36:	22c0      	movs	r2, #192	; 0xc0
 8003a38:	2101      	movs	r1, #1
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd fa8c 	bl	8000f58 <VL53L0X_WrByte>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8003a46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d108      	bne.n	8003a60 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8003a4e:	f107 0308 	add.w	r3, r7, #8
 8003a52:	4619      	mov	r1, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fb41 	bl	80030dc <VL53L0X_PerformSingleRangingMeasurement>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8003a60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003a68:	2201      	movs	r2, #1
 8003a6a:	21ff      	movs	r1, #255	; 0xff
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7fd fa73 	bl	8000f58 <VL53L0X_WrByte>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8003a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d107      	bne.n	8003a90 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	21b6      	movs	r1, #182	; 0xb6
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fd fb13 	bl	80010b0 <VL53L0X_RdWord>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8003a90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	21ff      	movs	r1, #255	; 0xff
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7fd fa5b 	bl	8000f58 <VL53L0X_WrByte>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8003aa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d112      	bne.n	8003ad6 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003ab0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fd fa4d 	bl	8000f58 <VL53L0X_WrByte>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8003ac4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d104      	bne.n	8003ad6 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003ad2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8003ad6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3728      	adds	r7, #40	; 0x28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8003ae2:	b590      	push	{r4, r7, lr}
 8003ae4:	b09d      	sub	sp, #116	; 0x74
 8003ae6:	af06      	add	r7, sp, #24
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8003af4:	23b4      	movs	r3, #180	; 0xb4
 8003af6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8003afa:	2303      	movs	r3, #3
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8003afe:	232c      	movs	r3, #44	; 0x2c
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8003b0e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003b12:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8003b1c:	2306      	movs	r3, #6
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8003b46:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8003b48:	2300      	movs	r3, #0
 8003b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b4c:	e009      	b.n	8003b62 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5e:	3301      	adds	r3, #1
 8003b60:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d3f1      	bcc.n	8003b4e <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	21ff      	movs	r1, #255	; 0xff
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f7fd f9f2 	bl	8000f58 <VL53L0X_WrByte>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003b7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8003b82:	2200      	movs	r2, #0
 8003b84:	214f      	movs	r1, #79	; 0x4f
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f7fd f9e6 	bl	8000f58 <VL53L0X_WrByte>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003b92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d107      	bne.n	8003baa <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8003b9a:	222c      	movs	r2, #44	; 0x2c
 8003b9c:	214e      	movs	r1, #78	; 0x4e
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f7fd f9da 	bl	8000f58 <VL53L0X_WrByte>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003baa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d107      	bne.n	8003bc2 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	21ff      	movs	r1, #255	; 0xff
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7fd f9ce 	bl	8000f58 <VL53L0X_WrByte>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003bc2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8003bca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003bce:	461a      	mov	r2, r3
 8003bd0:	21b6      	movs	r1, #182	; 0xb6
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f7fd f9c0 	bl	8000f58 <VL53L0X_WrByte>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8003bde:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d107      	bne.n	8003bf6 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8003be6:	2200      	movs	r2, #0
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7fd f9b4 	bl	8000f58 <VL53L0X_WrByte>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8003bf6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8003bfe:	f107 0210 	add.w	r2, r7, #16
 8003c02:	f107 0111 	add.w	r1, r7, #17
 8003c06:	2300      	movs	r3, #0
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 fbbb 	bl	8004384 <VL53L0X_perform_ref_calibration>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8003c14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d121      	bne.n	8003c60 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8003c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c22:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8003c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c2a:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8003c38:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003c3c:	f107 0218 	add.w	r2, r7, #24
 8003c40:	9204      	str	r2, [sp, #16]
 8003c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c44:	9203      	str	r2, [sp, #12]
 8003c46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c48:	9202      	str	r2, [sp, #8]
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4623      	mov	r3, r4
 8003c52:	4602      	mov	r2, r0
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff fe5e 	bl	8003916 <enable_ref_spads>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003c60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d174      	bne.n	8003d52 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8003c6c:	f107 0312 	add.w	r3, r7, #18
 8003c70:	4619      	mov	r1, r3
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff fecb 	bl	8003a0e <perform_ref_signal_measurement>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003c7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d161      	bne.n	8003d4a <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8003c86:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003c88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d25d      	bcs.n	8003d4a <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c92:	e009      	b.n	8003ca8 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8003ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d3f1      	bcc.n	8003c94 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8003cb0:	e002      	b.n	8003cb8 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8003cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8003cb8:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8003cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cbe:	4413      	add	r3, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fdb1 	bl	8003828 <is_aperture>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8003ccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d3ee      	bcc.n	8003cb2 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8003cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cda:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8003ce8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003cec:	f107 0218 	add.w	r2, r7, #24
 8003cf0:	9204      	str	r2, [sp, #16]
 8003cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cf4:	9203      	str	r2, [sp, #12]
 8003cf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003cf8:	9202      	str	r2, [sp, #8]
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	4623      	mov	r3, r4
 8003d02:	4602      	mov	r2, r0
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7ff fe06 	bl	8003916 <enable_ref_spads>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003d10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d11b      	bne.n	8003d50 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8003d1c:	f107 0312 	add.w	r3, r7, #18
 8003d20:	4619      	mov	r1, r3
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff fe73 	bl	8003a0e <perform_ref_signal_measurement>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8003d2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10c      	bne.n	8003d50 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8003d36:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8003d38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d208      	bcs.n	8003d50 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d46:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8003d48:	e002      	b.n	8003d50 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d4e:	e000      	b.n	8003d52 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8003d50:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003d52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 80af 	bne.w	8003eba <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8003d5c:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8003d5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003d60:	429a      	cmp	r2, r3
 8003d62:	f240 80aa 	bls.w	8003eba <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8003d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8003d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6e:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8003d76:	f107 031c 	add.w	r3, r7, #28
 8003d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f008 fadd 	bl	800c33c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8003d82:	8a7b      	ldrh	r3, [r7, #18]
 8003d84:	461a      	mov	r2, r3
 8003d86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bfb8      	it	lt
 8003d8e:	425b      	neglt	r3, r3
 8003d90:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8003d98:	e086      	b.n	8003ea8 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003da6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003da8:	f7ff fce1 	bl	800376e <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d103      	bne.n	8003dbc <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003db4:	23ce      	movs	r3, #206	; 0xce
 8003db6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8003dba:	e07e      	b.n	8003eba <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8003dbc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fd2f 	bl	8003828 <is_aperture>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8003dda:	e06e      	b.n	8003eba <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8003ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dde:	3301      	adds	r3, #1
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8003dec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003dee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fd33 	bl	800385c <enable_spad_bit>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003dfc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10c      	bne.n	8003e1e <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8003e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e06:	3301      	adds	r3, #1
 8003e08:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8003e10:	4619      	mov	r1, r3
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff fd59 	bl	80038ca <set_ref_spad_map>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8003e1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d146      	bne.n	8003eb4 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8003e26:	f107 0312 	add.w	r3, r7, #18
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff fdee 	bl	8003a0e <perform_ref_signal_measurement>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8003e38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d13b      	bne.n	8003eb8 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8003e40:	8a7b      	ldrh	r3, [r7, #18]
 8003e42:	461a      	mov	r2, r3
 8003e44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bfb8      	it	lt
 8003e4c:	425b      	neglt	r3, r3
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8003e50:	8a7b      	ldrh	r3, [r7, #18]
 8003e52:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d21c      	bcs.n	8003e92 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8003e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d914      	bls.n	8003e8a <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8003e60:	f107 031c 	add.w	r3, r7, #28
 8003e64:	4619      	mov	r1, r3
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff fd2f 	bl	80038ca <set_ref_spad_map>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8003e78:	f107 011c 	add.w	r1, r7, #28
 8003e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f008 fa5c 	bl	800c33c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8003e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e86:	3b01      	subs	r3, #1
 8003e88:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e90:	e00a      	b.n	8003ea8 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8003e9c:	f107 031c 	add.w	r3, r7, #28
 8003ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f008 fa4a 	bl	800c33c <memcpy>
		while (!complete) {
 8003ea8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f43f af74 	beq.w	8003d9a <VL53L0X_perform_ref_spad_management+0x2b8>
 8003eb2:	e002      	b.n	8003eba <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003eb4:	bf00      	nop
 8003eb6:	e000      	b.n	8003eba <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003eb8:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003eba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d115      	bne.n	8003eee <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ec6:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003ece:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	781a      	ldrb	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8003eee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	375c      	adds	r7, #92	; 0x5c
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd90      	pop	{r4, r7, pc}

08003efa <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8003efa:	b590      	push	{r4, r7, lr}
 8003efc:	b093      	sub	sp, #76	; 0x4c
 8003efe:	af06      	add	r7, sp, #24
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	4613      	mov	r3, r2
 8003f06:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8003f12:	23b4      	movs	r3, #180	; 0xb4
 8003f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8003f18:	2306      	movs	r3, #6
 8003f1a:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8003f1c:	232c      	movs	r3, #44	; 0x2c
 8003f1e:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003f20:	2201      	movs	r2, #1
 8003f22:	21ff      	movs	r1, #255	; 0xff
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7fd f817 	bl	8000f58 <VL53L0X_WrByte>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003f30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d107      	bne.n	8003f48 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8003f38:	2200      	movs	r2, #0
 8003f3a:	214f      	movs	r1, #79	; 0x4f
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7fd f80b 	bl	8000f58 <VL53L0X_WrByte>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003f48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d107      	bne.n	8003f60 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8003f50:	222c      	movs	r2, #44	; 0x2c
 8003f52:	214e      	movs	r1, #78	; 0x4e
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7fc ffff 	bl	8000f58 <VL53L0X_WrByte>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003f60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d107      	bne.n	8003f78 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003f68:	2200      	movs	r2, #0
 8003f6a:	21ff      	movs	r1, #255	; 0xff
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7fc fff3 	bl	8000f58 <VL53L0X_WrByte>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003f78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d109      	bne.n	8003f94 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8003f80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f84:	461a      	mov	r2, r3
 8003f86:	21b6      	movs	r1, #182	; 0xb6
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7fc ffe5 	bl	8000f58 <VL53L0X_WrByte>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8003f94:	2300      	movs	r3, #0
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
 8003f98:	e009      	b.n	8003fae <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	3301      	adds	r3, #1
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d3f1      	bcc.n	8003f9a <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d011      	beq.n	8003fe0 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003fbc:	e002      	b.n	8003fc4 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003fc4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	4413      	add	r3, r2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fc2b 	bl	8003828 <is_aperture>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d103      	bne.n	8003fe0 <VL53L0X_set_reference_spads+0xe6>
 8003fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d3ee      	bcc.n	8003fbe <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8003fec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff0:	79f9      	ldrb	r1, [r7, #7]
 8003ff2:	f107 0214 	add.w	r2, r7, #20
 8003ff6:	9204      	str	r2, [sp, #16]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	9203      	str	r2, [sp, #12]
 8003ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffe:	9202      	str	r2, [sp, #8]
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	4623      	mov	r3, r4
 8004008:	4602      	mov	r2, r0
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff fc83 	bl	8003916 <enable_ref_spads>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004016:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10c      	bne.n	8004038 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	79fa      	ldrb	r2, [r7, #7]
 8004034:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004038:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800403c:	4618      	mov	r0, r3
 800403e:	3734      	adds	r7, #52	; 0x34
 8004040:	46bd      	mov	sp, r7
 8004042:	bd90      	pop	{r4, r7, pc}

08004044 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	2100      	movs	r1, #0
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7fc ff75 	bl	8000f58 <VL53L0X_WrByte>
 800406e:	4603      	mov	r3, r0
 8004070:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f9c0 	bl	8004400 <VL53L0X_measurement_poll_for_completion>
 8004080:	4603      	mov	r3, r0
 8004082:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800408c:	2100      	movs	r1, #0
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff fa34 	bl	80034fc <VL53L0X_ClearInterruptMask>
 8004094:	4603      	mov	r3, r0
 8004096:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d106      	bne.n	80040ae <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80040a0:	2200      	movs	r2, #0
 80040a2:	2100      	movs	r1, #0
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fc ff57 	bl	8000f58 <VL53L0X_WrByte>
 80040aa:	4603      	mov	r3, r0
 80040ac:	73fb      	strb	r3, [r7, #15]

	return Status;
 80040ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	4608      	mov	r0, r1
 80040c4:	4611      	mov	r1, r2
 80040c6:	461a      	mov	r2, r3
 80040c8:	4603      	mov	r3, r0
 80040ca:	70fb      	strb	r3, [r7, #3]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70bb      	strb	r3, [r7, #2]
 80040d0:	4613      	mov	r3, r2
 80040d2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80040dc:	2201      	movs	r2, #1
 80040de:	21ff      	movs	r1, #255	; 0xff
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7fc ff39 	bl	8000f58 <VL53L0X_WrByte>
 80040e6:	4603      	mov	r3, r0
 80040e8:	461a      	mov	r2, r3
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80040f0:	2200      	movs	r2, #0
 80040f2:	2100      	movs	r1, #0
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7fc ff2f 	bl	8000f58 <VL53L0X_WrByte>
 80040fa:	4603      	mov	r3, r0
 80040fc:	461a      	mov	r2, r3
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	4313      	orrs	r3, r2
 8004102:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004104:	2200      	movs	r2, #0
 8004106:	21ff      	movs	r1, #255	; 0xff
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7fc ff25 	bl	8000f58 <VL53L0X_WrByte>
 800410e:	4603      	mov	r3, r0
 8004110:	461a      	mov	r2, r3
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	4313      	orrs	r3, r2
 8004116:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01e      	beq.n	800415c <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800411e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	21cb      	movs	r1, #203	; 0xcb
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fc ff96 	bl	800105c <VL53L0X_RdByte>
 8004130:	4603      	mov	r3, r0
 8004132:	461a      	mov	r2, r3
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	4313      	orrs	r3, r2
 8004138:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800413a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800413e:	2b00      	cmp	r3, #0
 8004140:	d02a      	beq.n	8004198 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004142:	f107 030e 	add.w	r3, r7, #14
 8004146:	461a      	mov	r2, r3
 8004148:	21ee      	movs	r1, #238	; 0xee
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc ff86 	bl	800105c <VL53L0X_RdByte>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	4313      	orrs	r3, r2
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	e01d      	b.n	8004198 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800415c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004164:	78bb      	ldrb	r3, [r7, #2]
 8004166:	461a      	mov	r2, r3
 8004168:	21cb      	movs	r1, #203	; 0xcb
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fc fef4 	bl	8000f58 <VL53L0X_WrByte>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	4313      	orrs	r3, r2
 8004178:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800417a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004182:	787b      	ldrb	r3, [r7, #1]
 8004184:	2280      	movs	r2, #128	; 0x80
 8004186:	21ee      	movs	r1, #238	; 0xee
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7fc ff33 	bl	8000ff4 <VL53L0X_UpdateByte>
 800418e:	4603      	mov	r3, r0
 8004190:	461a      	mov	r2, r3
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	4313      	orrs	r3, r2
 8004196:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004198:	2201      	movs	r2, #1
 800419a:	21ff      	movs	r1, #255	; 0xff
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7fc fedb 	bl	8000f58 <VL53L0X_WrByte>
 80041a2:	4603      	mov	r3, r0
 80041a4:	461a      	mov	r2, r3
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80041ac:	2201      	movs	r2, #1
 80041ae:	2100      	movs	r1, #0
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fc fed1 	bl	8000f58 <VL53L0X_WrByte>
 80041b6:	4603      	mov	r3, r0
 80041b8:	461a      	mov	r2, r3
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	4313      	orrs	r3, r2
 80041be:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80041c0:	2200      	movs	r2, #0
 80041c2:	21ff      	movs	r1, #255	; 0xff
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fc fec7 	bl	8000f58 <VL53L0X_WrByte>
 80041ca:	4603      	mov	r3, r0
 80041cc:	461a      	mov	r2, r3
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80041d4:	7bbb      	ldrb	r3, [r7, #14]
 80041d6:	f023 0310 	bic.w	r3, r3, #16
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	701a      	strb	r2, [r3, #0]

	return Status;
 80041e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af04      	add	r7, sp, #16
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	4611      	mov	r1, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	460b      	mov	r3, r1
 80041fc:	71fb      	strb	r3, [r7, #7]
 80041fe:	4613      	mov	r3, r2
 8004200:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004202:	2300      	movs	r3, #0
 8004204:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004216:	79bb      	ldrb	r3, [r7, #6]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004222:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8004224:	2201      	movs	r2, #1
 8004226:	2101      	movs	r1, #1
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7fc fe95 	bl	8000f58 <VL53L0X_WrByte>
 800422e:	4603      	mov	r3, r0
 8004230:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004232:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d105      	bne.n	8004246 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800423a:	2140      	movs	r1, #64	; 0x40
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff ff01 	bl	8004044 <VL53L0X_perform_single_ref_calibration>
 8004242:	4603      	mov	r3, r0
 8004244:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004246:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d115      	bne.n	800427a <VL53L0X_perform_vhv_calibration+0x8e>
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d112      	bne.n	800427a <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004254:	7d39      	ldrb	r1, [r7, #20]
 8004256:	7d7a      	ldrb	r2, [r7, #21]
 8004258:	2300      	movs	r3, #0
 800425a:	9303      	str	r3, [sp, #12]
 800425c:	2301      	movs	r3, #1
 800425e:	9302      	str	r3, [sp, #8]
 8004260:	f107 0313 	add.w	r3, r7, #19
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	460b      	mov	r3, r1
 800426c:	2101      	movs	r1, #1
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff ff23 	bl	80040ba <VL53L0X_ref_calibration_io>
 8004274:	4603      	mov	r3, r0
 8004276:	75fb      	strb	r3, [r7, #23]
 8004278:	e002      	b.n	8004280 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d112      	bne.n	80042ae <VL53L0X_perform_vhv_calibration+0xc2>
 8004288:	79bb      	ldrb	r3, [r7, #6]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00f      	beq.n	80042ae <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800428e:	7dbb      	ldrb	r3, [r7, #22]
 8004290:	461a      	mov	r2, r3
 8004292:	2101      	movs	r1, #1
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7fc fe5f 	bl	8000f58 <VL53L0X_WrByte>
 800429a:	4603      	mov	r3, r0
 800429c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800429e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	7dba      	ldrb	r2, [r7, #22]
 80042aa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80042ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b08a      	sub	sp, #40	; 0x28
 80042be:	af04      	add	r7, sp, #16
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	4611      	mov	r1, r2
 80042c6:	461a      	mov	r2, r3
 80042c8:	460b      	mov	r3, r1
 80042ca:	71fb      	strb	r3, [r7, #7]
 80042cc:	4613      	mov	r3, r2
 80042ce:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80042e0:	79bb      	ldrb	r3, [r7, #6]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80042ec:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80042ee:	2202      	movs	r2, #2
 80042f0:	2101      	movs	r1, #1
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7fc fe30 	bl	8000f58 <VL53L0X_WrByte>
 80042f8:	4603      	mov	r3, r0
 80042fa:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80042fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8004304:	2100      	movs	r1, #0
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff fe9c 	bl	8004044 <VL53L0X_perform_single_ref_calibration>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004310:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d115      	bne.n	8004344 <VL53L0X_perform_phase_calibration+0x8a>
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d112      	bne.n	8004344 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800431e:	7d39      	ldrb	r1, [r7, #20]
 8004320:	7d7a      	ldrb	r2, [r7, #21]
 8004322:	2301      	movs	r3, #1
 8004324:	9303      	str	r3, [sp, #12]
 8004326:	2300      	movs	r3, #0
 8004328:	9302      	str	r3, [sp, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	f107 0313 	add.w	r3, r7, #19
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	460b      	mov	r3, r1
 8004336:	2101      	movs	r1, #1
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff febe 	bl	80040ba <VL53L0X_ref_calibration_io>
 800433e:	4603      	mov	r3, r0
 8004340:	75fb      	strb	r3, [r7, #23]
 8004342:	e002      	b.n	800434a <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2200      	movs	r2, #0
 8004348:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800434a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d112      	bne.n	8004378 <VL53L0X_perform_phase_calibration+0xbe>
 8004352:	79bb      	ldrb	r3, [r7, #6]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00f      	beq.n	8004378 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004358:	7dbb      	ldrb	r3, [r7, #22]
 800435a:	461a      	mov	r2, r3
 800435c:	2101      	movs	r1, #1
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f7fc fdfa 	bl	8000f58 <VL53L0X_WrByte>
 8004364:	4603      	mov	r3, r0
 8004366:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d103      	bne.n	8004378 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	7dba      	ldrb	r2, [r7, #22]
 8004374:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004392:	2300      	movs	r3, #0
 8004394:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80043a0:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	2300      	movs	r3, #0
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f7ff ff1f 	bl	80041ec <VL53L0X_perform_vhv_calibration>
 80043ae:	4603      	mov	r3, r0
 80043b0:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80043b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d107      	bne.n	80043ca <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	2300      	movs	r3, #0
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff ff7a 	bl	80042ba <VL53L0X_perform_phase_calibration>
 80043c6:	4603      	mov	r3, r0
 80043c8:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80043ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80043d2:	7dbb      	ldrb	r3, [r7, #22]
 80043d4:	461a      	mov	r2, r3
 80043d6:	2101      	movs	r1, #1
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7fc fdbd 	bl	8000f58 <VL53L0X_WrByte>
 80043de:	4603      	mov	r3, r0
 80043e0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80043e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	7dba      	ldrb	r2, [r7, #22]
 80043ee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80043f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b08b      	sub	sp, #44	; 0x2c
 8004404:	af04      	add	r7, sp, #16
 8004406:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004408:	2300      	movs	r3, #0
 800440a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <VL53L0X_measurement_poll_for_completion+0xa8>)
 8004412:	681c      	ldr	r4, [r3, #0]
 8004414:	f002 fdc8 	bl	8006fa8 <HAL_GetTick>
 8004418:	4603      	mov	r3, r0
 800441a:	461a      	mov	r2, r3
 800441c:	4b23      	ldr	r3, [pc, #140]	; (80044ac <VL53L0X_measurement_poll_for_completion+0xac>)
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	9200      	str	r2, [sp, #0]
 8004422:	4b23      	ldr	r3, [pc, #140]	; (80044b0 <VL53L0X_measurement_poll_for_completion+0xb0>)
 8004424:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004428:	4621      	mov	r1, r4
 800442a:	2001      	movs	r0, #1
 800442c:	f002 fd24 	bl	8006e78 <trace_print_module_function>

	LoopNb = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004434:	f107 030f 	add.w	r3, r7, #15
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fe fc92 	bl	8002d64 <VL53L0X_GetMeasurementDataReady>
 8004440:	4603      	mov	r3, r0
 8004442:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8004444:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d110      	bne.n	800446e <VL53L0X_measurement_poll_for_completion+0x6e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d00f      	beq.n	8004472 <VL53L0X_measurement_poll_for_completion+0x72>
			break; /* done note that status == 0 */

		LoopNb++;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	3301      	adds	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800445e:	d302      	bcc.n	8004466 <VL53L0X_measurement_poll_for_completion+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004460:	23f9      	movs	r3, #249	; 0xf9
 8004462:	75fb      	strb	r3, [r7, #23]
			break;
 8004464:	e006      	b.n	8004474 <VL53L0X_measurement_poll_for_completion+0x74>
		}

		VL53L0X_PollingDelay(Dev);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc fe96 	bl	8001198 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800446c:	e7e2      	b.n	8004434 <VL53L0X_measurement_poll_for_completion+0x34>
			break; /* the error is set */
 800446e:	bf00      	nop
 8004470:	e000      	b.n	8004474 <VL53L0X_measurement_poll_for_completion+0x74>
			break; /* done note that status == 0 */
 8004472:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <VL53L0X_measurement_poll_for_completion+0xa8>)
 8004476:	681c      	ldr	r4, [r3, #0]
 8004478:	f002 fd96 	bl	8006fa8 <HAL_GetTick>
 800447c:	4603      	mov	r3, r0
 800447e:	461a      	mov	r2, r3
 8004480:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004484:	9302      	str	r3, [sp, #8]
 8004486:	4b09      	ldr	r3, [pc, #36]	; (80044ac <VL53L0X_measurement_poll_for_completion+0xac>)
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	9200      	str	r2, [sp, #0]
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <VL53L0X_measurement_poll_for_completion+0xb4>)
 800448e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004492:	4621      	mov	r1, r4
 8004494:	2001      	movs	r0, #1
 8004496:	f002 fcef 	bl	8006e78 <trace_print_module_function>

	return Status;
 800449a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd90      	pop	{r4, r7, pc}
 80044a6:	bf00      	nop
 80044a8:	200002cc 	.word	0x200002cc
 80044ac:	0800db24 	.word	0x0800db24
 80044b0:	0800dafc 	.word	0x0800dafc
 80044b4:	0800db10 	.word	0x0800db10

080044b8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	3301      	adds	r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	085b      	lsrs	r3, r3, #1
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800450c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004510:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8004512:	e002      	b.n	800451a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d8f8      	bhi.n	8004514 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8004522:	e017      	b.n	8004554 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4413      	add	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d30b      	bcc.n	8004548 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4413      	add	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	4413      	add	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e002      	b.n	800454e <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e4      	bne.n	8004524 <VL53L0X_isqrt+0x24>
	}

	return res;
 800455a:	68fb      	ldr	r3, [r7, #12]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
	...

08004568 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b08b      	sub	sp, #44	; 0x2c
 800456c:	af04      	add	r7, sp, #16
 800456e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004570:	2300      	movs	r3, #0
 8004572:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");
 8004574:	4b2f      	ldr	r3, [pc, #188]	; (8004634 <VL53L0X_device_read_strobe+0xcc>)
 8004576:	681c      	ldr	r4, [r3, #0]
 8004578:	f002 fd16 	bl	8006fa8 <HAL_GetTick>
 800457c:	4603      	mov	r3, r0
 800457e:	461a      	mov	r2, r3
 8004580:	4b2d      	ldr	r3, [pc, #180]	; (8004638 <VL53L0X_device_read_strobe+0xd0>)
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	9200      	str	r2, [sp, #0]
 8004586:	4b2d      	ldr	r3, [pc, #180]	; (800463c <VL53L0X_device_read_strobe+0xd4>)
 8004588:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800458c:	4621      	mov	r1, r4
 800458e:	2001      	movs	r0, #1
 8004590:	f002 fc72 	bl	8006e78 <trace_print_module_function>

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8004594:	2200      	movs	r2, #0
 8004596:	2183      	movs	r1, #131	; 0x83
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7fc fcdd 	bl	8000f58 <VL53L0X_WrByte>
 800459e:	4603      	mov	r3, r0
 80045a0:	461a      	mov	r2, r3
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80045a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d11e      	bne.n	80045ee <VL53L0X_device_read_strobe+0x86>
		LoopNb = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80045b4:	f107 030f 	add.w	r3, r7, #15
 80045b8:	461a      	mov	r2, r3
 80045ba:	2183      	movs	r1, #131	; 0x83
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fc fd4d 	bl	800105c <VL53L0X_RdByte>
 80045c2:	4603      	mov	r3, r0
 80045c4:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <VL53L0X_device_read_strobe+0x7a>
 80045cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <VL53L0X_device_read_strobe+0x7a>
					break;

			LoopNb = LoopNb + 1;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	3301      	adds	r3, #1
 80045d8:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80045e0:	d3e8      	bcc.n	80045b4 <VL53L0X_device_read_strobe+0x4c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80045e8:	d301      	bcc.n	80045ee <VL53L0X_device_read_strobe+0x86>
			Status = VL53L0X_ERROR_TIME_OUT;
 80045ea:	23f9      	movs	r3, #249	; 0xf9
 80045ec:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80045ee:	2201      	movs	r2, #1
 80045f0:	2183      	movs	r1, #131	; 0x83
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fc fcb0 	bl	8000f58 <VL53L0X_WrByte>
 80045f8:	4603      	mov	r3, r0
 80045fa:	461a      	mov	r2, r3
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
 80045fe:	4313      	orrs	r3, r2
 8004600:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
 8004602:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <VL53L0X_device_read_strobe+0xcc>)
 8004604:	681c      	ldr	r4, [r3, #0]
 8004606:	f002 fccf 	bl	8006fa8 <HAL_GetTick>
 800460a:	4603      	mov	r3, r0
 800460c:	461a      	mov	r2, r3
 800460e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004612:	9302      	str	r3, [sp, #8]
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <VL53L0X_device_read_strobe+0xd0>)
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	9200      	str	r2, [sp, #0]
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <VL53L0X_device_read_strobe+0xd8>)
 800461c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004620:	4621      	mov	r1, r4
 8004622:	2001      	movs	r0, #1
 8004624:	f002 fc28 	bl	8006e78 <trace_print_module_function>
	return Status;
 8004628:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800462c:	4618      	mov	r0, r3
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	bd90      	pop	{r4, r7, pc}
 8004634:	200002cc 	.word	0x200002cc
 8004638:	0800db4c 	.word	0x0800db4c
 800463c:	0800dafc 	.word	0x0800dafc
 8004640:	0800db10 	.word	0x0800db10

08004644 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8004644:	b590      	push	{r4, r7, lr}
 8004646:	b09d      	sub	sp, #116	; 0x74
 8004648:	af04      	add	r7, sp, #16
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004650:	2300      	movs	r3, #0
 8004652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8004674:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8004678:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800467e:	2300      	movs	r3, #0
 8004680:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t NvmRefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE];
	int i;


	LOG_FUNCTION_START("");
 8004686:	4b9b      	ldr	r3, [pc, #620]	; (80048f4 <VL53L0X_get_info_from_device+0x2b0>)
 8004688:	681c      	ldr	r4, [r3, #0]
 800468a:	f002 fc8d 	bl	8006fa8 <HAL_GetTick>
 800468e:	4603      	mov	r3, r0
 8004690:	461a      	mov	r2, r3
 8004692:	4b99      	ldr	r3, [pc, #612]	; (80048f8 <VL53L0X_get_info_from_device+0x2b4>)
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	9200      	str	r2, [sp, #0]
 8004698:	4b98      	ldr	r3, [pc, #608]	; (80048fc <VL53L0X_get_info_from_device+0x2b8>)
 800469a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800469e:	4621      	mov	r1, r4
 80046a0:	2001      	movs	r0, #1
 80046a2:	f002 fbe9 	bl	8006e78 <trace_print_module_function>

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80046ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80046b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80046b4:	2b07      	cmp	r3, #7
 80046b6:	f000 8410 	beq.w	8004eda <VL53L0X_get_info_from_device+0x896>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80046ba:	2201      	movs	r2, #1
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fc fc4a 	bl	8000f58 <VL53L0X_WrByte>
 80046c4:	4603      	mov	r3, r0
 80046c6:	461a      	mov	r2, r3
 80046c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80046d2:	2201      	movs	r2, #1
 80046d4:	21ff      	movs	r1, #255	; 0xff
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fc fc3e 	bl	8000f58 <VL53L0X_WrByte>
 80046dc:	4603      	mov	r3, r0
 80046de:	461a      	mov	r2, r3
 80046e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2100      	movs	r1, #0
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fc fc32 	bl	8000f58 <VL53L0X_WrByte>
 80046f4:	4603      	mov	r3, r0
 80046f6:	461a      	mov	r2, r3
 80046f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8004702:	2206      	movs	r2, #6
 8004704:	21ff      	movs	r1, #255	; 0xff
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc fc26 	bl	8000f58 <VL53L0X_WrByte>
 800470c:	4603      	mov	r3, r0
 800470e:	461a      	mov	r2, r3
 8004710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004714:	4313      	orrs	r3, r2
 8004716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800471a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800471e:	461a      	mov	r2, r3
 8004720:	2183      	movs	r1, #131	; 0x83
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fc fc9a 	bl	800105c <VL53L0X_RdByte>
 8004728:	4603      	mov	r3, r0
 800472a:	461a      	mov	r2, r3
 800472c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004730:	4313      	orrs	r3, r2
 8004732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8004736:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800473a:	f043 0304 	orr.w	r3, r3, #4
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	2183      	movs	r1, #131	; 0x83
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fc fc07 	bl	8000f58 <VL53L0X_WrByte>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004752:	4313      	orrs	r3, r2
 8004754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8004758:	2207      	movs	r2, #7
 800475a:	21ff      	movs	r1, #255	; 0xff
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fc fbfb 	bl	8000f58 <VL53L0X_WrByte>
 8004762:	4603      	mov	r3, r0
 8004764:	461a      	mov	r2, r3
 8004766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800476a:	4313      	orrs	r3, r2
 800476c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8004770:	2201      	movs	r2, #1
 8004772:	2181      	movs	r1, #129	; 0x81
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7fc fbef 	bl	8000f58 <VL53L0X_WrByte>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004782:	4313      	orrs	r3, r2
 8004784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fc fd05 	bl	8001198 <VL53L0X_PollingDelay>
 800478e:	4603      	mov	r3, r0
 8004790:	461a      	mov	r2, r3
 8004792:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004796:	4313      	orrs	r3, r2
 8004798:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800479c:	2201      	movs	r2, #1
 800479e:	2180      	movs	r1, #128	; 0x80
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fc fbd9 	bl	8000f58 <VL53L0X_WrByte>
 80047a6:	4603      	mov	r3, r0
 80047a8:	461a      	mov	r2, r3
 80047aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80a0 	beq.w	8004900 <VL53L0X_get_info_from_device+0x2bc>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80047c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047c4:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f040 8099 	bne.w	8004900 <VL53L0X_get_info_from_device+0x2bc>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80047ce:	226b      	movs	r2, #107	; 0x6b
 80047d0:	2194      	movs	r1, #148	; 0x94
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fc fbc0 	bl	8000f58 <VL53L0X_WrByte>
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff febe 	bl	8004568 <VL53L0X_device_read_strobe>
 80047ec:	4603      	mov	r3, r0
 80047ee:	461a      	mov	r2, r3
 80047f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80047fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047fe:	461a      	mov	r2, r3
 8004800:	2190      	movs	r1, #144	; 0x90
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fc fc8c 	bl	8001120 <VL53L0X_RdDWord>
 8004808:	4603      	mov	r3, r0
 800480a:	461a      	mov	r2, r3
 800480c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004810:	4313      	orrs	r3, r2
 8004812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	0a1b      	lsrs	r3, r3, #8
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004820:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	0bdb      	lsrs	r3, r3, #15
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8004832:	2224      	movs	r2, #36	; 0x24
 8004834:	2194      	movs	r1, #148	; 0x94
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fc fb8e 	bl	8000f58 <VL53L0X_WrByte>
 800483c:	4603      	mov	r3, r0
 800483e:	461a      	mov	r2, r3
 8004840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004844:	4313      	orrs	r3, r2
 8004846:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff fe8c 	bl	8004568 <VL53L0X_device_read_strobe>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004858:	4313      	orrs	r3, r2
 800485a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800485e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004862:	461a      	mov	r2, r3
 8004864:	2190      	movs	r1, #144	; 0x90
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc fc5a 	bl	8001120 <VL53L0X_RdDWord>
 800486c:	4603      	mov	r3, r0
 800486e:	461a      	mov	r2, r3
 8004870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004874:	4313      	orrs	r3, r2
 8004876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	0e1b      	lsrs	r3, r3, #24
 800487e:	b2db      	uxtb	r3, r3
 8004880:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	b2db      	uxtb	r3, r3
 8004888:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	b2db      	uxtb	r3, r3
 8004890:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	b2db      	uxtb	r3, r3
 8004896:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8004898:	2225      	movs	r2, #37	; 0x25
 800489a:	2194      	movs	r1, #148	; 0x94
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7fc fb5b 	bl	8000f58 <VL53L0X_WrByte>
 80048a2:	4603      	mov	r3, r0
 80048a4:	461a      	mov	r2, r3
 80048a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff fe59 	bl	8004568 <VL53L0X_device_read_strobe>
 80048b6:	4603      	mov	r3, r0
 80048b8:	461a      	mov	r2, r3
 80048ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048be:	4313      	orrs	r3, r2
 80048c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80048c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048c8:	461a      	mov	r2, r3
 80048ca:	2190      	movs	r1, #144	; 0x90
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fc fc27 	bl	8001120 <VL53L0X_RdDWord>
 80048d2:	4603      	mov	r3, r0
 80048d4:	461a      	mov	r2, r3
 80048d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048da:	4313      	orrs	r3, r2
 80048dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	0e1b      	lsrs	r3, r3, #24
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	0c1b      	lsrs	r3, r3, #16
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	737b      	strb	r3, [r7, #13]
 80048f0:	e006      	b.n	8004900 <VL53L0X_get_info_from_device+0x2bc>
 80048f2:	bf00      	nop
 80048f4:	200002cc 	.word	0x200002cc
 80048f8:	0800db68 	.word	0x0800db68
 80048fc:	0800dafc 	.word	0x0800dafc
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8189 	beq.w	8004c1e <VL53L0X_get_info_from_device+0x5da>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800490c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004910:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004914:	2b00      	cmp	r3, #0
 8004916:	f040 8182 	bne.w	8004c1e <VL53L0X_get_info_from_device+0x5da>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800491a:	2202      	movs	r2, #2
 800491c:	2194      	movs	r1, #148	; 0x94
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc fb1a 	bl	8000f58 <VL53L0X_WrByte>
 8004924:	4603      	mov	r3, r0
 8004926:	461a      	mov	r2, r3
 8004928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800492c:	4313      	orrs	r3, r2
 800492e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff fe18 	bl	8004568 <VL53L0X_device_read_strobe>
 8004938:	4603      	mov	r3, r0
 800493a:	461a      	mov	r2, r3
 800493c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004940:	4313      	orrs	r3, r2
 8004942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8004946:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800494a:	461a      	mov	r2, r3
 800494c:	2190      	movs	r1, #144	; 0x90
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fc fb84 	bl	800105c <VL53L0X_RdByte>
 8004954:	4603      	mov	r3, r0
 8004956:	461a      	mov	r2, r3
 8004958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800495c:	4313      	orrs	r3, r2
 800495e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004962:	227b      	movs	r2, #123	; 0x7b
 8004964:	2194      	movs	r1, #148	; 0x94
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fc faf6 	bl	8000f58 <VL53L0X_WrByte>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004974:	4313      	orrs	r3, r2
 8004976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff fdf4 	bl	8004568 <VL53L0X_device_read_strobe>
 8004980:	4603      	mov	r3, r0
 8004982:	461a      	mov	r2, r3
 8004984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004988:	4313      	orrs	r3, r2
 800498a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800498e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8004992:	461a      	mov	r2, r3
 8004994:	2190      	movs	r1, #144	; 0x90
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc fb60 	bl	800105c <VL53L0X_RdByte>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80049aa:	2277      	movs	r2, #119	; 0x77
 80049ac:	2194      	movs	r1, #148	; 0x94
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fc fad2 	bl	8000f58 <VL53L0X_WrByte>
 80049b4:	4603      	mov	r3, r0
 80049b6:	461a      	mov	r2, r3
 80049b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049bc:	4313      	orrs	r3, r2
 80049be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fdd0 	bl	8004568 <VL53L0X_device_read_strobe>
 80049c8:	4603      	mov	r3, r0
 80049ca:	461a      	mov	r2, r3
 80049cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80049d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049da:	461a      	mov	r2, r3
 80049dc:	2190      	movs	r1, #144	; 0x90
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fc fb9e 	bl	8001120 <VL53L0X_RdDWord>
 80049e4:	4603      	mov	r3, r0
 80049e6:	461a      	mov	r2, r3
 80049e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	0e5b      	lsrs	r3, r3, #25
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	0c9b      	lsrs	r3, r3, #18
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	0adb      	lsrs	r3, r3, #11
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8004a3c:	2278      	movs	r2, #120	; 0x78
 8004a3e:	2194      	movs	r1, #148	; 0x94
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fc fa89 	bl	8000f58 <VL53L0X_WrByte>
 8004a46:	4603      	mov	r3, r0
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff fd87 	bl	8004568 <VL53L0X_device_read_strobe>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2190      	movs	r1, #144	; 0x90
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fc fb55 	bl	8001120 <VL53L0X_RdDWord>
 8004a76:	4603      	mov	r3, r0
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	0f5b      	lsrs	r3, r3, #29
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8004a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a94:	4413      	add	r3, r2
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	0d9b      	lsrs	r3, r3, #22
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	0bdb      	lsrs	r3, r3, #15
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	0a1b      	lsrs	r3, r3, #8
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	085b      	lsrs	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	019b      	lsls	r3, r3, #6
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8004ae4:	2279      	movs	r2, #121	; 0x79
 8004ae6:	2194      	movs	r1, #148	; 0x94
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7fc fa35 	bl	8000f58 <VL53L0X_WrByte>
 8004aee:	4603      	mov	r3, r0
 8004af0:	461a      	mov	r2, r3
 8004af2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff fd33 	bl	8004568 <VL53L0X_device_read_strobe>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b14:	461a      	mov	r2, r3
 8004b16:	2190      	movs	r1, #144	; 0x90
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7fc fb01 	bl	8001120 <VL53L0X_RdDWord>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	461a      	mov	r2, r3
 8004b22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	0e9b      	lsrs	r3, r3, #26
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b36:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8004b38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b3c:	4413      	add	r3, r2
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	0cdb      	lsrs	r3, r3, #19
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	0b1b      	lsrs	r3, r3, #12
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8004b7e:	227a      	movs	r2, #122	; 0x7a
 8004b80:	2194      	movs	r1, #148	; 0x94
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fc f9e8 	bl	8000f58 <VL53L0X_WrByte>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fce6 	bl	8004568 <VL53L0X_device_read_strobe>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bae:	461a      	mov	r2, r3
 8004bb0:	2190      	movs	r1, #144	; 0x90
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc fab4 	bl	8001120 <VL53L0X_RdDWord>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	0f9b      	lsrs	r3, r3, #30
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd0:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8004bd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004bd6:	4413      	add	r3, r2
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	0ddb      	lsrs	r3, r3, #23
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	0a5b      	lsrs	r3, r3, #9
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	089b      	lsrs	r3, r3, #2
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80f1 	beq.w	8004e0c <VL53L0X_get_info_from_device+0x7c8>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004c2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c2e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f040 80ea 	bne.w	8004e0c <VL53L0X_get_info_from_device+0x7c8>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004c38:	227b      	movs	r2, #123	; 0x7b
 8004c3a:	2194      	movs	r1, #148	; 0x94
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fc f98b 	bl	8000f58 <VL53L0X_WrByte>
 8004c42:	4603      	mov	r3, r0
 8004c44:	461a      	mov	r2, r3
 8004c46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fc89 	bl	8004568 <VL53L0X_device_read_strobe>
 8004c56:	4603      	mov	r3, r0
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8004c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2190      	movs	r1, #144	; 0x90
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7fc fa57 	bl	8001120 <VL53L0X_RdDWord>
 8004c72:	4603      	mov	r3, r0
 8004c74:	461a      	mov	r2, r3
 8004c76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8004c80:	227c      	movs	r2, #124	; 0x7c
 8004c82:	2194      	movs	r1, #148	; 0x94
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7fc f967 	bl	8000f58 <VL53L0X_WrByte>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fc65 	bl	8004568 <VL53L0X_device_read_strobe>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8004cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2190      	movs	r1, #144	; 0x90
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7fc fa33 	bl	8001120 <VL53L0X_RdDWord>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8004cc8:	2273      	movs	r2, #115	; 0x73
 8004cca:	2194      	movs	r1, #148	; 0x94
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fc f943 	bl	8000f58 <VL53L0X_WrByte>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fc41 	bl	8004568 <VL53L0X_device_read_strobe>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004cf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2190      	movs	r1, #144	; 0x90
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7fc fa0f 	bl	8001120 <VL53L0X_RdDWord>
 8004d02:	4603      	mov	r3, r0
 8004d04:	461a      	mov	r2, r3
 8004d06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8004d18:	2274      	movs	r2, #116	; 0x74
 8004d1a:	2194      	movs	r1, #148	; 0x94
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fc f91b 	bl	8000f58 <VL53L0X_WrByte>
 8004d22:	4603      	mov	r3, r0
 8004d24:	461a      	mov	r2, r3
 8004d26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff fc19 	bl	8004568 <VL53L0X_device_read_strobe>
 8004d36:	4603      	mov	r3, r0
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2190      	movs	r1, #144	; 0x90
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7fc f9e7 	bl	8001120 <VL53L0X_RdDWord>
 8004d52:	4603      	mov	r3, r0
 8004d54:	461a      	mov	r2, r3
 8004d56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8004d64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d66:	4313      	orrs	r3, r2
 8004d68:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8004d6a:	2275      	movs	r2, #117	; 0x75
 8004d6c:	2194      	movs	r1, #148	; 0x94
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fc f8f2 	bl	8000f58 <VL53L0X_WrByte>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fbf0 	bl	8004568 <VL53L0X_device_read_strobe>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004d96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2190      	movs	r1, #144	; 0x90
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fc f9be 	bl	8001120 <VL53L0X_RdDWord>
 8004da4:	4603      	mov	r3, r0
 8004da6:	461a      	mov	r2, r3
 8004da8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8004dba:	2276      	movs	r2, #118	; 0x76
 8004dbc:	2194      	movs	r1, #148	; 0x94
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fc f8ca 	bl	8000f58 <VL53L0X_WrByte>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fbc8 	bl	8004568 <VL53L0X_device_read_strobe>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004de6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004dea:	461a      	mov	r2, r3
 8004dec:	2190      	movs	r1, #144	; 0x90
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fc f996 	bl	8001120 <VL53L0X_RdDWord>
 8004df4:	4603      	mov	r3, r0
 8004df6:	461a      	mov	r2, r3
 8004df8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8004e06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2181      	movs	r1, #129	; 0x81
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fc f8a1 	bl	8000f58 <VL53L0X_WrByte>
 8004e16:	4603      	mov	r3, r0
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8004e24:	2206      	movs	r2, #6
 8004e26:	21ff      	movs	r1, #255	; 0xff
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7fc f895 	bl	8000f58 <VL53L0X_WrByte>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	461a      	mov	r2, r3
 8004e32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8004e3c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004e40:	461a      	mov	r2, r3
 8004e42:	2183      	movs	r1, #131	; 0x83
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7fc f909 	bl	800105c <VL53L0X_RdByte>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8004e58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e5c:	f023 0304 	bic.w	r3, r3, #4
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	2183      	movs	r1, #131	; 0x83
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fc f876 	bl	8000f58 <VL53L0X_WrByte>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	21ff      	movs	r1, #255	; 0xff
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc f86a 	bl	8000f58 <VL53L0X_WrByte>
 8004e84:	4603      	mov	r3, r0
 8004e86:	461a      	mov	r2, r3
 8004e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004e92:	2201      	movs	r2, #1
 8004e94:	2100      	movs	r1, #0
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fc f85e 	bl	8000f58 <VL53L0X_WrByte>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	21ff      	movs	r1, #255	; 0xff
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc f852 	bl	8000f58 <VL53L0X_WrByte>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2180      	movs	r1, #128	; 0x80
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fc f846 	bl	8000f58 <VL53L0X_WrByte>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004eda:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f040 808f 	bne.w	8005002 <VL53L0X_get_info_from_device+0x9be>
 8004ee4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ee8:	2b07      	cmp	r3, #7
 8004eea:	f000 808a 	beq.w	8005002 <VL53L0X_get_info_from_device+0x9be>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d024      	beq.n	8004f42 <VL53L0X_get_info_from_device+0x8fe>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8004ef8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004efc:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d11e      	bne.n	8004f42 <VL53L0X_get_info_from_device+0x8fe>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004f0a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8004f14:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004f18:	2300      	movs	r3, #0
 8004f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f1c:	e00e      	b.n	8004f3c <VL53L0X_get_info_from_device+0x8f8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8004f1e:	f107 0208 	add.w	r2, r7, #8
 8004f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f24:	4413      	add	r3, r2
 8004f26:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8004f32:	460a      	mov	r2, r1
 8004f34:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f38:	3301      	adds	r3, #1
 8004f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3e:	2b05      	cmp	r3, #5
 8004f40:	dded      	ble.n	8004f1e <VL53L0X_get_info_from_device+0x8da>
			}
		}

		if (((option & 2) == 2) &&
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d018      	beq.n	8004f7e <VL53L0X_get_info_from_device+0x93a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8004f4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f50:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d112      	bne.n	8004f7e <VL53L0X_get_info_from_device+0x93a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f58:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f62:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	33f3      	adds	r3, #243	; 0xf3
 8004f70:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8004f72:	f107 0310 	add.w	r3, r7, #16
 8004f76:	4619      	mov	r1, r3
 8004f78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f7a:	f007 fa13 	bl	800c3a4 <strcpy>

		}

		if (((option & 4) == 4) &&
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d030      	beq.n	8004fea <VL53L0X_get_info_from_device+0x9a6>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004f88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f8c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d12a      	bne.n	8004fea <VL53L0X_get_info_from_device+0x9a6>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8004fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa6:	025b      	lsls	r3, r3, #9
 8004fa8:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fae:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8004fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d011      	beq.n	8004fe2 <VL53L0X_get_info_from_device+0x99e>
					OffsetFixed1104_mm =
 8004fbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8004fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fcc:	fb02 f303 	mul.w	r3, r2, r3
 8004fd0:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8004fd2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8004fd6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004fda:	425b      	negs	r3, r3
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8004fe2:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8004fea:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8004ff8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
 8005002:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <VL53L0X_get_info_from_device+0x9f0>)
 8005004:	681c      	ldr	r4, [r3, #0]
 8005006:	f001 ffcf 	bl	8006fa8 <HAL_GetTick>
 800500a:	4603      	mov	r3, r0
 800500c:	461a      	mov	r2, r3
 800500e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005012:	9302      	str	r3, [sp, #8]
 8005014:	4b08      	ldr	r3, [pc, #32]	; (8005038 <VL53L0X_get_info_from_device+0x9f4>)
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	9200      	str	r2, [sp, #0]
 800501a:	4b08      	ldr	r3, [pc, #32]	; (800503c <VL53L0X_get_info_from_device+0x9f8>)
 800501c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005020:	4621      	mov	r1, r4
 8005022:	2001      	movs	r0, #1
 8005024:	f001 ff28 	bl	8006e78 <trace_print_module_function>
	return Status;
 8005028:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800502c:	4618      	mov	r0, r3
 800502e:	3764      	adds	r7, #100	; 0x64
 8005030:	46bd      	mov	sp, r7
 8005032:	bd90      	pop	{r4, r7, pc}
 8005034:	200002cc 	.word	0x200002cc
 8005038:	0800db68 	.word	0x0800db68
 800503c:	0800db10 	.word	0x0800db10

08005040 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b08b      	sub	sp, #44	; 0x2c
 8005044:	af04      	add	r7, sp, #16
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	70fb      	strb	r3, [r7, #3]
	uint64_t PLL_period_ps;
	uint32_t macro_period_vclks;
	uint32_t macro_period_ps;

	LOG_FUNCTION_START("");
 800504c:	4b1b      	ldr	r3, [pc, #108]	; (80050bc <VL53L0X_calc_macro_period_ps+0x7c>)
 800504e:	681c      	ldr	r4, [r3, #0]
 8005050:	f001 ffaa 	bl	8006fa8 <HAL_GetTick>
 8005054:	4603      	mov	r3, r0
 8005056:	461a      	mov	r2, r3
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <VL53L0X_calc_macro_period_ps+0x80>)
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	9200      	str	r2, [sp, #0]
 800505e:	4b19      	ldr	r3, [pc, #100]	; (80050c4 <VL53L0X_calc_macro_period_ps+0x84>)
 8005060:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005064:	4621      	mov	r1, r4
 8005066:	2001      	movs	r0, #1
 8005068:	f001 ff06 	bl	8006e78 <trace_print_module_function>

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800506c:	f240 6377 	movw	r3, #1655	; 0x677
 8005070:	f04f 0400 	mov.w	r4, #0
 8005074:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8005078:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800507c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	fb02 f303 	mul.w	r3, r2, r3
 800508c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
 800508e:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <VL53L0X_calc_macro_period_ps+0x7c>)
 8005090:	681c      	ldr	r4, [r3, #0]
 8005092:	f001 ff89 	bl	8006fa8 <HAL_GetTick>
 8005096:	4603      	mov	r3, r0
 8005098:	461a      	mov	r2, r3
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <VL53L0X_calc_macro_period_ps+0x88>)
 800509c:	9302      	str	r3, [sp, #8]
 800509e:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <VL53L0X_calc_macro_period_ps+0x80>)
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	9200      	str	r2, [sp, #0]
 80050a4:	4b09      	ldr	r3, [pc, #36]	; (80050cc <VL53L0X_calc_macro_period_ps+0x8c>)
 80050a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80050aa:	4621      	mov	r1, r4
 80050ac:	2001      	movs	r0, #1
 80050ae:	f001 fee3 	bl	8006e78 <trace_print_module_function>
	return macro_period_ps;
 80050b2:	68bb      	ldr	r3, [r7, #8]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd90      	pop	{r4, r7, pc}
 80050bc:	200002cc 	.word	0x200002cc
 80050c0:	0800db88 	.word	0x0800db88
 80050c4:	0800dafc 	.word	0x0800dafc
 80050c8:	0800db20 	.word	0x0800db20
 80050cc:	0800db10 	.word	0x0800db10

080050d0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d017      	beq.n	800511a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80050f0:	e005      	b.n	80050fe <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	085b      	lsrs	r3, r3, #1
 80050f6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80050f8:	89fb      	ldrh	r3, [r7, #14]
 80050fa:	3301      	adds	r3, #1
 80050fc:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f4      	bne.n	80050f2 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005108:	89fb      	ldrh	r3, [r7, #14]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	b29b      	uxth	r3, r3
 8005112:	b2db      	uxtb	r3, r3
 8005114:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005116:	4413      	add	r3, r2
 8005118:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800511a:	8afb      	ldrh	r3, [r7, #22]

}
 800511c:	4618      	mov	r0, r3
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr

08005126 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	4603      	mov	r3, r0
 800512e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005138:	88fa      	ldrh	r2, [r7, #6]
 800513a:	0a12      	lsrs	r2, r2, #8
 800513c:	b292      	uxth	r2, r2
 800513e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005140:	3301      	adds	r3, #1
 8005142:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005144:	68fb      	ldr	r3, [r7, #12]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	4619      	mov	r1, r3
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff ff6a 	bl	8005040 <VL53L0X_calc_macro_period_ps>
 800516c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005174:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <VL53L0X_calc_timeout_mclks+0x50>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	099b      	lsrs	r3, r3, #6
 800517c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005184:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	441a      	add	r2, r3
	timeout_period_mclks =
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8005196:	69fb      	ldr	r3, [r7, #28]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	10624dd3 	.word	0x10624dd3

080051a4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	807b      	strh	r3, [r7, #2]
 80051b0:	4613      	mov	r3, r2
 80051b2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80051b8:	787b      	ldrb	r3, [r7, #1]
 80051ba:	4619      	mov	r1, r3
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff ff3f 	bl	8005040 <VL53L0X_calc_macro_period_ps>
 80051c2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80051ca:	4a0a      	ldr	r2, [pc, #40]	; (80051f4 <VL53L0X_calc_timeout_us+0x50>)
 80051cc:	fba2 2303 	umull	r2, r3, r2, r3
 80051d0:	099b      	lsrs	r3, r3, #6
 80051d2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80051d4:	887b      	ldrh	r3, [r7, #2]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	fb02 f303 	mul.w	r3, r2, r3
 80051dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80051e0:	4a04      	ldr	r2, [pc, #16]	; (80051f4 <VL53L0X_calc_timeout_us+0x50>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80051ea:	697b      	ldr	r3, [r7, #20]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	10624dd3 	.word	0x10624dd3

080051f8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08c      	sub	sp, #48	; 0x30
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	460b      	mov	r3, r1
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005206:	2300      	movs	r3, #0
 8005208:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800521e:	7afb      	ldrb	r3, [r7, #11]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <get_sequence_step_timeout+0x38>
 8005224:	7afb      	ldrb	r3, [r7, #11]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d002      	beq.n	8005230 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800522a:	7afb      	ldrb	r3, [r7, #11]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d128      	bne.n	8005282 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005230:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005234:	461a      	mov	r2, r3
 8005236:	2100      	movs	r1, #0
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f7fc fdef 	bl	8001e1c <VL53L0X_GetVcselPulsePeriod>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005244:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005248:	2b00      	cmp	r3, #0
 800524a:	d109      	bne.n	8005260 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800524c:	f107 0320 	add.w	r3, r7, #32
 8005250:	461a      	mov	r2, r3
 8005252:	2146      	movs	r1, #70	; 0x46
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7fb ff01 	bl	800105c <VL53L0X_RdByte>
 800525a:	4603      	mov	r3, r0
 800525c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005260:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005264:	b29b      	uxth	r3, r3
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff ff5d 	bl	8005126 <VL53L0X_decode_timeout>
 800526c:	4603      	mov	r3, r0
 800526e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005270:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005274:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005276:	4619      	mov	r1, r3
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7ff ff93 	bl	80051a4 <VL53L0X_calc_timeout_us>
 800527e:	62b8      	str	r0, [r7, #40]	; 0x28
 8005280:	e092      	b.n	80053a8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005282:	7afb      	ldrb	r3, [r7, #11]
 8005284:	2b03      	cmp	r3, #3
 8005286:	d135      	bne.n	80052f4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005288:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800528c:	461a      	mov	r2, r3
 800528e:	2100      	movs	r1, #0
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f7fc fdc3 	bl	8001e1c <VL53L0X_GetVcselPulsePeriod>
 8005296:	4603      	mov	r3, r0
 8005298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800529c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f040 8081 	bne.w	80053a8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80052a6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80052aa:	461a      	mov	r2, r3
 80052ac:	2100      	movs	r1, #0
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7fc fdb4 	bl	8001e1c <VL53L0X_GetVcselPulsePeriod>
 80052b4:	4603      	mov	r3, r0
 80052b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80052ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80052c2:	f107 031e 	add.w	r3, r7, #30
 80052c6:	461a      	mov	r2, r3
 80052c8:	2151      	movs	r1, #81	; 0x51
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7fb fef0 	bl	80010b0 <VL53L0X_RdWord>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80052d6:	8bfb      	ldrh	r3, [r7, #30]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff ff24 	bl	8005126 <VL53L0X_decode_timeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80052e2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80052e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052e8:	4619      	mov	r1, r3
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f7ff ff5a 	bl	80051a4 <VL53L0X_calc_timeout_us>
 80052f0:	62b8      	str	r0, [r7, #40]	; 0x28
 80052f2:	e059      	b.n	80053a8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80052f4:	7afb      	ldrb	r3, [r7, #11]
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d156      	bne.n	80053a8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80052fa:	f107 0314 	add.w	r3, r7, #20
 80052fe:	4619      	mov	r1, r3
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7fc ff17 	bl	8002134 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01d      	beq.n	800534c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005310:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005314:	461a      	mov	r2, r3
 8005316:	2100      	movs	r1, #0
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7fc fd7f 	bl	8001e1c <VL53L0X_GetVcselPulsePeriod>
 800531e:	4603      	mov	r3, r0
 8005320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8005324:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10f      	bne.n	800534c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800532c:	f107 031e 	add.w	r3, r7, #30
 8005330:	461a      	mov	r2, r3
 8005332:	2151      	movs	r1, #81	; 0x51
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7fb febb 	bl	80010b0 <VL53L0X_RdWord>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005340:	8bfb      	ldrh	r3, [r7, #30]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff feef 	bl	8005126 <VL53L0X_decode_timeout>
 8005348:	4603      	mov	r3, r0
 800534a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800534c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005350:	2b00      	cmp	r3, #0
 8005352:	d109      	bne.n	8005368 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005354:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005358:	461a      	mov	r2, r3
 800535a:	2101      	movs	r1, #1
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f7fc fd5d 	bl	8001e1c <VL53L0X_GetVcselPulsePeriod>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005368:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10f      	bne.n	8005390 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005370:	f107 031c 	add.w	r3, r7, #28
 8005374:	461a      	mov	r2, r3
 8005376:	2171      	movs	r1, #113	; 0x71
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7fb fe99 	bl	80010b0 <VL53L0X_RdWord>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005384:	8bbb      	ldrh	r3, [r7, #28]
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fecd 	bl	8005126 <VL53L0X_decode_timeout>
 800538c:	4603      	mov	r3, r0
 800538e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005390:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005392:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005398:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800539c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800539e:	4619      	mov	r1, r3
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff feff 	bl	80051a4 <VL53L0X_calc_timeout_us>
 80053a6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ac:	601a      	str	r2, [r3, #0]

	return Status;
 80053ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3730      	adds	r7, #48	; 0x30
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b08a      	sub	sp, #40	; 0x28
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	460b      	mov	r3, r1
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80053ce:	7afb      	ldrb	r3, [r7, #11]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <set_sequence_step_timeout+0x26>
 80053d4:	7afb      	ldrb	r3, [r7, #11]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d002      	beq.n	80053e0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80053da:	7afb      	ldrb	r3, [r7, #11]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d138      	bne.n	8005452 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80053e0:	f107 031b 	add.w	r3, r7, #27
 80053e4:	461a      	mov	r2, r3
 80053e6:	2100      	movs	r1, #0
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7fc fd17 	bl	8001e1c <VL53L0X_GetVcselPulsePeriod>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80053f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d11a      	bne.n	8005432 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80053fc:	7efb      	ldrb	r3, [r7, #27]
 80053fe:	461a      	mov	r2, r3
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff fea4 	bl	8005150 <VL53L0X_calc_timeout_mclks>
 8005408:	4603      	mov	r3, r0
 800540a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800540c:	8bbb      	ldrh	r3, [r7, #28]
 800540e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005412:	d903      	bls.n	800541c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8005414:	23ff      	movs	r3, #255	; 0xff
 8005416:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800541a:	e004      	b.n	8005426 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800541c:	8bbb      	ldrh	r3, [r7, #28]
 800541e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8005420:	3b01      	subs	r3, #1
 8005422:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005426:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005432:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005436:	2b00      	cmp	r3, #0
 8005438:	f040 80ab 	bne.w	8005592 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800543c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005440:	461a      	mov	r2, r3
 8005442:	2146      	movs	r1, #70	; 0x46
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f7fb fd87 	bl	8000f58 <VL53L0X_WrByte>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8005450:	e09f      	b.n	8005592 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005452:	7afb      	ldrb	r3, [r7, #11]
 8005454:	2b03      	cmp	r3, #3
 8005456:	d135      	bne.n	80054c4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8005458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800545c:	2b00      	cmp	r3, #0
 800545e:	d11b      	bne.n	8005498 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005460:	f107 031b 	add.w	r3, r7, #27
 8005464:	461a      	mov	r2, r3
 8005466:	2100      	movs	r1, #0
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7fc fcd7 	bl	8001e1c <VL53L0X_GetVcselPulsePeriod>
 800546e:	4603      	mov	r3, r0
 8005470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005474:	7efb      	ldrb	r3, [r7, #27]
 8005476:	461a      	mov	r2, r3
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f7ff fe68 	bl	8005150 <VL53L0X_calc_timeout_mclks>
 8005480:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005482:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8005484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff fe22 	bl	80050d0 <VL53L0X_encode_timeout>
 800548c:	4603      	mov	r3, r0
 800548e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005490:	8b3a      	ldrh	r2, [r7, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005498:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800549c:	2b00      	cmp	r3, #0
 800549e:	d108      	bne.n	80054b2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80054a0:	8b3b      	ldrh	r3, [r7, #24]
 80054a2:	461a      	mov	r2, r3
 80054a4:	2151      	movs	r1, #81	; 0x51
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7fb fd7a 	bl	8000fa0 <VL53L0X_WrWord>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80054b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d16b      	bne.n	8005592 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80054c2:	e066      	b.n	8005592 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80054c4:	7afb      	ldrb	r3, [r7, #11]
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d160      	bne.n	800558c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80054ca:	f107 0310 	add.w	r3, r7, #16
 80054ce:	4619      	mov	r1, r3
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7fc fe2f 	bl	8002134 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80054da:	7cfb      	ldrb	r3, [r7, #19]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01d      	beq.n	800551c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80054e0:	f107 031b 	add.w	r3, r7, #27
 80054e4:	461a      	mov	r2, r3
 80054e6:	2100      	movs	r1, #0
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7fc fc97 	bl	8001e1c <VL53L0X_GetVcselPulsePeriod>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80054f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10f      	bne.n	800551c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80054fc:	f107 0318 	add.w	r3, r7, #24
 8005500:	461a      	mov	r2, r3
 8005502:	2151      	movs	r1, #81	; 0x51
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7fb fdd3 	bl	80010b0 <VL53L0X_RdWord>
 800550a:	4603      	mov	r3, r0
 800550c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8005510:	8b3b      	ldrh	r3, [r7, #24]
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fe07 	bl	8005126 <VL53L0X_decode_timeout>
 8005518:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800551a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800551c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005524:	f107 031b 	add.w	r3, r7, #27
 8005528:	461a      	mov	r2, r3
 800552a:	2101      	movs	r1, #1
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f7fc fc75 	bl	8001e1c <VL53L0X_GetVcselPulsePeriod>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005538:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800553c:	2b00      	cmp	r3, #0
 800553e:	d128      	bne.n	8005592 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005540:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8005542:	461a      	mov	r2, r3
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff fe02 	bl	8005150 <VL53L0X_calc_timeout_mclks>
 800554c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800554e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005550:	6a3a      	ldr	r2, [r7, #32]
 8005552:	4413      	add	r3, r2
 8005554:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8005556:	6a38      	ldr	r0, [r7, #32]
 8005558:	f7ff fdba 	bl	80050d0 <VL53L0X_encode_timeout>
 800555c:	4603      	mov	r3, r0
 800555e:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8005560:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005564:	2b00      	cmp	r3, #0
 8005566:	d108      	bne.n	800557a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8005568:	8bfb      	ldrh	r3, [r7, #30]
 800556a:	461a      	mov	r2, r3
 800556c:	2171      	movs	r1, #113	; 0x71
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7fb fd16 	bl	8000fa0 <VL53L0X_WrWord>
 8005574:	4603      	mov	r3, r0
 8005576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800557a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800557e:	2b00      	cmp	r3, #0
 8005580:	d107      	bne.n	8005592 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800558a:	e002      	b.n	8005592 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800558c:	23fc      	movs	r3, #252	; 0xfc
 800558e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8005592:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005596:	4618      	mov	r0, r3
 8005598:	3728      	adds	r7, #40	; 0x28
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b08a      	sub	sp, #40	; 0x28
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	460b      	mov	r3, r1
 80055a8:	70fb      	strb	r3, [r7, #3]
 80055aa:	4613      	mov	r3, r2
 80055ac:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80055b4:	230c      	movs	r3, #12
 80055b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80055ba:	2312      	movs	r3, #18
 80055bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80055c0:	2308      	movs	r3, #8
 80055c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80055c6:	230e      	movs	r3, #14
 80055c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80055d0:	78bb      	ldrb	r3, [r7, #2]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80055dc:	23fc      	movs	r3, #252	; 0xfc
 80055de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055e2:	e020      	b.n	8005626 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10d      	bne.n	8005606 <VL53L0X_set_vcsel_pulse_period+0x68>
 80055ea:	78ba      	ldrb	r2, [r7, #2]
 80055ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d304      	bcc.n	80055fe <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80055f4:	78ba      	ldrb	r2, [r7, #2]
 80055f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d903      	bls.n	8005606 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80055fe:	23fc      	movs	r3, #252	; 0xfc
 8005600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005604:	e00f      	b.n	8005626 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d10c      	bne.n	8005626 <VL53L0X_set_vcsel_pulse_period+0x88>
 800560c:	78ba      	ldrb	r2, [r7, #2]
 800560e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005612:	429a      	cmp	r2, r3
 8005614:	d304      	bcc.n	8005620 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8005616:	78ba      	ldrb	r2, [r7, #2]
 8005618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800561c:	429a      	cmp	r2, r3
 800561e:	d902      	bls.n	8005626 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005620:	23fc      	movs	r3, #252	; 0xfc
 8005622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8005626:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800562e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005632:	e239      	b.n	8005aa8 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d150      	bne.n	80056dc <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800563a:	78bb      	ldrb	r3, [r7, #2]
 800563c:	2b0c      	cmp	r3, #12
 800563e:	d110      	bne.n	8005662 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8005640:	2218      	movs	r2, #24
 8005642:	2157      	movs	r1, #87	; 0x57
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7fb fc87 	bl	8000f58 <VL53L0X_WrByte>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8005650:	2208      	movs	r2, #8
 8005652:	2156      	movs	r1, #86	; 0x56
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7fb fc7f 	bl	8000f58 <VL53L0X_WrByte>
 800565a:	4603      	mov	r3, r0
 800565c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005660:	e17f      	b.n	8005962 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8005662:	78bb      	ldrb	r3, [r7, #2]
 8005664:	2b0e      	cmp	r3, #14
 8005666:	d110      	bne.n	800568a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8005668:	2230      	movs	r2, #48	; 0x30
 800566a:	2157      	movs	r1, #87	; 0x57
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7fb fc73 	bl	8000f58 <VL53L0X_WrByte>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8005678:	2208      	movs	r2, #8
 800567a:	2156      	movs	r1, #86	; 0x56
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fb fc6b 	bl	8000f58 <VL53L0X_WrByte>
 8005682:	4603      	mov	r3, r0
 8005684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005688:	e16b      	b.n	8005962 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800568a:	78bb      	ldrb	r3, [r7, #2]
 800568c:	2b10      	cmp	r3, #16
 800568e:	d110      	bne.n	80056b2 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8005690:	2240      	movs	r2, #64	; 0x40
 8005692:	2157      	movs	r1, #87	; 0x57
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fb fc5f 	bl	8000f58 <VL53L0X_WrByte>
 800569a:	4603      	mov	r3, r0
 800569c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80056a0:	2208      	movs	r2, #8
 80056a2:	2156      	movs	r1, #86	; 0x56
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7fb fc57 	bl	8000f58 <VL53L0X_WrByte>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80056b0:	e157      	b.n	8005962 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80056b2:	78bb      	ldrb	r3, [r7, #2]
 80056b4:	2b12      	cmp	r3, #18
 80056b6:	f040 8154 	bne.w	8005962 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80056ba:	2250      	movs	r2, #80	; 0x50
 80056bc:	2157      	movs	r1, #87	; 0x57
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fb fc4a 	bl	8000f58 <VL53L0X_WrByte>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80056ca:	2208      	movs	r2, #8
 80056cc:	2156      	movs	r1, #86	; 0x56
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fb fc42 	bl	8000f58 <VL53L0X_WrByte>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80056da:	e142      	b.n	8005962 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	f040 813f 	bne.w	8005962 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80056e4:	78bb      	ldrb	r3, [r7, #2]
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d14c      	bne.n	8005784 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80056ea:	2210      	movs	r2, #16
 80056ec:	2148      	movs	r1, #72	; 0x48
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fb fc32 	bl	8000f58 <VL53L0X_WrByte>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80056fa:	2208      	movs	r2, #8
 80056fc:	2147      	movs	r1, #71	; 0x47
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fb fc2a 	bl	8000f58 <VL53L0X_WrByte>
 8005704:	4603      	mov	r3, r0
 8005706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800570a:	2202      	movs	r2, #2
 800570c:	2132      	movs	r1, #50	; 0x32
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fb fc22 	bl	8000f58 <VL53L0X_WrByte>
 8005714:	4603      	mov	r3, r0
 8005716:	461a      	mov	r2, r3
 8005718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800571c:	4313      	orrs	r3, r2
 800571e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8005722:	220c      	movs	r2, #12
 8005724:	2130      	movs	r1, #48	; 0x30
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fb fc16 	bl	8000f58 <VL53L0X_WrByte>
 800572c:	4603      	mov	r3, r0
 800572e:	461a      	mov	r2, r3
 8005730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005734:	4313      	orrs	r3, r2
 8005736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800573a:	2201      	movs	r2, #1
 800573c:	21ff      	movs	r1, #255	; 0xff
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fb fc0a 	bl	8000f58 <VL53L0X_WrByte>
 8005744:	4603      	mov	r3, r0
 8005746:	461a      	mov	r2, r3
 8005748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800574c:	4313      	orrs	r3, r2
 800574e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005752:	2230      	movs	r2, #48	; 0x30
 8005754:	2130      	movs	r1, #48	; 0x30
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fb fbfe 	bl	8000f58 <VL53L0X_WrByte>
 800575c:	4603      	mov	r3, r0
 800575e:	461a      	mov	r2, r3
 8005760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005764:	4313      	orrs	r3, r2
 8005766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800576a:	2200      	movs	r2, #0
 800576c:	21ff      	movs	r1, #255	; 0xff
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fb fbf2 	bl	8000f58 <VL53L0X_WrByte>
 8005774:	4603      	mov	r3, r0
 8005776:	461a      	mov	r2, r3
 8005778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800577c:	4313      	orrs	r3, r2
 800577e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005782:	e0ee      	b.n	8005962 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8005784:	78bb      	ldrb	r3, [r7, #2]
 8005786:	2b0a      	cmp	r3, #10
 8005788:	d14c      	bne.n	8005824 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800578a:	2228      	movs	r2, #40	; 0x28
 800578c:	2148      	movs	r1, #72	; 0x48
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fb fbe2 	bl	8000f58 <VL53L0X_WrByte>
 8005794:	4603      	mov	r3, r0
 8005796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800579a:	2208      	movs	r2, #8
 800579c:	2147      	movs	r1, #71	; 0x47
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fb fbda 	bl	8000f58 <VL53L0X_WrByte>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80057aa:	2203      	movs	r2, #3
 80057ac:	2132      	movs	r1, #50	; 0x32
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fb fbd2 	bl	8000f58 <VL53L0X_WrByte>
 80057b4:	4603      	mov	r3, r0
 80057b6:	461a      	mov	r2, r3
 80057b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057bc:	4313      	orrs	r3, r2
 80057be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80057c2:	2209      	movs	r2, #9
 80057c4:	2130      	movs	r1, #48	; 0x30
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fb fbc6 	bl	8000f58 <VL53L0X_WrByte>
 80057cc:	4603      	mov	r3, r0
 80057ce:	461a      	mov	r2, r3
 80057d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80057da:	2201      	movs	r2, #1
 80057dc:	21ff      	movs	r1, #255	; 0xff
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fb fbba 	bl	8000f58 <VL53L0X_WrByte>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80057f2:	2220      	movs	r2, #32
 80057f4:	2130      	movs	r1, #48	; 0x30
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fb fbae 	bl	8000f58 <VL53L0X_WrByte>
 80057fc:	4603      	mov	r3, r0
 80057fe:	461a      	mov	r2, r3
 8005800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005804:	4313      	orrs	r3, r2
 8005806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800580a:	2200      	movs	r2, #0
 800580c:	21ff      	movs	r1, #255	; 0xff
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fb fba2 	bl	8000f58 <VL53L0X_WrByte>
 8005814:	4603      	mov	r3, r0
 8005816:	461a      	mov	r2, r3
 8005818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800581c:	4313      	orrs	r3, r2
 800581e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005822:	e09e      	b.n	8005962 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8005824:	78bb      	ldrb	r3, [r7, #2]
 8005826:	2b0c      	cmp	r3, #12
 8005828:	d14c      	bne.n	80058c4 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800582a:	2238      	movs	r2, #56	; 0x38
 800582c:	2148      	movs	r1, #72	; 0x48
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fb fb92 	bl	8000f58 <VL53L0X_WrByte>
 8005834:	4603      	mov	r3, r0
 8005836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800583a:	2208      	movs	r2, #8
 800583c:	2147      	movs	r1, #71	; 0x47
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fb fb8a 	bl	8000f58 <VL53L0X_WrByte>
 8005844:	4603      	mov	r3, r0
 8005846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800584a:	2203      	movs	r2, #3
 800584c:	2132      	movs	r1, #50	; 0x32
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fb fb82 	bl	8000f58 <VL53L0X_WrByte>
 8005854:	4603      	mov	r3, r0
 8005856:	461a      	mov	r2, r3
 8005858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800585c:	4313      	orrs	r3, r2
 800585e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8005862:	2208      	movs	r2, #8
 8005864:	2130      	movs	r1, #48	; 0x30
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fb fb76 	bl	8000f58 <VL53L0X_WrByte>
 800586c:	4603      	mov	r3, r0
 800586e:	461a      	mov	r2, r3
 8005870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005874:	4313      	orrs	r3, r2
 8005876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800587a:	2201      	movs	r2, #1
 800587c:	21ff      	movs	r1, #255	; 0xff
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb fb6a 	bl	8000f58 <VL53L0X_WrByte>
 8005884:	4603      	mov	r3, r0
 8005886:	461a      	mov	r2, r3
 8005888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800588c:	4313      	orrs	r3, r2
 800588e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005892:	2220      	movs	r2, #32
 8005894:	2130      	movs	r1, #48	; 0x30
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fb fb5e 	bl	8000f58 <VL53L0X_WrByte>
 800589c:	4603      	mov	r3, r0
 800589e:	461a      	mov	r2, r3
 80058a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80058aa:	2200      	movs	r2, #0
 80058ac:	21ff      	movs	r1, #255	; 0xff
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fb fb52 	bl	8000f58 <VL53L0X_WrByte>
 80058b4:	4603      	mov	r3, r0
 80058b6:	461a      	mov	r2, r3
 80058b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058bc:	4313      	orrs	r3, r2
 80058be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058c2:	e04e      	b.n	8005962 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80058c4:	78bb      	ldrb	r3, [r7, #2]
 80058c6:	2b0e      	cmp	r3, #14
 80058c8:	d14b      	bne.n	8005962 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80058ca:	2248      	movs	r2, #72	; 0x48
 80058cc:	2148      	movs	r1, #72	; 0x48
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fb fb42 	bl	8000f58 <VL53L0X_WrByte>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 80058da:	2208      	movs	r2, #8
 80058dc:	2147      	movs	r1, #71	; 0x47
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fb fb3a 	bl	8000f58 <VL53L0X_WrByte>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80058ea:	2203      	movs	r2, #3
 80058ec:	2132      	movs	r1, #50	; 0x32
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fb fb32 	bl	8000f58 <VL53L0X_WrByte>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8005902:	2207      	movs	r2, #7
 8005904:	2130      	movs	r1, #48	; 0x30
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fb fb26 	bl	8000f58 <VL53L0X_WrByte>
 800590c:	4603      	mov	r3, r0
 800590e:	461a      	mov	r2, r3
 8005910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005914:	4313      	orrs	r3, r2
 8005916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800591a:	2201      	movs	r2, #1
 800591c:	21ff      	movs	r1, #255	; 0xff
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fb fb1a 	bl	8000f58 <VL53L0X_WrByte>
 8005924:	4603      	mov	r3, r0
 8005926:	461a      	mov	r2, r3
 8005928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800592c:	4313      	orrs	r3, r2
 800592e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005932:	2220      	movs	r2, #32
 8005934:	2130      	movs	r1, #48	; 0x30
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fb fb0e 	bl	8000f58 <VL53L0X_WrByte>
 800593c:	4603      	mov	r3, r0
 800593e:	461a      	mov	r2, r3
 8005940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005944:	4313      	orrs	r3, r2
 8005946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800594a:	2200      	movs	r2, #0
 800594c:	21ff      	movs	r1, #255	; 0xff
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fb fb02 	bl	8000f58 <VL53L0X_WrByte>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800595c:	4313      	orrs	r3, r2
 800595e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8005962:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005966:	2b00      	cmp	r3, #0
 8005968:	d17f      	bne.n	8005a6a <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800596a:	78bb      	ldrb	r3, [r7, #2]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe fdb5 	bl	80044dc <VL53L0X_encode_vcsel_period>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800597e:	2b01      	cmp	r3, #1
 8005980:	d045      	beq.n	8005a0e <VL53L0X_set_vcsel_pulse_period+0x470>
 8005982:	e06e      	b.n	8005a62 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8005984:	f107 0314 	add.w	r3, r7, #20
 8005988:	461a      	mov	r2, r3
 800598a:	2103      	movs	r1, #3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff fc33 	bl	80051f8 <get_sequence_step_timeout>
 8005992:	4603      	mov	r3, r0
 8005994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8005998:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800599c:	2b00      	cmp	r3, #0
 800599e:	d109      	bne.n	80059b4 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80059a0:	f107 0310 	add.w	r3, r7, #16
 80059a4:	461a      	mov	r2, r3
 80059a6:	2102      	movs	r1, #2
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff fc25 	bl	80051f8 <get_sequence_step_timeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80059b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d109      	bne.n	80059d0 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80059bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80059c0:	461a      	mov	r2, r3
 80059c2:	2150      	movs	r1, #80	; 0x50
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fb fac7 	bl	8000f58 <VL53L0X_WrByte>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80059d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d108      	bne.n	80059ea <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	461a      	mov	r2, r3
 80059dc:	2103      	movs	r1, #3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff fceb 	bl	80053ba <set_sequence_step_timeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80059ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d108      	bne.n	8005a04 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	461a      	mov	r2, r3
 80059f6:	2102      	movs	r1, #2
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff fcde 	bl	80053ba <set_sequence_step_timeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	78ba      	ldrb	r2, [r7, #2]
 8005a08:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8005a0c:	e02e      	b.n	8005a6c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8005a0e:	f107 0318 	add.w	r3, r7, #24
 8005a12:	461a      	mov	r2, r3
 8005a14:	2104      	movs	r1, #4
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff fbee 	bl	80051f8 <get_sequence_step_timeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8005a22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8005a2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005a2e:	461a      	mov	r2, r3
 8005a30:	2170      	movs	r1, #112	; 0x70
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fb fa90 	bl	8000f58 <VL53L0X_WrByte>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8005a3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d108      	bne.n	8005a58 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	2104      	movs	r1, #4
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff fcb4 	bl	80053ba <set_sequence_step_timeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	78ba      	ldrb	r2, [r7, #2]
 8005a5c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8005a60:	e004      	b.n	8005a6c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005a62:	23fc      	movs	r3, #252	; 0xfc
 8005a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a68:	e000      	b.n	8005a6c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8005a6a:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8005a6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005a7a:	69f9      	ldr	r1, [r7, #28]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7fc f90d 	bl	8001c9c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8005a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8005a90:	f107 010f 	add.w	r1, r7, #15
 8005a94:	2301      	movs	r3, #1
 8005a96:	2200      	movs	r2, #0
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7fe fc0e 	bl	80042ba <VL53L0X_perform_phase_calibration>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8005aa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3728      	adds	r7, #40	; 0x28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8005ac2:	7afb      	ldrb	r3, [r7, #11]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <VL53L0X_get_vcsel_pulse_period+0x1e>
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d00a      	beq.n	8005ae2 <VL53L0X_get_vcsel_pulse_period+0x32>
 8005acc:	e013      	b.n	8005af6 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005ace:	f107 0316 	add.w	r3, r7, #22
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	2150      	movs	r1, #80	; 0x50
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f7fb fac0 	bl	800105c <VL53L0X_RdByte>
 8005adc:	4603      	mov	r3, r0
 8005ade:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005ae0:	e00b      	b.n	8005afa <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005ae2:	f107 0316 	add.w	r3, r7, #22
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2170      	movs	r1, #112	; 0x70
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7fb fab6 	bl	800105c <VL53L0X_RdByte>
 8005af0:	4603      	mov	r3, r0
 8005af2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005af4:	e001      	b.n	8005afa <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005af6:	23fc      	movs	r3, #252	; 0xfc
 8005af8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d107      	bne.n	8005b12 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8005b02:	7dbb      	ldrb	r3, [r7, #22]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe fcd7 	bl	80044b8 <VL53L0X_decode_vcsel_period>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	701a      	strb	r2, [r3, #0]

	return Status;
 8005b12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005b20:	b590      	push	{r4, r7, lr}
 8005b22:	b097      	sub	sp, #92	; 0x5c
 8005b24:	af04      	add	r7, sp, #16
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005b30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005b34:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005b36:	f240 7376 	movw	r3, #1910	; 0x776
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8005b3c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005b40:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005b42:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005b46:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8005b48:	f240 234e 	movw	r3, #590	; 0x24e
 8005b4c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8005b4e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005b54:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005b5a:	f240 2326 	movw	r3, #550	; 0x226
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8005b64:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005b68:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");
 8005b6e:	4b81      	ldr	r3, [pc, #516]	; (8005d74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 8005b70:	681c      	ldr	r4, [r3, #0]
 8005b72:	f001 fa19 	bl	8006fa8 <HAL_GetTick>
 8005b76:	4603      	mov	r3, r0
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4b7f      	ldr	r3, [pc, #508]	; (8005d78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 8005b7c:	9301      	str	r3, [sp, #4]
 8005b7e:	9200      	str	r2, [sp, #0]
 8005b80:	4b7e      	ldr	r3, [pc, #504]	; (8005d7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x25c>)
 8005b82:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005b86:	4621      	mov	r1, r4
 8005b88:	2001      	movs	r0, #1
 8005b8a:	f001 f975 	bl	8006e78 <trace_print_module_function>

	if (MeasurementTimingBudgetMicroSeconds
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d205      	bcs.n	8005ba2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x82>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b96:	23fc      	movs	r3, #252	; 0xfc
 8005b98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8005b9c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005ba0:	e0e3      	b.n	8005d6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8005ba2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005bae:	f107 0314 	add.w	r3, r7, #20
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7fc fabd 	bl	8002134 <VL53L0X_GetSequenceStepEnables>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8005bc0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d16e      	bne.n	8005ca6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
		(SchedulerSequenceSteps.TccOn  ||
 8005bc8:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d105      	bne.n	8005bda <VL53L0X_set_measurement_timing_budget_micro_seconds+0xba>
		SchedulerSequenceSteps.MsrcOn ||
 8005bce:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <VL53L0X_set_measurement_timing_budget_micro_seconds+0xba>
		SchedulerSequenceSteps.DssOn)) {
 8005bd4:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d065      	beq.n	8005ca6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8005bda:	f107 0310 	add.w	r3, r7, #16
 8005bde:	461a      	mov	r2, r3
 8005be0:	2102      	movs	r1, #2
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff fb08 	bl	80051f8 <get_sequence_step_timeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8005bee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
			return Status;
 8005bf6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005bfa:	e0b6      	b.n	8005d6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8005bfc:	7d3b      	ldrb	r3, [r7, #20]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00f      	beq.n	8005c22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8005c02:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8005c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c06:	4413      	add	r3, r2
 8005c08:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d204      	bcs.n	8005c1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xfc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8005c12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	643b      	str	r3, [r7, #64]	; 0x40
 8005c1a:	e002      	b.n	8005c22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005c1c:	23fc      	movs	r3, #252	; 0xfc
 8005c1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8005c22:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d015      	beq.n	8005c56 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x136>
			LOG_FUNCTION_END(Status);
 8005c2a:	4b52      	ldr	r3, [pc, #328]	; (8005d74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 8005c2c:	681c      	ldr	r4, [r3, #0]
 8005c2e:	f001 f9bb 	bl	8006fa8 <HAL_GetTick>
 8005c32:	4603      	mov	r3, r0
 8005c34:	461a      	mov	r2, r3
 8005c36:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005c3a:	9302      	str	r3, [sp, #8]
 8005c3c:	4b4e      	ldr	r3, [pc, #312]	; (8005d78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 8005c3e:	9301      	str	r3, [sp, #4]
 8005c40:	9200      	str	r2, [sp, #0]
 8005c42:	4b4f      	ldr	r3, [pc, #316]	; (8005d80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 8005c44:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005c48:	4621      	mov	r1, r4
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	f001 f914 	bl	8006e78 <trace_print_module_function>
			return Status;
 8005c50:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005c54:	e089      	b.n	8005d6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8005c56:	7dbb      	ldrb	r3, [r7, #22]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d011      	beq.n	8005c80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x160>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	4413      	add	r3, r2
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d204      	bcs.n	8005c78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x158>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005c6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	643b      	str	r3, [r7, #64]	; 0x40
 8005c76:	e016      	b.n	8005ca6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005c78:	23fc      	movs	r3, #252	; 0xfc
 8005c7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005c7e:	e012      	b.n	8005ca6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8005c80:	7d7b      	ldrb	r3, [r7, #21]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00f      	beq.n	8005ca6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c8a:	4413      	add	r3, r2
 8005c8c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d204      	bcs.n	8005ca0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x180>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c9e:	e002      	b.n	8005ca6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ca0:	23fc      	movs	r3, #252	; 0xfc
 8005ca2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005ca6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d015      	beq.n	8005cda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1ba>
		LOG_FUNCTION_END(Status);
 8005cae:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 8005cb0:	681c      	ldr	r4, [r3, #0]
 8005cb2:	f001 f979 	bl	8006fa8 <HAL_GetTick>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005cbe:	9302      	str	r3, [sp, #8]
 8005cc0:	4b2d      	ldr	r3, [pc, #180]	; (8005d78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	9200      	str	r2, [sp, #0]
 8005cc6:	4b2e      	ldr	r3, [pc, #184]	; (8005d80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 8005cc8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005ccc:	4621      	mov	r1, r4
 8005cce:	2001      	movs	r0, #1
 8005cd0:	f001 f8d2 	bl	8006e78 <trace_print_module_function>
		return Status;
 8005cd4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005cd8:	e047      	b.n	8005d6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d019      	beq.n	8005d14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f4>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8005ce0:	f107 030c 	add.w	r3, r7, #12
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	2103      	movs	r1, #3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff fa85 	bl	80051f8 <get_sequence_step_timeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf8:	4413      	add	r3, r2
 8005cfa:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d204      	bcs.n	8005d0e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1ee>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8005d04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d0c:	e002      	b.n	8005d14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f4>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005d0e:	23fc      	movs	r3, #252	; 0xfc
 8005d10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8005d14:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d111      	bne.n	8005d40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x220>
		SchedulerSequenceSteps.FinalRangeOn) {
 8005d1c:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00e      	beq.n	8005d40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x220>

		FinalRangeTimingBudgetMicroSeconds -=
 8005d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8005d2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d2c:	2104      	movs	r1, #4
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff fb43 	bl	80053ba <set_sequence_step_timeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
 8005d40:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 8005d42:	681c      	ldr	r4, [r3, #0]
 8005d44:	f001 f930 	bl	8006fa8 <HAL_GetTick>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005d50:	9302      	str	r3, [sp, #8]
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 8005d54:	9301      	str	r3, [sp, #4]
 8005d56:	9200      	str	r2, [sp, #0]
 8005d58:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 8005d5a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005d5e:	4621      	mov	r1, r4
 8005d60:	2001      	movs	r0, #1
 8005d62:	f001 f889 	bl	8006e78 <trace_print_module_function>

	return Status;
 8005d66:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	374c      	adds	r7, #76	; 0x4c
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd90      	pop	{r4, r7, pc}
 8005d72:	bf00      	nop
 8005d74:	200002cc 	.word	0x200002cc
 8005d78:	0800dba8 	.word	0x0800dba8
 8005d7c:	0800dafc 	.word	0x0800dafc
 8005d80:	0800db10 	.word	0x0800db10

08005d84 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005d84:	b590      	push	{r4, r7, lr}
 8005d86:	b095      	sub	sp, #84	; 0x54
 8005d88:	af04      	add	r7, sp, #16
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005d94:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005d98:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005d9a:	f240 7376 	movw	r3, #1910	; 0x776
 8005d9e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8005da0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005da6:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005daa:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8005dac:	f240 234e 	movw	r3, #590	; 0x24e
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8005db2:	f240 23b2 	movw	r3, #690	; 0x2b2
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005db8:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005dbe:	f240 2326 	movw	r3, #550	; 0x226
 8005dc2:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");
 8005dc8:	4b62      	ldr	r3, [pc, #392]	; (8005f54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 8005dca:	681c      	ldr	r4, [r3, #0]
 8005dcc:	f001 f8ec 	bl	8006fa8 <HAL_GetTick>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	4b60      	ldr	r3, [pc, #384]	; (8005f58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	9200      	str	r2, [sp, #0]
 8005dda:	4b60      	ldr	r3, [pc, #384]	; (8005f5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d8>)
 8005ddc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005de0:	4621      	mov	r1, r4
 8005de2:	2001      	movs	r0, #1
 8005de4:	f001 f848 	bl	8006e78 <trace_print_module_function>

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8005de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dec:	441a      	add	r2, r3
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005df2:	f107 0318 	add.w	r3, r7, #24
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7fc f99b 	bl	8002134 <VL53L0X_GetSequenceStepEnables>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8005e04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d015      	beq.n	8005e38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb4>
		LOG_FUNCTION_END(Status);
 8005e0c:	4b51      	ldr	r3, [pc, #324]	; (8005f54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 8005e0e:	681c      	ldr	r4, [r3, #0]
 8005e10:	f001 f8ca 	bl	8006fa8 <HAL_GetTick>
 8005e14:	4603      	mov	r3, r0
 8005e16:	461a      	mov	r2, r3
 8005e18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005e1c:	9302      	str	r3, [sp, #8]
 8005e1e:	4b4e      	ldr	r3, [pc, #312]	; (8005f58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 8005e20:	9301      	str	r3, [sp, #4]
 8005e22:	9200      	str	r2, [sp, #0]
 8005e24:	4b4e      	ldr	r3, [pc, #312]	; (8005f60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1dc>)
 8005e26:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	2001      	movs	r0, #1
 8005e2e:	f001 f823 	bl	8006e78 <trace_print_module_function>
		return Status;
 8005e32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005e36:	e088      	b.n	8005f4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c6>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8005e38:	7e3b      	ldrb	r3, [r7, #24]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d105      	bne.n	8005e4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		SchedulerSequenceSteps.MsrcOn ||
 8005e3e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		SchedulerSequenceSteps.DssOn) {
 8005e44:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d030      	beq.n	8005eac <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>

		Status = get_sequence_step_timeout(Dev,
 8005e4a:	f107 0310 	add.w	r3, r7, #16
 8005e4e:	461a      	mov	r2, r3
 8005e50:	2102      	movs	r1, #2
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff f9d0 	bl	80051f8 <get_sequence_step_timeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8005e5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d122      	bne.n	8005eac <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
			if (SchedulerSequenceSteps.TccOn) {
 8005e66:	7e3b      	ldrb	r3, [r7, #24]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf8>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005e70:	6939      	ldr	r1, [r7, #16]
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005e76:	441a      	add	r2, r3
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8005e7c:	7ebb      	ldrb	r3, [r7, #26]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x112>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8005e86:	6939      	ldr	r1, [r7, #16]
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	440b      	add	r3, r1
 8005e8c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005e8e:	441a      	add	r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	e00a      	b.n	8005eac <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8005e96:	7e7b      	ldrb	r3, [r7, #25]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005ea0:	6939      	ldr	r1, [r7, #16]
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005ea6:	441a      	add	r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005eac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d114      	bne.n	8005ede <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8005eb4:	7efb      	ldrb	r3, [r7, #27]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d011      	beq.n	8005ede <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
			Status = get_sequence_step_timeout(Dev,
 8005eba:	f107 030c 	add.w	r3, r7, #12
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	2103      	movs	r1, #3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff f998 	bl	80051f8 <get_sequence_step_timeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005ed8:	441a      	add	r2, r3
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ede:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d114      	bne.n	8005f10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8005ee6:	7f3b      	ldrb	r3, [r7, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d011      	beq.n	8005f10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
			Status = get_sequence_step_timeout(Dev,
 8005eec:	f107 0314 	add.w	r3, r7, #20
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2104      	movs	r1, #4
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff f97f 	bl	80051f8 <get_sequence_step_timeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8005f04:	6979      	ldr	r1, [r7, #20]
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005f0a:	441a      	add	r2, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d103      	bne.n	8005f20 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x19c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
 8005f20:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 8005f22:	681c      	ldr	r4, [r3, #0]
 8005f24:	f001 f840 	bl	8006fa8 <HAL_GetTick>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005f30:	9302      	str	r3, [sp, #8]
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 8005f34:	9301      	str	r3, [sp, #4]
 8005f36:	9200      	str	r2, [sp, #0]
 8005f38:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1dc>)
 8005f3a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005f3e:	4621      	mov	r1, r4
 8005f40:	2001      	movs	r0, #1
 8005f42:	f000 ff99 	bl	8006e78 <trace_print_module_function>
	return Status;
 8005f46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3744      	adds	r7, #68	; 0x44
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd90      	pop	{r4, r7, pc}
 8005f52:	bf00      	nop
 8005f54:	200002cc 	.word	0x200002cc
 8005f58:	0800dbdc 	.word	0x0800dbdc
 8005f5c:	0800dafc 	.word	0x0800dafc
 8005f60:	0800db10 	.word	0x0800db10

08005f64 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8005f64:	b590      	push	{r4, r7, lr}
 8005f66:	b08d      	sub	sp, #52	; 0x34
 8005f68:	af04      	add	r7, sp, #16
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberOfWrites;
	uint8_t Address;
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");
 8005f72:	4b7f      	ldr	r3, [pc, #508]	; (8006170 <VL53L0X_load_tuning_settings+0x20c>)
 8005f74:	681c      	ldr	r4, [r3, #0]
 8005f76:	f001 f817 	bl	8006fa8 <HAL_GetTick>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4b7d      	ldr	r3, [pc, #500]	; (8006174 <VL53L0X_load_tuning_settings+0x210>)
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	9200      	str	r2, [sp, #0]
 8005f84:	4b7c      	ldr	r3, [pc, #496]	; (8006178 <VL53L0X_load_tuning_settings+0x214>)
 8005f86:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	f000 ff73 	bl	8006e78 <trace_print_module_function>

	Index = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005f96:	e0c6      	b.n	8006126 <VL53L0X_load_tuning_settings+0x1c2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	74fb      	strb	r3, [r7, #19]
		Index++;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	2bff      	cmp	r3, #255	; 0xff
 8005fac:	f040 808d 	bne.w	80060ca <VL53L0X_load_tuning_settings+0x166>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	747b      	strb	r3, [r7, #17]
			Index++;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8005fc0:	7c7b      	ldrb	r3, [r7, #17]
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d87e      	bhi.n	80060c4 <VL53L0X_load_tuning_settings+0x160>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <VL53L0X_load_tuning_settings+0x68>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08005fdd 	.word	0x08005fdd
 8005fd0:	08006017 	.word	0x08006017
 8005fd4:	08006051 	.word	0x08006051
 8005fd8:	0800608b 	.word	0x0800608b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	743b      	strb	r3, [r7, #16]
				Index++;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005ffc:	7c3b      	ldrb	r3, [r7, #16]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	b29a      	uxth	r2, r3
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	b29b      	uxth	r3, r3
 8006008:	4413      	add	r3, r2
 800600a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	89ba      	ldrh	r2, [r7, #12]
 8006010:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8006014:	e087      	b.n	8006126 <VL53L0X_load_tuning_settings+0x1c2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	4413      	add	r3, r2
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	743b      	strb	r3, [r7, #16]
				Index++;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	3301      	adds	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	4413      	add	r3, r2
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	3301      	adds	r3, #1
 8006034:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006036:	7c3b      	ldrb	r3, [r7, #16]
 8006038:	b29b      	uxth	r3, r3
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	b29a      	uxth	r2, r3
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	b29b      	uxth	r3, r3
 8006042:	4413      	add	r3, r2
 8006044:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	89ba      	ldrh	r2, [r7, #12]
 800604a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800604e:	e06a      	b.n	8006126 <VL53L0X_load_tuning_settings+0x1c2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	4413      	add	r3, r2
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	743b      	strb	r3, [r7, #16]
				Index++;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	3301      	adds	r3, #1
 800605e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	4413      	add	r3, r2
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	73fb      	strb	r3, [r7, #15]
				Index++;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	3301      	adds	r3, #1
 800606e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006070:	7c3b      	ldrb	r3, [r7, #16]
 8006072:	b29b      	uxth	r3, r3
 8006074:	021b      	lsls	r3, r3, #8
 8006076:	b29a      	uxth	r2, r3
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	b29b      	uxth	r3, r3
 800607c:	4413      	add	r3, r2
 800607e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	89ba      	ldrh	r2, [r7, #12]
 8006084:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8006088:	e04d      	b.n	8006126 <VL53L0X_load_tuning_settings+0x1c2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	4413      	add	r3, r2
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	743b      	strb	r3, [r7, #16]
				Index++;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	3301      	adds	r3, #1
 8006098:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	4413      	add	r3, r2
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	73fb      	strb	r3, [r7, #15]
				Index++;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	3301      	adds	r3, #1
 80060a8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80060aa:	7c3b      	ldrb	r3, [r7, #16]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	4413      	add	r3, r2
 80060b8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	89ba      	ldrh	r2, [r7, #12]
 80060be:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80060c2:	e030      	b.n	8006126 <VL53L0X_load_tuning_settings+0x1c2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80060c4:	23fc      	movs	r3, #252	; 0xfc
 80060c6:	77fb      	strb	r3, [r7, #31]
 80060c8:	e02d      	b.n	8006126 <VL53L0X_load_tuning_settings+0x1c2>
			}

		} else if (NumberOfWrites <= 4) {
 80060ca:	7cfb      	ldrb	r3, [r7, #19]
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d828      	bhi.n	8006122 <VL53L0X_load_tuning_settings+0x1be>
			Address = *(pTuningSettingBuffer + Index);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	4413      	add	r3, r2
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	74bb      	strb	r3, [r7, #18]
			Index++;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	3301      	adds	r3, #1
 80060de:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80060e0:	2300      	movs	r3, #0
 80060e2:	61bb      	str	r3, [r7, #24]
 80060e4:	e00f      	b.n	8006106 <VL53L0X_load_tuning_settings+0x1a2>
				localBuffer[i] = *(pTuningSettingBuffer +
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	4413      	add	r3, r2
 80060ec:	7819      	ldrb	r1, [r3, #0]
 80060ee:	f107 0208 	add.w	r2, r7, #8
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	4413      	add	r3, r2
 80060f6:	460a      	mov	r2, r1
 80060f8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	3301      	adds	r3, #1
 80060fe:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	3301      	adds	r3, #1
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	7cfb      	ldrb	r3, [r7, #19]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	429a      	cmp	r2, r3
 800610c:	dbeb      	blt.n	80060e6 <VL53L0X_load_tuning_settings+0x182>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800610e:	7cfb      	ldrb	r3, [r7, #19]
 8006110:	f107 0208 	add.w	r2, r7, #8
 8006114:	7cb9      	ldrb	r1, [r7, #18]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fa fec2 	bl	8000ea0 <VL53L0X_WriteMulti>
 800611c:	4603      	mov	r3, r0
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e001      	b.n	8006126 <VL53L0X_load_tuning_settings+0x1c2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006122:	23fc      	movs	r3, #252	; 0xfc
 8006124:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	4413      	add	r3, r2
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d004      	beq.n	800613c <VL53L0X_load_tuning_settings+0x1d8>
 8006132:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006136:	2b00      	cmp	r3, #0
 8006138:	f43f af2e 	beq.w	8005f98 <VL53L0X_load_tuning_settings+0x34>
		}
	}

	LOG_FUNCTION_END(Status);
 800613c:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <VL53L0X_load_tuning_settings+0x20c>)
 800613e:	681c      	ldr	r4, [r3, #0]
 8006140:	f000 ff32 	bl	8006fa8 <HAL_GetTick>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800614c:	9302      	str	r3, [sp, #8]
 800614e:	4b09      	ldr	r3, [pc, #36]	; (8006174 <VL53L0X_load_tuning_settings+0x210>)
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	9200      	str	r2, [sp, #0]
 8006154:	4b09      	ldr	r3, [pc, #36]	; (800617c <VL53L0X_load_tuning_settings+0x218>)
 8006156:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800615a:	4621      	mov	r1, r4
 800615c:	2001      	movs	r0, #1
 800615e:	f000 fe8b 	bl	8006e78 <trace_print_module_function>
	return Status;
 8006162:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3724      	adds	r7, #36	; 0x24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd90      	pop	{r4, r7, pc}
 800616e:	bf00      	nop
 8006170:	200002cc 	.word	0x200002cc
 8006174:	0800dc10 	.word	0x0800dc10
 8006178:	0800dafc 	.word	0x0800dafc
 800617c:	0800db10 	.word	0x0800db10

08006180 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800618c:	2300      	movs	r3, #0
 800618e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006196:	f107 0313 	add.w	r3, r7, #19
 800619a:	4619      	mov	r1, r3
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7fc f8ad 	bl	80022fc <VL53L0X_GetXTalkCompensationEnable>
 80061a2:	4603      	mov	r3, r0
 80061a4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80061a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d111      	bne.n	80061d2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80061ae:	7cfb      	ldrb	r3, [r7, #19]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	8a9b      	ldrh	r3, [r3, #20]
 80061be:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	fb02 f303 	mul.w	r3, r2, r3
 80061c6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	3380      	adds	r3, #128	; 0x80
 80061cc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80061d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3720      	adds	r7, #32
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b089      	sub	sp, #36	; 0x24
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061ec:	2300      	movs	r3, #0
 80061ee:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");
 80061f0:	4b16      	ldr	r3, [pc, #88]	; (800624c <VL53L0X_get_total_signal_rate+0x6c>)
 80061f2:	681c      	ldr	r4, [r3, #0]
 80061f4:	f000 fed8 	bl	8006fa8 <HAL_GetTick>
 80061f8:	4603      	mov	r3, r0
 80061fa:	461a      	mov	r2, r3
 80061fc:	4b14      	ldr	r3, [pc, #80]	; (8006250 <VL53L0X_get_total_signal_rate+0x70>)
 80061fe:	9301      	str	r3, [sp, #4]
 8006200:	9200      	str	r2, [sp, #0]
 8006202:	4b14      	ldr	r3, [pc, #80]	; (8006254 <VL53L0X_get_total_signal_rate+0x74>)
 8006204:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006208:	4621      	mov	r1, r4
 800620a:	2001      	movs	r0, #1
 800620c:	f000 fe34 	bl	8006e78 <trace_print_module_function>

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8006218:	f107 0310 	add.w	r3, r7, #16
 800621c:	461a      	mov	r2, r3
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff ffad 	bl	8006180 <VL53L0X_get_total_xtalk_rate>
 8006226:	4603      	mov	r3, r0
 8006228:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800622a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d105      	bne.n	800623e <VL53L0X_get_total_signal_rate+0x5e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	441a      	add	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	601a      	str	r2, [r3, #0]

	return Status;
 800623e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006242:	4618      	mov	r0, r3
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	bd90      	pop	{r4, r7, pc}
 800624a:	bf00      	nop
 800624c:	200002cc 	.word	0x200002cc
 8006250:	0800dc30 	.word	0x0800dc30
 8006254:	0800dafc 	.word	0x0800dafc

08006258 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8006258:	b590      	push	{r4, r7, lr}
 800625a:	b09f      	sub	sp, #124	; 0x7c
 800625c:	af04      	add	r7, sp, #16
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8006266:	2312      	movs	r3, #18
 8006268:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800626a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800626e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006270:	2342      	movs	r3, #66	; 0x42
 8006272:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8006274:	2306      	movs	r3, #6
 8006276:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006278:	2307      	movs	r3, #7
 800627a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800627c:	2300      	movs	r3, #0
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");
 8006282:	4b97      	ldr	r3, [pc, #604]	; (80064e0 <VL53L0X_calc_dmax+0x288>)
 8006284:	681c      	ldr	r4, [r3, #0]
 8006286:	f000 fe8f 	bl	8006fa8 <HAL_GetTick>
 800628a:	4603      	mov	r3, r0
 800628c:	461a      	mov	r2, r3
 800628e:	4b95      	ldr	r3, [pc, #596]	; (80064e4 <VL53L0X_calc_dmax+0x28c>)
 8006290:	9301      	str	r3, [sp, #4]
 8006292:	9200      	str	r2, [sp, #0]
 8006294:	4b94      	ldr	r3, [pc, #592]	; (80064e8 <VL53L0X_calc_dmax+0x290>)
 8006296:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800629a:	4621      	mov	r1, r4
 800629c:	2001      	movs	r0, #1
 800629e:	f000 fdeb 	bl	8006e78 <trace_print_module_function>

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80062a8:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80062b0:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80062b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062b6:	fb02 f303 	mul.w	r3, r2, r3
 80062ba:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80062bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062be:	3380      	adds	r3, #128	; 0x80
 80062c0:	0a1b      	lsrs	r3, r3, #8
 80062c2:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80062c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062c8:	fb02 f303 	mul.w	r3, r2, r3
 80062cc:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01b      	beq.n	8006310 <VL53L0X_calc_dmax+0xb8>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	029b      	lsls	r3, r3, #10
 80062dc:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80062e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e4:	4413      	add	r3, r2
 80062e6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80062e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80062f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80062f4:	4613      	mov	r3, r2
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	4413      	add	r3, r2
 80062fa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80062fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006300:	fb02 f303 	mul.w	r3, r2, r3
 8006304:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8006306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006308:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800630c:	0c1b      	lsrs	r3, r3, #16
 800630e:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006314:	fb02 f303 	mul.w	r3, r2, r3
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006320:	0c1b      	lsrs	r3, r3, #16
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006328:	fb02 f303 	mul.w	r3, r2, r3
 800632c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800632e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006330:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8006338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800633a:	085a      	lsrs	r2, r3, #1
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	441a      	add	r2, r3
 8006340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006342:	fbb2 f3f3 	udiv	r3, r2, r3
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800634c:	fb02 f303 	mul.w	r3, r2, r3
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006358:	d302      	bcc.n	8006360 <VL53L0X_calc_dmax+0x108>
		minSignalNeeded_p3 = 0xfff00000;
 800635a:	4b64      	ldr	r3, [pc, #400]	; (80064ec <VL53L0X_calc_dmax+0x294>)
 800635c:	663b      	str	r3, [r7, #96]	; 0x60
 800635e:	e016      	b.n	800638e <VL53L0X_calc_dmax+0x136>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8006360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006362:	085a      	lsrs	r2, r3, #1
 8006364:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006366:	441a      	add	r2, r3
 8006368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636a:	fbb2 f3f3 	udiv	r3, r2, r3
 800636e:	67fb      	str	r3, [r7, #124]	; 0x7c
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006370:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006374:	fb02 f303 	mul.w	r3, r2, r3
 8006378:	67fb      	str	r3, [r7, #124]	; 0x7c

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800637a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800637c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006380:	0c1b      	lsrs	r3, r3, #16
 8006382:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006386:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006388:	fb02 f303 	mul.w	r3, r2, r3
 800638c:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800638e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006390:	039b      	lsls	r3, r3, #14
 8006392:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006396:	4a56      	ldr	r2, [pc, #344]	; (80064f0 <VL53L0X_calc_dmax+0x298>)
 8006398:	fba2 2303 	umull	r2, r3, r2, r3
 800639c:	099b      	lsrs	r3, r3, #6
 800639e:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a4:	fb02 f303 	mul.w	r3, r2, r3
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80063aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063ae:	fb02 f303 	mul.w	r3, r2, r3
 80063b2:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	3308      	adds	r3, #8
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80063bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80063c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c6:	4613      	mov	r3, r2
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4413      	add	r3, r2
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80063d6:	0b9b      	lsrs	r3, r3, #14
 80063d8:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80063da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063de:	4413      	add	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80063e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	4413      	add	r3, r2
 80063ec:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f8:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	039b      	lsls	r3, r3, #14
 80063fe:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4413      	add	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006412:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006418:	fb02 f303 	mul.w	r3, r2, r3
 800641c:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006424:	4a32      	ldr	r2, [pc, #200]	; (80064f0 <VL53L0X_calc_dmax+0x298>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	099b      	lsrs	r3, r3, #6
 800642c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800643a:	4a2d      	ldr	r2, [pc, #180]	; (80064f0 <VL53L0X_calc_dmax+0x298>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	099b      	lsrs	r3, r3, #6
 8006442:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8006444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006446:	3380      	adds	r3, #128	; 0x80
 8006448:	0a1b      	lsrs	r3, r3, #8
 800644a:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <VL53L0X_calc_dmax+0x20c>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	085a      	lsrs	r2, r3, #1
 8006456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006458:	441a      	add	r2, r3
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006460:	65bb      	str	r3, [r7, #88]	; 0x58
 8006462:	e001      	b.n	8006468 <VL53L0X_calc_dmax+0x210>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8006468:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800646a:	f7fe f849 	bl	8004500 <VL53L0X_isqrt>
 800646e:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d008      	beq.n	8006488 <VL53L0X_calc_dmax+0x230>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	085a      	lsrs	r2, r3, #1
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	441a      	add	r2, r3
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006486:	e001      	b.n	800648c <VL53L0X_calc_dmax+0x234>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800648c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800648e:	f7fe f837 	bl	8004500 <VL53L0X_isqrt>
 8006492:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8006494:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d903      	bls.n	80064ac <VL53L0X_calc_dmax+0x254>
		*pdmax_mm = dmaxAmbient;
 80064a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064aa:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 80064ac:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <VL53L0X_calc_dmax+0x288>)
 80064ae:	681c      	ldr	r4, [r3, #0]
 80064b0:	f000 fd7a 	bl	8006fa8 <HAL_GetTick>
 80064b4:	4603      	mov	r3, r0
 80064b6:	461a      	mov	r2, r3
 80064b8:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80064bc:	9302      	str	r3, [sp, #8]
 80064be:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <VL53L0X_calc_dmax+0x28c>)
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	9200      	str	r2, [sp, #0]
 80064c4:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <VL53L0X_calc_dmax+0x29c>)
 80064c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80064ca:	4621      	mov	r1, r4
 80064cc:	2001      	movs	r0, #1
 80064ce:	f000 fcd3 	bl	8006e78 <trace_print_module_function>

	return Status;
 80064d2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	376c      	adds	r7, #108	; 0x6c
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd90      	pop	{r4, r7, pc}
 80064de:	bf00      	nop
 80064e0:	200002cc 	.word	0x200002cc
 80064e4:	0800dc50 	.word	0x0800dc50
 80064e8:	0800dafc 	.word	0x0800dafc
 80064ec:	fff00000 	.word	0xfff00000
 80064f0:	10624dd3 	.word	0x10624dd3
 80064f4:	0800db10 	.word	0x0800db10

080064f8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80064f8:	b590      	push	{r4, r7, lr}
 80064fa:	b0b5      	sub	sp, #212	; 0xd4
 80064fc:	af04      	add	r7, sp, #16
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8006506:	f44f 7348 	mov.w	r3, #800	; 0x320
 800650a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800650e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8006516:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800651a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800651e:	f241 235c 	movw	r3, #4700	; 0x125c
 8006522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8006526:	4baf      	ldr	r3, [pc, #700]	; (80067e4 <VL53L0X_calc_sigma_estimate+0x2ec>)
 8006528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800652c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006530:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8006532:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8006536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800653a:	fbb2 f3f3 	udiv	r3, r2, r3
 800653e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8006540:	4ba9      	ldr	r3, [pc, #676]	; (80067e8 <VL53L0X_calc_sigma_estimate+0x2f0>)
 8006542:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8006544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006548:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800654a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800654e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8006550:	f240 6377 	movw	r3, #1655	; 0x677
 8006554:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006556:	2300      	movs	r3, #0
 8006558:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * @{
	 *
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");
 800655c:	4ba3      	ldr	r3, [pc, #652]	; (80067ec <VL53L0X_calc_sigma_estimate+0x2f4>)
 800655e:	681c      	ldr	r4, [r3, #0]
 8006560:	f000 fd22 	bl	8006fa8 <HAL_GetTick>
 8006564:	4603      	mov	r3, r0
 8006566:	461a      	mov	r2, r3
 8006568:	4ba1      	ldr	r3, [pc, #644]	; (80067f0 <VL53L0X_calc_sigma_estimate+0x2f8>)
 800656a:	9301      	str	r3, [sp, #4]
 800656c:	9200      	str	r2, [sp, #0]
 800656e:	4ba1      	ldr	r3, [pc, #644]	; (80067f4 <VL53L0X_calc_sigma_estimate+0x2fc>)
 8006570:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006574:	4621      	mov	r1, r4
 8006576:	2001      	movs	r0, #1
 8006578:	f000 fc7e 	bl	8006e78 <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800658a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800658e:	0c1b      	lsrs	r3, r3, #16
 8006590:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8006598:	f107 0310 	add.w	r3, r7, #16
 800659c:	461a      	mov	r2, r3
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f7ff fe1d 	bl	80061e0 <VL53L0X_get_total_signal_rate>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80065ac:	f107 0314 	add.w	r3, r7, #20
 80065b0:	461a      	mov	r2, r3
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff fde3 	bl	8006180 <VL53L0X_get_total_xtalk_rate>
 80065ba:	4603      	mov	r3, r0
 80065bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
 80065ca:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80065cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80065d2:	0c1b      	lsrs	r3, r3, #16
 80065d4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
 80065e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80065e4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80065e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d902      	bls.n	80065f4 <VL53L0X_calc_sigma_estimate+0xfc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80065ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80065f4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d168      	bne.n	80066ce <VL53L0X_calc_sigma_estimate+0x1d6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006602:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800660c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006610:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006614:	461a      	mov	r2, r3
 8006616:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f7fe fd98 	bl	8005150 <VL53L0X_calc_timeout_mclks>
 8006620:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8006632:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006636:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800663a:	461a      	mov	r2, r3
 800663c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7fe fd85 	bl	8005150 <VL53L0X_calc_timeout_mclks>
 8006646:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8006648:	2303      	movs	r3, #3
 800664a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800664e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006652:	2b08      	cmp	r3, #8
 8006654:	d102      	bne.n	800665c <VL53L0X_calc_sigma_estimate+0x164>
			vcselWidth = 2;
 8006656:	2302      	movs	r3, #2
 8006658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800665c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800665e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006660:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8006662:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006666:	fb02 f303 	mul.w	r3, r2, r3
 800666a:	02db      	lsls	r3, r3, #11
 800666c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006670:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006674:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006678:	4a5f      	ldr	r2, [pc, #380]	; (80067f8 <VL53L0X_calc_sigma_estimate+0x300>)
 800667a:	fba2 2303 	umull	r2, r3, r2, r3
 800667e:	099b      	lsrs	r3, r3, #6
 8006680:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8006684:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006688:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006692:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006696:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800669a:	4a57      	ldr	r2, [pc, #348]	; (80067f8 <VL53L0X_calc_sigma_estimate+0x300>)
 800669c:	fba2 2303 	umull	r2, r3, r2, r3
 80066a0:	099b      	lsrs	r3, r3, #6
 80066a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	3380      	adds	r3, #128	; 0x80
 80066aa:	0a1b      	lsrs	r3, r3, #8
 80066ac:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80066b4:	fb02 f303 	mul.w	r3, r2, r3
 80066b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80066bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066c0:	3380      	adds	r3, #128	; 0x80
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	021b      	lsls	r3, r3, #8
 80066cc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80066ce:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d015      	beq.n	8006702 <VL53L0X_calc_sigma_estimate+0x20a>
		LOG_FUNCTION_END(Status);
 80066d6:	4b45      	ldr	r3, [pc, #276]	; (80067ec <VL53L0X_calc_sigma_estimate+0x2f4>)
 80066d8:	681c      	ldr	r4, [r3, #0]
 80066da:	f000 fc65 	bl	8006fa8 <HAL_GetTick>
 80066de:	4603      	mov	r3, r0
 80066e0:	461a      	mov	r2, r3
 80066e2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80066e6:	9302      	str	r3, [sp, #8]
 80066e8:	4b41      	ldr	r3, [pc, #260]	; (80067f0 <VL53L0X_calc_sigma_estimate+0x2f8>)
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	9200      	str	r2, [sp, #0]
 80066ee:	4b43      	ldr	r3, [pc, #268]	; (80067fc <VL53L0X_calc_sigma_estimate+0x304>)
 80066f0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80066f4:	4621      	mov	r1, r4
 80066f6:	2001      	movs	r0, #1
 80066f8:	f000 fbbe 	bl	8006e78 <trace_print_module_function>
		return Status;
 80066fc:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006700:	e17f      	b.n	8006a02 <VL53L0X_calc_sigma_estimate+0x50a>
	}

	if (peakSignalRate_kcps == 0) {
 8006702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10c      	bne.n	8006722 <VL53L0X_calc_sigma_estimate+0x22a>
		*pSigmaEstimate = cSigmaEstMax;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800670e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006716:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	e15a      	b.n	80069d8 <VL53L0X_calc_sigma_estimate+0x4e0>
	} else {
		if (vcselTotalEventsRtn < 1)
 8006722:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006726:	2b00      	cmp	r3, #0
 8006728:	d102      	bne.n	8006730 <VL53L0X_calc_sigma_estimate+0x238>
			vcselTotalEventsRtn = 1;
 800672a:	2301      	movs	r3, #1
 800672c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8006730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006734:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8006736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006738:	041a      	lsls	r2, r3, #16
 800673a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800673c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8006744:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800674a:	429a      	cmp	r2, r3
 800674c:	d902      	bls.n	8006754 <VL53L0X_calc_sigma_estimate+0x25c>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800674e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8006754:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006758:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800675c:	fb02 f303 	mul.w	r3, r2, r3
 8006760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8006764:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006768:	4613      	mov	r3, r2
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4618      	mov	r0, r3
 8006772:	f7fd fec5 	bl	8004500 <VL53L0X_isqrt>
 8006776:	4603      	mov	r3, r0
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	891b      	ldrh	r3, [r3, #8]
 8006780:	461a      	mov	r2, r3
 8006782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006784:	fb02 f303 	mul.w	r3, r2, r3
 8006788:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800678a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800678c:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800678e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006792:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006794:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006796:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800679a:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <VL53L0X_calc_sigma_estimate+0x300>)
 800679c:	fba2 2303 	umull	r2, r3, r2, r3
 80067a0:	099b      	lsrs	r3, r3, #6
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80067a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067a6:	041b      	lsls	r3, r3, #16
 80067a8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80067ac:	4a12      	ldr	r2, [pc, #72]	; (80067f8 <VL53L0X_calc_sigma_estimate+0x300>)
 80067ae:	fba2 2303 	umull	r2, r3, r2, r3
 80067b2:	099b      	lsrs	r3, r3, #6
 80067b4:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80067b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80067bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bfb8      	it	lt
 80067c8:	425b      	neglt	r3, r3
 80067ca:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80067cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	7e1b      	ldrb	r3, [r3, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d012      	beq.n	8006800 <VL53L0X_calc_sigma_estimate+0x308>
			pwMult = 1 << 16;
 80067da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067e2:	e03c      	b.n	800685e <VL53L0X_calc_sigma_estimate+0x366>
 80067e4:	028f87ae 	.word	0x028f87ae
 80067e8:	0006999a 	.word	0x0006999a
 80067ec:	200002cc 	.word	0x200002cc
 80067f0:	0800dc64 	.word	0x0800dc64
 80067f4:	0800dafc 	.word	0x0800dafc
 80067f8:	10624dd3 	.word	0x10624dd3
 80067fc:	0800db10 	.word	0x0800db10
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8006800:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006806:	fbb2 f3f3 	udiv	r3, r2, r3
 800680a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800680e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006810:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8006814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006818:	fb02 f303 	mul.w	r3, r2, r3
 800681c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8006820:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006824:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006826:	4413      	add	r3, r2
 8006828:	0c1b      	lsrs	r3, r3, #16
 800682a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800682e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006832:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800683a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8006844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006848:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800684c:	fb02 f303 	mul.w	r3, r2, r3
 8006850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8006854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006858:	0b9b      	lsrs	r3, r3, #14
 800685a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800685e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006864:	fb02 f303 	mul.w	r3, r2, r3
 8006868:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006870:	0c1b      	lsrs	r3, r3, #16
 8006872:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006878:	fb02 f303 	mul.w	r3, r2, r3
 800687c:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800687e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006882:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800688a:	0c1b      	lsrs	r3, r3, #16
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8006898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	4413      	add	r3, r2
 800689e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80068a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068a2:	f7fd fe2d 	bl	8004500 <VL53L0X_isqrt>
 80068a6:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	041b      	lsls	r3, r3, #16
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	3332      	adds	r3, #50	; 0x32
 80068b2:	4a56      	ldr	r2, [pc, #344]	; (8006a0c <VL53L0X_calc_sigma_estimate+0x514>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	095a      	lsrs	r2, r3, #5
 80068ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80068c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068c8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80068cc:	fb02 f303 	mul.w	r3, r2, r3
 80068d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80068d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068d8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80068dc:	3308      	adds	r3, #8
 80068de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80068e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068e6:	4a4a      	ldr	r2, [pc, #296]	; (8006a10 <VL53L0X_calc_sigma_estimate+0x518>)
 80068e8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ec:	0b5b      	lsrs	r3, r3, #13
 80068ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80068f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d902      	bls.n	8006902 <VL53L0X_calc_sigma_estimate+0x40a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80068fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8006902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006906:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800690a:	4413      	add	r3, r2
 800690c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8006910:	4a40      	ldr	r2, [pc, #256]	; (8006a14 <VL53L0X_calc_sigma_estimate+0x51c>)
 8006912:	fba2 2303 	umull	r2, r3, r2, r3
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800691e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006922:	441a      	add	r2, r3
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800692a:	4618      	mov	r0, r3
 800692c:	f7fd fde8 	bl	8004500 <VL53L0X_isqrt>
 8006930:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800693e:	4a35      	ldr	r2, [pc, #212]	; (8006a14 <VL53L0X_calc_sigma_estimate+0x51c>)
 8006940:	fba2 2303 	umull	r2, r3, r2, r3
 8006944:	099b      	lsrs	r3, r3, #6
 8006946:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8006948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800694c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006950:	fb02 f303 	mul.w	r3, r2, r3
 8006954:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	69fa      	ldr	r2, [r7, #28]
 800695a:	fb02 f303 	mul.w	r3, r2, r3
 800695e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8006960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	4413      	add	r3, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f7fd fdca 	bl	8004500 <VL53L0X_isqrt>
 800696c:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006974:	fb02 f303 	mul.w	r3, r2, r3
 8006978:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800697c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <VL53L0X_calc_sigma_estimate+0x49e>
 8006982:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <VL53L0X_calc_sigma_estimate+0x49e>
 800698a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800698e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006992:	429a      	cmp	r2, r3
 8006994:	d903      	bls.n	800699e <VL53L0X_calc_sigma_estimate+0x4a6>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8006996:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800699a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80069a4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80069b0:	6939      	ldr	r1, [r7, #16]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	9303      	str	r3, [sp, #12]
 80069b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069ba:	9302      	str	r3, [sp, #8]
 80069bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7ff fc43 	bl	8006258 <VL53L0X_calc_dmax>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			sigmaEstimateP2,
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
 80069d8:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <VL53L0X_calc_sigma_estimate+0x520>)
 80069da:	681c      	ldr	r4, [r3, #0]
 80069dc:	f000 fae4 	bl	8006fa8 <HAL_GetTick>
 80069e0:	4603      	mov	r3, r0
 80069e2:	461a      	mov	r2, r3
 80069e4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80069e8:	9302      	str	r3, [sp, #8]
 80069ea:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <VL53L0X_calc_sigma_estimate+0x524>)
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	9200      	str	r2, [sp, #0]
 80069f0:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <VL53L0X_calc_sigma_estimate+0x528>)
 80069f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80069f6:	4621      	mov	r1, r4
 80069f8:	2001      	movs	r0, #1
 80069fa:	f000 fa3d 	bl	8006e78 <trace_print_module_function>
	return Status;
 80069fe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	37c4      	adds	r7, #196	; 0xc4
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd90      	pop	{r4, r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	51eb851f 	.word	0x51eb851f
 8006a10:	d1b71759 	.word	0xd1b71759
 8006a14:	10624dd3 	.word	0x10624dd3
 8006a18:	200002cc 	.word	0x200002cc
 8006a1c:	0800dc64 	.word	0x0800dc64
 8006a20:	0800db10 	.word	0x0800db10

08006a24 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8006a24:	b590      	push	{r4, r7, lr}
 8006a26:	b095      	sub	sp, #84	; 0x54
 8006a28:	af04      	add	r7, sp, #16
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	460b      	mov	r3, r1
 8006a32:	72fb      	strb	r3, [r7, #11]
 8006a34:	4613      	mov	r3, r2
 8006a36:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	613b      	str	r3, [r7, #16]
	FixPoint1616_t LastSignalRefMcps;

	LOG_FUNCTION_START("");
 8006a76:	4bc6      	ldr	r3, [pc, #792]	; (8006d90 <VL53L0X_get_pal_range_status+0x36c>)
 8006a78:	681c      	ldr	r4, [r3, #0]
 8006a7a:	f000 fa95 	bl	8006fa8 <HAL_GetTick>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	4bc4      	ldr	r3, [pc, #784]	; (8006d94 <VL53L0X_get_pal_range_status+0x370>)
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	9200      	str	r2, [sp, #0]
 8006a88:	4bc3      	ldr	r3, [pc, #780]	; (8006d98 <VL53L0X_get_pal_range_status+0x374>)
 8006a8a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006a8e:	4621      	mov	r1, r4
 8006a90:	2001      	movs	r0, #1
 8006a92:	f000 f9f1 	bl	8006e78 <trace_print_module_function>
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8006a96:	7afb      	ldrb	r3, [r7, #11]
 8006a98:	10db      	asrs	r3, r3, #3
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8006aa4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d017      	beq.n	8006adc <VL53L0X_get_pal_range_status+0xb8>
 8006aac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ab0:	2b05      	cmp	r3, #5
 8006ab2:	d013      	beq.n	8006adc <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 5 ||
 8006ab4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ab8:	2b07      	cmp	r3, #7
 8006aba:	d00f      	beq.n	8006adc <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 7 ||
 8006abc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ac0:	2b0c      	cmp	r3, #12
 8006ac2:	d00b      	beq.n	8006adc <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 12 ||
 8006ac4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ac8:	2b0d      	cmp	r3, #13
 8006aca:	d007      	beq.n	8006adc <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 13 ||
 8006acc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ad0:	2b0e      	cmp	r3, #14
 8006ad2:	d003      	beq.n	8006adc <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 14 ||
 8006ad4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ad8:	2b0f      	cmp	r3, #15
 8006ada:	d103      	bne.n	8006ae4 <VL53L0X_get_pal_range_status+0xc0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006ae2:	e002      	b.n	8006aea <VL53L0X_get_pal_range_status+0xc6>
	} else {
		NoneFlag = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006aea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d109      	bne.n	8006b06 <VL53L0X_get_pal_range_status+0xe2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006af2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006af6:	461a      	mov	r2, r3
 8006af8:	2100      	movs	r1, #0
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f7fb fd52 	bl	80025a4 <VL53L0X_GetLimitCheckEnable>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8006b06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d02e      	beq.n	8006b6c <VL53L0X_get_pal_range_status+0x148>
 8006b0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d12a      	bne.n	8006b6c <VL53L0X_get_pal_range_status+0x148>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8006b16:	f107 0310 	add.w	r3, r7, #16
 8006b1a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006b1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7ff fce9 	bl	80064f8 <VL53L0X_calc_sigma_estimate>
 8006b26:	4603      	mov	r3, r0
 8006b28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8006b2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <VL53L0X_get_pal_range_status+0x118>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b3a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8006b3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d113      	bne.n	8006b6c <VL53L0X_get_pal_range_status+0x148>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8006b44:	f107 0320 	add.w	r3, r7, #32
 8006b48:	461a      	mov	r2, r3
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7fb fe01 	bl	8002754 <VL53L0X_GetLimitCheckValue>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d006      	beq.n	8006b6c <VL53L0X_get_pal_range_status+0x148>
				(SigmaEstimate > SigmaLimitValue))
 8006b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b60:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d902      	bls.n	8006b6c <VL53L0X_get_pal_range_status+0x148>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006b6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <VL53L0X_get_pal_range_status+0x164>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006b74:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8006b78:	461a      	mov	r2, r3
 8006b7a:	2102      	movs	r1, #2
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f7fb fd11 	bl	80025a4 <VL53L0X_GetLimitCheckEnable>
 8006b82:	4603      	mov	r3, r0
 8006b84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8006b88:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d044      	beq.n	8006c1a <VL53L0X_get_pal_range_status+0x1f6>
 8006b90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d140      	bne.n	8006c1a <VL53L0X_get_pal_range_status+0x1f6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006b98:	f107 031c 	add.w	r3, r7, #28
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2102      	movs	r1, #2
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7fb fdd7 	bl	8002754 <VL53L0X_GetLimitCheckValue>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8006bac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d107      	bne.n	8006bc4 <VL53L0X_get_pal_range_status+0x1a0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	21ff      	movs	r1, #255	; 0xff
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7fa f9cd 	bl	8000f58 <VL53L0X_WrByte>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8006bc4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d109      	bne.n	8006be0 <VL53L0X_get_pal_range_status+0x1bc>
			Status = VL53L0X_RdWord(Dev,
 8006bcc:	f107 0316 	add.w	r3, r7, #22
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	21b6      	movs	r1, #182	; 0xb6
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f7fa fa6b 	bl	80010b0 <VL53L0X_RdWord>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8006be0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d107      	bne.n	8006bf8 <VL53L0X_get_pal_range_status+0x1d4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006be8:	2200      	movs	r2, #0
 8006bea:	21ff      	movs	r1, #255	; 0xff
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7fa f9b3 	bl	8000f58 <VL53L0X_WrByte>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8006bf8:	8afb      	ldrh	r3, [r7, #22]
 8006bfa:	025b      	lsls	r3, r3, #9
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c02:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <VL53L0X_get_pal_range_status+0x1f6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8006c0c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8006c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d902      	bls.n	8006c1a <VL53L0X_get_pal_range_status+0x1f6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8006c14:	2301      	movs	r3, #1
 8006c16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006c1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d109      	bne.n	8006c36 <VL53L0X_get_pal_range_status+0x212>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c26:	461a      	mov	r2, r3
 8006c28:	2103      	movs	r1, #3
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f7fb fcba 	bl	80025a4 <VL53L0X_GetLimitCheckEnable>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8006c36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d023      	beq.n	8006c86 <VL53L0X_get_pal_range_status+0x262>
 8006c3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d11f      	bne.n	8006c86 <VL53L0X_get_pal_range_status+0x262>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8006c46:	893b      	ldrh	r3, [r7, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d102      	bne.n	8006c52 <VL53L0X_get_pal_range_status+0x22e>
			SignalRatePerSpad = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c50:	e005      	b.n	8006c5e <VL53L0X_get_pal_range_status+0x23a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	021a      	lsls	r2, r3, #8
 8006c56:	893b      	ldrh	r3, [r7, #8]
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006c5e:	f107 0318 	add.w	r3, r7, #24
 8006c62:	461a      	mov	r2, r3
 8006c64:	2103      	movs	r1, #3
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7fb fd74 	bl	8002754 <VL53L0X_GetLimitCheckValue>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d006      	beq.n	8006c86 <VL53L0X_get_pal_range_status+0x262>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8006c78:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8006c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d202      	bcs.n	8006c86 <VL53L0X_get_pal_range_status+0x262>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d14a      	bne.n	8006d24 <VL53L0X_get_pal_range_status+0x300>
		if (NoneFlag == 1) {
 8006c8e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d103      	bne.n	8006c9e <VL53L0X_get_pal_range_status+0x27a>
			*pPalRangeStatus = 255;	 /* NONE */
 8006c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c98:	22ff      	movs	r2, #255	; 0xff
 8006c9a:	701a      	strb	r2, [r3, #0]
 8006c9c:	e042      	b.n	8006d24 <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 1 ||
 8006c9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d007      	beq.n	8006cb6 <VL53L0X_get_pal_range_status+0x292>
 8006ca6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d003      	beq.n	8006cb6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 2 ||
 8006cae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d103      	bne.n	8006cbe <VL53L0X_get_pal_range_status+0x29a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8006cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cb8:	2205      	movs	r2, #5
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	e032      	b.n	8006d24 <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 6 ||
 8006cbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cc2:	2b06      	cmp	r3, #6
 8006cc4:	d003      	beq.n	8006cce <VL53L0X_get_pal_range_status+0x2aa>
 8006cc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cca:	2b09      	cmp	r3, #9
 8006ccc:	d103      	bne.n	8006cd6 <VL53L0X_get_pal_range_status+0x2b2>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8006cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	701a      	strb	r2, [r3, #0]
 8006cd4:	e026      	b.n	8006d24 <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 8 ||
 8006cd6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	d007      	beq.n	8006cee <VL53L0X_get_pal_range_status+0x2ca>
 8006cde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ce2:	2b0a      	cmp	r3, #10
 8006ce4:	d003      	beq.n	8006cee <VL53L0X_get_pal_range_status+0x2ca>
					DeviceRangeStatusInternal == 10 ||
 8006ce6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d103      	bne.n	8006cf6 <VL53L0X_get_pal_range_status+0x2d2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8006cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	e016      	b.n	8006d24 <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 4 ||
 8006cf6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d003      	beq.n	8006d06 <VL53L0X_get_pal_range_status+0x2e2>
 8006cfe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d103      	bne.n	8006d0e <VL53L0X_get_pal_range_status+0x2ea>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8006d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d08:	2202      	movs	r2, #2
 8006d0a:	701a      	strb	r2, [r3, #0]
 8006d0c:	e00a      	b.n	8006d24 <VL53L0X_get_pal_range_status+0x300>
		} else if (SigmaLimitflag == 1) {
 8006d0e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d103      	bne.n	8006d1e <VL53L0X_get_pal_range_status+0x2fa>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8006d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d18:	2201      	movs	r2, #1
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	e002      	b.n	8006d24 <VL53L0X_get_pal_range_status+0x300>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8006d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8006d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d102      	bne.n	8006d32 <VL53L0X_get_pal_range_status+0x30e>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8006d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d2e:	2200      	movs	r2, #0
 8006d30:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006d32:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8006d36:	461a      	mov	r2, r3
 8006d38:	2101      	movs	r1, #1
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f7fb fc32 	bl	80025a4 <VL53L0X_GetLimitCheckEnable>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8006d46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d156      	bne.n	8006dfc <VL53L0X_get_pal_range_status+0x3d8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8006d4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <VL53L0X_get_pal_range_status+0x33a>
 8006d56:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d103      	bne.n	8006d66 <VL53L0X_get_pal_range_status+0x342>
			Temp8 = 1;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d64:	e002      	b.n	8006d6c <VL53L0X_get_pal_range_status+0x348>
		else
			Temp8 = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006d72:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8006d76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d003      	beq.n	8006d86 <VL53L0X_get_pal_range_status+0x362>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8006d7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <VL53L0X_get_pal_range_status+0x378>
			Temp8 = 1;
 8006d86:	2301      	movs	r3, #1
 8006d88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d8c:	e009      	b.n	8006da2 <VL53L0X_get_pal_range_status+0x37e>
 8006d8e:	bf00      	nop
 8006d90:	200002cc 	.word	0x200002cc
 8006d94:	0800dc80 	.word	0x0800dc80
 8006d98:	0800dafc 	.word	0x0800dafc
		else
			Temp8 = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006da8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8006dac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <VL53L0X_get_pal_range_status+0x398>
 8006db4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d103      	bne.n	8006dc4 <VL53L0X_get_pal_range_status+0x3a0>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dc2:	e002      	b.n	8006dca <VL53L0X_get_pal_range_status+0x3a6>
		else
			Temp8 = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006dd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8006dd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <VL53L0X_get_pal_range_status+0x3c0>
 8006ddc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d103      	bne.n	8006dec <VL53L0X_get_pal_range_status+0x3c8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8006de4:	2301      	movs	r3, #1
 8006de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dea:	e002      	b.n	8006df2 <VL53L0X_get_pal_range_status+0x3ce>
		else
			Temp8 = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006df8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <VL53L0X_get_pal_range_status+0x40c>)
 8006dfe:	681c      	ldr	r4, [r3, #0]
 8006e00:	f000 f8d2 	bl	8006fa8 <HAL_GetTick>
 8006e04:	4603      	mov	r3, r0
 8006e06:	461a      	mov	r2, r3
 8006e08:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006e0c:	9302      	str	r3, [sp, #8]
 8006e0e:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <VL53L0X_get_pal_range_status+0x410>)
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	9200      	str	r2, [sp, #0]
 8006e14:	4b08      	ldr	r3, [pc, #32]	; (8006e38 <VL53L0X_get_pal_range_status+0x414>)
 8006e16:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	f000 f82b 	bl	8006e78 <trace_print_module_function>
	return Status;
 8006e22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3744      	adds	r7, #68	; 0x44
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd90      	pop	{r4, r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	200002cc 	.word	0x200002cc
 8006e34:	0800dc80 	.word	0x0800dc80
 8006e38:	0800db10 	.word	0x0800db10

08006e3c <VL53L0X_trace_config>:
uint32_t _trace_modules = TRACE_MODULE_NONE;
uint32_t _trace_functions = TRACE_FUNCTION_NONE;

#if defined(VL53L0X_LOG_ENABLE) && (TRACE_UART==1)
int32_t VL53L0X_trace_config(char *filename, uint32_t modules, uint32_t level, uint32_t functions)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
    int STATUS = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]

    _trace_functions = functions;
 8006e4e:	4a07      	ldr	r2, [pc, #28]	; (8006e6c <VL53L0X_trace_config+0x30>)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6013      	str	r3, [r2, #0]
    _trace_level = level;
 8006e54:	4a06      	ldr	r2, [pc, #24]	; (8006e70 <VL53L0X_trace_config+0x34>)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6013      	str	r3, [r2, #0]
    _trace_modules = modules;
 8006e5a:	4a06      	ldr	r2, [pc, #24]	; (8006e74 <VL53L0X_trace_config+0x38>)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	6013      	str	r3, [r2, #0]

    return STATUS;
 8006e60:	697b      	ldr	r3, [r7, #20]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr
 8006e6c:	20000964 	.word	0x20000964
 8006e70:	200002cc 	.word	0x200002cc
 8006e74:	20000960 	.word	0x20000960

08006e78 <trace_print_module_function>:


void trace_print_module_function(uint32_t module, uint32_t level, uint32_t function, const char *format, ...)
{
 8006e78:	b408      	push	{r3}
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b087      	sub	sp, #28
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	607a      	str	r2, [r7, #4]
    if ( ((level <=_trace_level) && ((module & _trace_modules) > 0))
 8006e86:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <trace_print_module_function+0x4c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d805      	bhi.n	8006e9c <trace_print_module_function+0x24>
 8006e90:	4b0d      	ldr	r3, [pc, #52]	; (8006ec8 <trace_print_module_function+0x50>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4013      	ands	r3, r2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d105      	bne.n	8006ea8 <trace_print_module_function+0x30>
        || ((function & _trace_functions) > 0) )
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <trace_print_module_function+0x54>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d006      	beq.n	8006eb6 <trace_print_module_function+0x3e>
    {
    	va_list arg_list;
        va_start(arg_list, format);
 8006ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006eac:	617b      	str	r3, [r7, #20]
        trace_vprintf( format, arg_list);
 8006eae:	6979      	ldr	r1, [r7, #20]
 8006eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eb2:	f7f9 fe5d 	bl	8000b70 <uart_vprintf>
        va_end(arg_list);
    }
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ec0:	b001      	add	sp, #4
 8006ec2:	4770      	bx	lr
 8006ec4:	200002cc 	.word	0x200002cc
 8006ec8:	20000960 	.word	0x20000960
 8006ecc:	20000964 	.word	0x20000964

08006ed0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006ed4:	4b12      	ldr	r3, [pc, #72]	; (8006f20 <SystemInit+0x50>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a11      	ldr	r2, [pc, #68]	; (8006f20 <SystemInit+0x50>)
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <SystemInit+0x50>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8006ee6:	4b0e      	ldr	r3, [pc, #56]	; (8006f20 <SystemInit+0x50>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a0d      	ldr	r2, [pc, #52]	; (8006f20 <SystemInit+0x50>)
 8006eec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006ef0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006ef4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8006ef6:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <SystemInit+0x50>)
 8006ef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006efc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006efe:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <SystemInit+0x50>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <SystemInit+0x50>)
 8006f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006f0a:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <SystemInit+0x50>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <SystemInit+0x54>)
 8006f12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f16:	609a      	str	r2, [r3, #8]
#endif
}
 8006f18:	bf00      	nop
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr
 8006f20:	40021000 	.word	0x40021000
 8006f24:	e000ed00 	.word	0xe000ed00

08006f28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f2c:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <HAL_Init+0x28>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a07      	ldr	r2, [pc, #28]	; (8006f50 <HAL_Init+0x28>)
 8006f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f38:	2003      	movs	r0, #3
 8006f3a:	f000 f91d 	bl	8007178 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f3e:	200f      	movs	r0, #15
 8006f40:	f000 f808 	bl	8006f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f44:	f005 f942 	bl	800c1cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40022000 	.word	0x40022000

08006f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8006f5c:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <HAL_InitTick+0x30>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a09      	ldr	r2, [pc, #36]	; (8006f88 <HAL_InitTick+0x34>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	099b      	lsrs	r3, r3, #6
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 f93a 	bl	80071e2 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8006f6e:	2200      	movs	r2, #0
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	f04f 30ff 	mov.w	r0, #4294967295
 8006f76:	f000 f90a 	bl	800718e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	200002d0 	.word	0x200002d0
 8006f88:	10624dd3 	.word	0x10624dd3

08006f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  uwTick++;
 8006f90:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <HAL_IncTick+0x18>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3301      	adds	r3, #1
 8006f96:	4a03      	ldr	r2, [pc, #12]	; (8006fa4 <HAL_IncTick+0x18>)
 8006f98:	6013      	str	r3, [r2, #0]
}
 8006f9a:	bf00      	nop
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20000abc 	.word	0x20000abc

08006fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
  return uwTick;
 8006fac:	4b02      	ldr	r3, [pc, #8]	; (8006fb8 <HAL_GetTick+0x10>)
 8006fae:	681b      	ldr	r3, [r3, #0]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr
 8006fb8:	20000abc 	.word	0x20000abc

08006fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8006fc8:	f7ff ffee 	bl	8006fa8 <HAL_GetTick>
 8006fcc:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8006fce:	bf00      	nop
 8006fd0:	f7ff ffea 	bl	8006fa8 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d8f7      	bhi.n	8006fd0 <HAL_Delay+0x14>
  {
  }
}
 8006fe0:	bf00      	nop
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ff8:	4b0c      	ldr	r3, [pc, #48]	; (800702c <NVIC_SetPriorityGrouping+0x44>)
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007004:	4013      	ands	r3, r2
 8007006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800701a:	4a04      	ldr	r2, [pc, #16]	; (800702c <NVIC_SetPriorityGrouping+0x44>)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	60d3      	str	r3, [r2, #12]
}
 8007020:	bf00      	nop
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	bc80      	pop	{r7}
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	e000ed00 	.word	0xe000ed00

08007030 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007034:	4b04      	ldr	r3, [pc, #16]	; (8007048 <NVIC_GetPriorityGrouping+0x18>)
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	0a1b      	lsrs	r3, r3, #8
 800703a:	f003 0307 	and.w	r3, r3, #7
}
 800703e:	4618      	mov	r0, r3
 8007040:	46bd      	mov	sp, r7
 8007042:	bc80      	pop	{r7}
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	e000ed00 	.word	0xe000ed00

0800704c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	f003 021f 	and.w	r2, r3, #31
 800705c:	4906      	ldr	r1, [pc, #24]	; (8007078 <NVIC_EnableIRQ+0x2c>)
 800705e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007062:	095b      	lsrs	r3, r3, #5
 8007064:	2001      	movs	r0, #1
 8007066:	fa00 f202 	lsl.w	r2, r0, r2
 800706a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	bc80      	pop	{r7}
 8007076:	4770      	bx	lr
 8007078:	e000e100 	.word	0xe000e100

0800707c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	6039      	str	r1, [r7, #0]
 8007086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8007088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800708c:	2b00      	cmp	r3, #0
 800708e:	da0b      	bge.n	80070a8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	b2da      	uxtb	r2, r3
 8007094:	490c      	ldr	r1, [pc, #48]	; (80070c8 <NVIC_SetPriority+0x4c>)
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	3b04      	subs	r3, #4
 800709e:	0112      	lsls	r2, r2, #4
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	440b      	add	r3, r1
 80070a4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80070a6:	e009      	b.n	80070bc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	4907      	ldr	r1, [pc, #28]	; (80070cc <NVIC_SetPriority+0x50>)
 80070ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b2:	0112      	lsls	r2, r2, #4
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	440b      	add	r3, r1
 80070b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bc80      	pop	{r7}
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	e000ed00 	.word	0xe000ed00
 80070cc:	e000e100 	.word	0xe000e100

080070d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b089      	sub	sp, #36	; 0x24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f1c3 0307 	rsb	r3, r3, #7
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	bf28      	it	cs
 80070ee:	2304      	movcs	r3, #4
 80070f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	3304      	adds	r3, #4
 80070f6:	2b06      	cmp	r3, #6
 80070f8:	d902      	bls.n	8007100 <NVIC_EncodePriority+0x30>
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	3b03      	subs	r3, #3
 80070fe:	e000      	b.n	8007102 <NVIC_EncodePriority+0x32>
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007104:	f04f 32ff 	mov.w	r2, #4294967295
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	fa02 f303 	lsl.w	r3, r2, r3
 800710e:	43da      	mvns	r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	401a      	ands	r2, r3
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007118:	f04f 31ff 	mov.w	r1, #4294967295
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	fa01 f303 	lsl.w	r3, r1, r3
 8007122:	43d9      	mvns	r1, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007128:	4313      	orrs	r3, r2
         );
}
 800712a:	4618      	mov	r0, r3
 800712c:	3724      	adds	r7, #36	; 0x24
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr

08007134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3b01      	subs	r3, #1
 8007140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007144:	d301      	bcc.n	800714a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007146:	2301      	movs	r3, #1
 8007148:	e00f      	b.n	800716a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800714a:	4a0a      	ldr	r2, [pc, #40]	; (8007174 <SysTick_Config+0x40>)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3b01      	subs	r3, #1
 8007150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007152:	210f      	movs	r1, #15
 8007154:	f04f 30ff 	mov.w	r0, #4294967295
 8007158:	f7ff ff90 	bl	800707c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800715c:	4b05      	ldr	r3, [pc, #20]	; (8007174 <SysTick_Config+0x40>)
 800715e:	2200      	movs	r2, #0
 8007160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007162:	4b04      	ldr	r3, [pc, #16]	; (8007174 <SysTick_Config+0x40>)
 8007164:	2207      	movs	r2, #7
 8007166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	e000e010 	.word	0xe000e010

08007178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff ff31 	bl	8006fe8 <NVIC_SetPriorityGrouping>
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b086      	sub	sp, #24
 8007192:	af00      	add	r7, sp, #0
 8007194:	4603      	mov	r3, r0
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80071a0:	f7ff ff46 	bl	8007030 <NVIC_GetPriorityGrouping>
 80071a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	68b9      	ldr	r1, [r7, #8]
 80071aa:	6978      	ldr	r0, [r7, #20]
 80071ac:	f7ff ff90 	bl	80070d0 <NVIC_EncodePriority>
 80071b0:	4602      	mov	r2, r0
 80071b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071b6:	4611      	mov	r1, r2
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff ff5f 	bl	800707c <NVIC_SetPriority>
}
 80071be:	bf00      	nop
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	4603      	mov	r3, r0
 80071ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff ff39 	bl	800704c <NVIC_EnableIRQ>
}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff ffa2 	bl	8007134 <SysTick_Config>
 80071f0:	4603      	mov	r3, r0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b04      	cmp	r3, #4
 8007208:	d106      	bne.n	8007218 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800720a:	4b09      	ldr	r3, [pc, #36]	; (8007230 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a08      	ldr	r2, [pc, #32]	; (8007230 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8007210:	f043 0304 	orr.w	r3, r3, #4
 8007214:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8007216:	e005      	b.n	8007224 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8007218:	4b05      	ldr	r3, [pc, #20]	; (8007230 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a04      	ldr	r2, [pc, #16]	; (8007230 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800721e:	f023 0304 	bic.w	r3, r3, #4
 8007222:	6013      	str	r3, [r2, #0]
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	bc80      	pop	{r7}
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	e000e010 	.word	0xe000e010

08007234 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007238:	f000 f802 	bl	8007240 <HAL_SYSTICK_Callback>
}
 800723c:	bf00      	nop
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr

0800724c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e09c      	b.n	800739c <HAL_DMA_Init+0x150>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	4b4f      	ldr	r3, [pc, #316]	; (80073a8 <HAL_DMA_Init+0x15c>)
 800726a:	429a      	cmp	r2, r3
 800726c:	d80f      	bhi.n	800728e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	4b4d      	ldr	r3, [pc, #308]	; (80073ac <HAL_DMA_Init+0x160>)
 8007276:	4413      	add	r3, r2
 8007278:	4a4d      	ldr	r2, [pc, #308]	; (80073b0 <HAL_DMA_Init+0x164>)
 800727a:	fba2 2303 	umull	r2, r3, r2, r3
 800727e:	091b      	lsrs	r3, r3, #4
 8007280:	009a      	lsls	r2, r3, #2
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a4a      	ldr	r2, [pc, #296]	; (80073b4 <HAL_DMA_Init+0x168>)
 800728a:	641a      	str	r2, [r3, #64]	; 0x40
 800728c:	e00e      	b.n	80072ac <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	4b48      	ldr	r3, [pc, #288]	; (80073b8 <HAL_DMA_Init+0x16c>)
 8007296:	4413      	add	r3, r2
 8007298:	4a45      	ldr	r2, [pc, #276]	; (80073b0 <HAL_DMA_Init+0x164>)
 800729a:	fba2 2303 	umull	r2, r3, r2, r3
 800729e:	091b      	lsrs	r3, r3, #4
 80072a0:	009a      	lsls	r2, r3, #2
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a44      	ldr	r2, [pc, #272]	; (80073bc <HAL_DMA_Init+0x170>)
 80072aa:	641a      	str	r2, [r3, #64]	; 0x40
  }
    
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80072c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80072c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80072d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007306:	d031      	beq.n	800736c <HAL_DMA_Init+0x120>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	4a29      	ldr	r2, [pc, #164]	; (80073b4 <HAL_DMA_Init+0x168>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d116      	bne.n	8007340 <HAL_DMA_Init+0xf4>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8007312:	4b2b      	ldr	r3, [pc, #172]	; (80073c0 <HAL_DMA_Init+0x174>)
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	210f      	movs	r1, #15
 800731c:	fa01 f303 	lsl.w	r3, r1, r3
 8007320:	43db      	mvns	r3, r3
 8007322:	4927      	ldr	r1, [pc, #156]	; (80073c0 <HAL_DMA_Init+0x174>)
 8007324:	4013      	ands	r3, r2
 8007326:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8007328:	4b25      	ldr	r3, [pc, #148]	; (80073c0 <HAL_DMA_Init+0x174>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6859      	ldr	r1, [r3, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007334:	fa01 f303 	lsl.w	r3, r1, r3
 8007338:	4921      	ldr	r1, [pc, #132]	; (80073c0 <HAL_DMA_Init+0x174>)
 800733a:	4313      	orrs	r3, r2
 800733c:	600b      	str	r3, [r1, #0]
 800733e:	e015      	b.n	800736c <HAL_DMA_Init+0x120>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8007340:	4b20      	ldr	r3, [pc, #128]	; (80073c4 <HAL_DMA_Init+0x178>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007348:	210f      	movs	r1, #15
 800734a:	fa01 f303 	lsl.w	r3, r1, r3
 800734e:	43db      	mvns	r3, r3
 8007350:	491c      	ldr	r1, [pc, #112]	; (80073c4 <HAL_DMA_Init+0x178>)
 8007352:	4013      	ands	r3, r2
 8007354:	600b      	str	r3, [r1, #0]
     
      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8007356:	4b1b      	ldr	r3, [pc, #108]	; (80073c4 <HAL_DMA_Init+0x178>)
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6859      	ldr	r1, [r3, #4]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007362:	fa01 f303 	lsl.w	r3, r1, r3
 8007366:	4917      	ldr	r1, [pc, #92]	; (80073c4 <HAL_DMA_Init+0x178>)
 8007368:	4313      	orrs	r3, r2
 800736a:	600b      	str	r3, [r1, #0]
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	40020407 	.word	0x40020407
 80073ac:	bffdfff8 	.word	0xbffdfff8
 80073b0:	cccccccd 	.word	0xcccccccd
 80073b4:	40020000 	.word	0x40020000
 80073b8:	bffdfbf8 	.word	0xbffdfbf8
 80073bc:	40020400 	.word	0x40020400
 80073c0:	400200a8 	.word	0x400200a8
 80073c4:	400204a8 	.word	0x400204a8

080073c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_DMA_Start_IT+0x20>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e04b      	b.n	8007480 <HAL_DMA_Start_IT+0xb8>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d13a      	bne.n	8007472 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f91f 	bl	8007664 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	2b00      	cmp	r3, #0
 800742c:	d008      	beq.n	8007440 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 020e 	orr.w	r2, r2, #14
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e00f      	b.n	8007460 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0204 	bic.w	r2, r2, #4
 800744e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f042 020a 	orr.w	r2, r2, #10
 800745e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0201 	orr.w	r2, r2, #1
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	e005      	b.n	800747e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800747a:	2302      	movs	r3, #2
 800747c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d005      	beq.n	80074ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2204      	movs	r2, #4
 80074a4:	63da      	str	r2, [r3, #60]	; 0x3c
        
    status = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	73fb      	strb	r3, [r7, #15]
 80074aa:	e02a      	b.n	8007502 <HAL_DMA_Abort_IT+0x7a>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 020e 	bic.w	r2, r2, #14
 80074ba:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0201 	bic.w	r2, r2, #1
 80074ca:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR |= ((DMA_ISR_GIF1) << (hdma->ChannelIndex));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d0:	6859      	ldr	r1, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d6:	2201      	movs	r2, #1
 80074d8:	409a      	lsls	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_DMA_Abort_IT+0x7a>
    {
      hdma->XferAbortCallback(hdma);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
    } 
  }
  return status;
 8007502:	7bfb      	ldrb	r3, [r7, #15]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007528:	2204      	movs	r2, #4
 800752a:	409a      	lsls	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4013      	ands	r3, r2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d027      	beq.n	8007584 <HAL_DMA_IRQHandler+0x78>
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b00      	cmp	r3, #0
 800753c:	d022      	beq.n	8007584 <HAL_DMA_IRQHandler+0x78>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0320 	and.w	r3, r3, #32
 8007548:	2b00      	cmp	r3, #0
 800754a:	d107      	bne.n	800755c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0204 	bic.w	r2, r2, #4
 800755a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR  |= (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	6859      	ldr	r1, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	2204      	movs	r2, #4
 8007568:	409a      	lsls	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	430a      	orrs	r2, r1
 8007570:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	2b00      	cmp	r3, #0
 8007578:	d06f      	beq.n	800765a <HAL_DMA_IRQHandler+0x14e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8007582:	e06a      	b.n	800765a <HAL_DMA_IRQHandler+0x14e>
      }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007588:	2202      	movs	r2, #2
 800758a:	409a      	lsls	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4013      	ands	r3, r2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d02f      	beq.n	80075f4 <HAL_DMA_IRQHandler+0xe8>
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d02a      	beq.n	80075f4 <HAL_DMA_IRQHandler+0xe8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0320 	and.w	r3, r3, #32
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10b      	bne.n	80075c4 <HAL_DMA_IRQHandler+0xb8>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 020a 	bic.w	r2, r2, #10
 80075ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR |= (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	6859      	ldr	r1, [r3, #4]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ce:	2202      	movs	r2, #2
 80075d0:	409a      	lsls	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	430a      	orrs	r2, r1
 80075d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d037      	beq.n	800765a <HAL_DMA_IRQHandler+0x14e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80075f2:	e032      	b.n	800765a <HAL_DMA_IRQHandler+0x14e>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f8:	2208      	movs	r2, #8
 80075fa:	409a      	lsls	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4013      	ands	r3, r2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d02b      	beq.n	800765c <HAL_DMA_IRQHandler+0x150>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 0308 	and.w	r3, r3, #8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d026      	beq.n	800765c <HAL_DMA_IRQHandler+0x150>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 020e 	bic.w	r2, r2, #14
 800761c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR  |= (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	6859      	ldr	r1, [r3, #4]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007628:	2201      	movs	r2, #1
 800762a:	409a      	lsls	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	430a      	orrs	r2, r1
 8007632:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <HAL_DMA_IRQHandler+0x150>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	4798      	blx	r3
    }
  }
  return;
 800765a:	bf00      	nop
 800765c:	bf00      	nop
}
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  |= (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	6859      	ldr	r1, [r3, #4]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767c:	2201      	movs	r2, #1
 800767e:	409a      	lsls	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	430a      	orrs	r2, r1
 8007686:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	2b10      	cmp	r3, #16
 8007696:	d108      	bne.n	80076aa <DMA_SetConfig+0x46>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80076a8:	e007      	b.n	80076ba <DMA_SetConfig+0x56>
    hdma->Instance->CPAR = SrcAddress;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	60da      	str	r2, [r3, #12]
}
 80076ba:	bf00      	nop
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr

080076c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80076d6:	2300      	movs	r3, #0
 80076d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80076da:	e17f      	b.n	80079dc <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	2101      	movs	r1, #1
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	fa01 f303 	lsl.w	r3, r1, r3
 80076e8:	4013      	ands	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8171 	beq.w	80079d6 <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d003      	beq.n	8007704 <HAL_GPIO_Init+0x40>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b12      	cmp	r3, #18
 8007702:	d123      	bne.n	800774c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	08da      	lsrs	r2, r3, #3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3208      	adds	r2, #8
 800770c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007710:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	220f      	movs	r2, #15
 800771c:	fa02 f303 	lsl.w	r3, r2, r3
 8007720:	43db      	mvns	r3, r3
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4013      	ands	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	691a      	ldr	r2, [r3, #16]
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	fa02 f303 	lsl.w	r3, r2, r3
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	08da      	lsrs	r2, r3, #3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3208      	adds	r2, #8
 8007746:	6939      	ldr	r1, [r7, #16]
 8007748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	2203      	movs	r2, #3
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	43db      	mvns	r3, r3
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4013      	ands	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f003 0203 	and.w	r2, r3, #3
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	fa02 f303 	lsl.w	r3, r2, r3
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4313      	orrs	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d00b      	beq.n	80077a0 <HAL_GPIO_Init+0xdc>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	2b02      	cmp	r3, #2
 800778e:	d007      	beq.n	80077a0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007794:	2b11      	cmp	r3, #17
 8007796:	d003      	beq.n	80077a0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	2b12      	cmp	r3, #18
 800779e:	d130      	bne.n	8007802 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	2203      	movs	r2, #3
 80077ac:	fa02 f303 	lsl.w	r3, r2, r3
 80077b0:	43db      	mvns	r3, r3
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	4013      	ands	r3, r2
 80077b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	68da      	ldr	r2, [r3, #12]
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	fa02 f303 	lsl.w	r3, r2, r3
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80077d6:	2201      	movs	r2, #1
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	fa02 f303 	lsl.w	r3, r2, r3
 80077de:	43db      	mvns	r3, r3
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	4013      	ands	r3, r2
 80077e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	091b      	lsrs	r3, r3, #4
 80077ec:	f003 0201 	and.w	r2, r3, #1
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	fa02 f303 	lsl.w	r3, r2, r3
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	2b03      	cmp	r3, #3
 800780c:	d118      	bne.n	8007840 <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8007814:	2201      	movs	r2, #1
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	fa02 f303 	lsl.w	r3, r2, r3
 800781c:	43db      	mvns	r3, r3
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4013      	ands	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	08db      	lsrs	r3, r3, #3
 800782a:	f003 0201 	and.w	r2, r3, #1
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	fa02 f303 	lsl.w	r3, r2, r3
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	4313      	orrs	r3, r2
 8007838:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	2203      	movs	r2, #3
 800784c:	fa02 f303 	lsl.w	r3, r2, r3
 8007850:	43db      	mvns	r3, r3
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	4013      	ands	r3, r2
 8007856:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	fa02 f303 	lsl.w	r3, r2, r3
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	4313      	orrs	r3, r2
 8007868:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 80ac 	beq.w	80079d6 <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800787e:	4b5e      	ldr	r3, [pc, #376]	; (80079f8 <HAL_GPIO_Init+0x334>)
 8007880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007882:	4a5d      	ldr	r2, [pc, #372]	; (80079f8 <HAL_GPIO_Init+0x334>)
 8007884:	f043 0301 	orr.w	r3, r3, #1
 8007888:	6613      	str	r3, [r2, #96]	; 0x60
 800788a:	4b5b      	ldr	r3, [pc, #364]	; (80079f8 <HAL_GPIO_Init+0x334>)
 800788c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	60bb      	str	r3, [r7, #8]
 8007894:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8007896:	4a59      	ldr	r2, [pc, #356]	; (80079fc <HAL_GPIO_Init+0x338>)
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	089b      	lsrs	r3, r3, #2
 800789c:	3302      	adds	r3, #2
 800789e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078a2:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	220f      	movs	r2, #15
 80078ae:	fa02 f303 	lsl.w	r3, r2, r3
 80078b2:	43db      	mvns	r3, r3
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	4013      	ands	r3, r2
 80078b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80078c0:	d025      	beq.n	800790e <HAL_GPIO_Init+0x24a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a4e      	ldr	r2, [pc, #312]	; (8007a00 <HAL_GPIO_Init+0x33c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d01f      	beq.n	800790a <HAL_GPIO_Init+0x246>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a4d      	ldr	r2, [pc, #308]	; (8007a04 <HAL_GPIO_Init+0x340>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d019      	beq.n	8007906 <HAL_GPIO_Init+0x242>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a4c      	ldr	r2, [pc, #304]	; (8007a08 <HAL_GPIO_Init+0x344>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d013      	beq.n	8007902 <HAL_GPIO_Init+0x23e>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a4b      	ldr	r2, [pc, #300]	; (8007a0c <HAL_GPIO_Init+0x348>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00d      	beq.n	80078fe <HAL_GPIO_Init+0x23a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a4a      	ldr	r2, [pc, #296]	; (8007a10 <HAL_GPIO_Init+0x34c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d007      	beq.n	80078fa <HAL_GPIO_Init+0x236>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a49      	ldr	r2, [pc, #292]	; (8007a14 <HAL_GPIO_Init+0x350>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d101      	bne.n	80078f6 <HAL_GPIO_Init+0x232>
 80078f2:	2306      	movs	r3, #6
 80078f4:	e00c      	b.n	8007910 <HAL_GPIO_Init+0x24c>
 80078f6:	2307      	movs	r3, #7
 80078f8:	e00a      	b.n	8007910 <HAL_GPIO_Init+0x24c>
 80078fa:	2305      	movs	r3, #5
 80078fc:	e008      	b.n	8007910 <HAL_GPIO_Init+0x24c>
 80078fe:	2304      	movs	r3, #4
 8007900:	e006      	b.n	8007910 <HAL_GPIO_Init+0x24c>
 8007902:	2303      	movs	r3, #3
 8007904:	e004      	b.n	8007910 <HAL_GPIO_Init+0x24c>
 8007906:	2302      	movs	r3, #2
 8007908:	e002      	b.n	8007910 <HAL_GPIO_Init+0x24c>
 800790a:	2301      	movs	r3, #1
 800790c:	e000      	b.n	8007910 <HAL_GPIO_Init+0x24c>
 800790e:	2300      	movs	r3, #0
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	f002 0203 	and.w	r2, r2, #3
 8007916:	0092      	lsls	r2, r2, #2
 8007918:	4093      	lsls	r3, r2
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007920:	4936      	ldr	r1, [pc, #216]	; (80079fc <HAL_GPIO_Init+0x338>)
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	089b      	lsrs	r3, r3, #2
 8007926:	3302      	adds	r3, #2
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800792e:	4b3a      	ldr	r3, [pc, #232]	; (8007a18 <HAL_GPIO_Init+0x354>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	43db      	mvns	r3, r3
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4013      	ands	r3, r2
 800793c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4313      	orrs	r3, r2
 8007950:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007952:	4a31      	ldr	r2, [pc, #196]	; (8007a18 <HAL_GPIO_Init+0x354>)
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8007958:	4b2f      	ldr	r3, [pc, #188]	; (8007a18 <HAL_GPIO_Init+0x354>)
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	43db      	mvns	r3, r3
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4013      	ands	r3, r2
 8007966:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d003      	beq.n	800797c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800797c:	4a26      	ldr	r2, [pc, #152]	; (8007a18 <HAL_GPIO_Init+0x354>)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007982:	4b25      	ldr	r3, [pc, #148]	; (8007a18 <HAL_GPIO_Init+0x354>)
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	43db      	mvns	r3, r3
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4013      	ands	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80079a6:	4a1c      	ldr	r2, [pc, #112]	; (8007a18 <HAL_GPIO_Init+0x354>)
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80079ac:	4b1a      	ldr	r3, [pc, #104]	; (8007a18 <HAL_GPIO_Init+0x354>)
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	43db      	mvns	r3, r3
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4013      	ands	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d003      	beq.n	80079d0 <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80079d0:	4a11      	ldr	r2, [pc, #68]	; (8007a18 <HAL_GPIO_Init+0x354>)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	3301      	adds	r3, #1
 80079da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	fa22 f303 	lsr.w	r3, r2, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f47f ae78 	bne.w	80076dc <HAL_GPIO_Init+0x18>
  }
}
 80079ec:	bf00      	nop
 80079ee:	371c      	adds	r7, #28
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bc80      	pop	{r7}
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	40021000 	.word	0x40021000
 80079fc:	40010000 	.word	0x40010000
 8007a00:	48000400 	.word	0x48000400
 8007a04:	48000800 	.word	0x48000800
 8007a08:	48000c00 	.word	0x48000c00
 8007a0c:	48001000 	.word	0x48001000
 8007a10:	48001400 	.word	0x48001400
 8007a14:	48001800 	.word	0x48001800
 8007a18:	40010400 	.word	0x40010400

08007a1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	887b      	ldrh	r3, [r7, #2]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a34:	2301      	movs	r3, #1
 8007a36:	73fb      	strb	r3, [r7, #15]
 8007a38:	e001      	b.n	8007a3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr

08007a4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	807b      	strh	r3, [r7, #2]
 8007a56:	4613      	mov	r3, r2
 8007a58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a5a:	787b      	ldrb	r3, [r7, #1]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007a60:	887a      	ldrh	r2, [r7, #2]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007a66:	e002      	b.n	8007a6e <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007a68:	887a      	ldrh	r2, [r7, #2]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bc80      	pop	{r7}
 8007a76:	4770      	bx	lr

08007a78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007a82:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a84:	695a      	ldr	r2, [r3, #20]
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d006      	beq.n	8007a9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a8e:	4a05      	ldr	r2, [pc, #20]	; (8007aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a90:	88fb      	ldrh	r3, [r7, #6]
 8007a92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a94:	88fb      	ldrh	r3, [r7, #6]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7f9 f986 	bl	8000da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007a9c:	bf00      	nop
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40010400 	.word	0x40010400

08007aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e07d      	b.n	8007bb6 <HAL_I2C_Init+0x10e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f875 	bl	8007bbe <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2224      	movs	r2, #36	; 0x24
 8007ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007af8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b08:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0U)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d012      	beq.n	8007b38 <HAL_I2C_Init+0x90>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d107      	bne.n	8007b2a <HAL_I2C_Init+0x82>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b26:	609a      	str	r2, [r3, #8]
 8007b28:	e006      	b.n	8007b38 <HAL_I2C_Init+0x90>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689a      	ldr	r2, [r3, #8]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007b36:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d104      	bne.n	8007b4a <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6812      	ldr	r2, [r2, #0]
 8007b54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691a      	ldr	r2, [r3, #16]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	ea42 0103 	orr.w	r1, r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	021a      	lsls	r2, r3, #8
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	69d9      	ldr	r1, [r3, #28]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1a      	ldr	r2, [r3, #32]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f042 0201 	orr.w	r2, r2, #1
 8007b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr

08007bd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af02      	add	r7, sp, #8
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	607a      	str	r2, [r7, #4]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	460b      	mov	r3, r1
 8007bde:	817b      	strh	r3, [r7, #10]
 8007be0:	4613      	mov	r3, r2
 8007be2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b20      	cmp	r3, #32
 8007bf2:	f040 80e6 	bne.w	8007dc2 <HAL_I2C_Master_Transmit+0x1f2>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_I2C_Master_Transmit+0x34>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e0df      	b.n	8007dc4 <HAL_I2C_Master_Transmit+0x1f4>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c0c:	f7ff f9cc 	bl	8006fa8 <HAL_GetTick>
 8007c10:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	2319      	movs	r3, #25
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 f9fb 	bl	800801a <I2C_WaitOnFlagUntilTimeout>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e0ca      	b.n	8007dc4 <HAL_I2C_Master_Transmit+0x1f4>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2221      	movs	r2, #33	; 0x21
 8007c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2210      	movs	r2, #16
 8007c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	893a      	ldrh	r2, [r7, #8]
 8007c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	2bff      	cmp	r3, #255	; 0xff
 8007c5e:	d90f      	bls.n	8007c80 <HAL_I2C_Master_Transmit+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	22ff      	movs	r2, #255	; 0xff
 8007c64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	8979      	ldrh	r1, [r7, #10]
 8007c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 fb41 	bl	8008300 <I2C_TransferConfig>
 8007c7e:	e071      	b.n	8007d64 <HAL_I2C_Master_Transmit+0x194>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	8979      	ldrh	r1, [r7, #10]
 8007c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 fb2f 	bl	8008300 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8007ca2:	e05f      	b.n	8007d64 <HAL_I2C_Master_Transmit+0x194>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	6a39      	ldr	r1, [r7, #32]
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 f9f0 	bl	800808e <I2C_WaitOnTXISFlagUntilTimeout>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d007      	beq.n	8007cc4 <HAL_I2C_Master_Transmit+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d101      	bne.n	8007cc0 <HAL_I2C_Master_Transmit+0xf0>
        {
          return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e081      	b.n	8007dc4 <HAL_I2C_Master_Transmit+0x1f4>
        }
        else
        {
          return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e07f      	b.n	8007dc4 <HAL_I2C_Master_Transmit+0x1f4>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	1c59      	adds	r1, r3, #1
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	6251      	str	r1, [r2, #36]	; 0x24
 8007cce:	781a      	ldrb	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d135      	bne.n	8007d64 <HAL_I2C_Master_Transmit+0x194>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d030      	beq.n	8007d64 <HAL_I2C_Master_Transmit+0x194>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	6a3b      	ldr	r3, [r7, #32]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2180      	movs	r1, #128	; 0x80
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f984 	bl	800801a <I2C_WaitOnFlagUntilTimeout>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <HAL_I2C_Master_Transmit+0x14c>
        {
          return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e053      	b.n	8007dc4 <HAL_I2C_Master_Transmit+0x1f4>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2bff      	cmp	r3, #255	; 0xff
 8007d24:	d90e      	bls.n	8007d44 <HAL_I2C_Master_Transmit+0x174>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	22ff      	movs	r2, #255	; 0xff
 8007d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	8979      	ldrh	r1, [r7, #10]
 8007d34:	2300      	movs	r3, #0
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 fadf 	bl	8008300 <I2C_TransferConfig>
 8007d42:	e00f      	b.n	8007d64 <HAL_I2C_Master_Transmit+0x194>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	8979      	ldrh	r1, [r7, #10]
 8007d56:	2300      	movs	r3, #0
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 face 	bl	8008300 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d19a      	bne.n	8007ca4 <HAL_I2C_Master_Transmit+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	6a39      	ldr	r1, [r7, #32]
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f9cb 	bl	800810e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <HAL_I2C_Master_Transmit+0x1be>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d101      	bne.n	8007d8a <HAL_I2C_Master_Transmit+0x1ba>
      {
        return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e01c      	b.n	8007dc4 <HAL_I2C_Master_Transmit+0x1f4>
      }
      else
      {
        return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e01a      	b.n	8007dc4 <HAL_I2C_Master_Transmit+0x1f4>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2220      	movs	r2, #32
 8007d94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6859      	ldr	r1, [r3, #4]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <HAL_I2C_Master_Transmit+0x1fc>)
 8007da2:	400b      	ands	r3, r1
 8007da4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e000      	b.n	8007dc4 <HAL_I2C_Master_Transmit+0x1f4>
  }
  else
  {
    return HAL_BUSY;
 8007dc2:	2302      	movs	r3, #2
  }
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	fe00e800 	.word	0xfe00e800

08007dd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af02      	add	r7, sp, #8
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	607a      	str	r2, [r7, #4]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	460b      	mov	r3, r1
 8007dde:	817b      	strh	r3, [r7, #10]
 8007de0:	4613      	mov	r3, r2
 8007de2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	f040 80e7 	bne.w	8007fc4 <HAL_I2C_Master_Receive+0x1f4>
  {    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <HAL_I2C_Master_Receive+0x34>
 8007e00:	2302      	movs	r3, #2
 8007e02:	e0e0      	b.n	8007fc6 <HAL_I2C_Master_Receive+0x1f6>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e0c:	f7ff f8cc 	bl	8006fa8 <HAL_GetTick>
 8007e10:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	2319      	movs	r3, #25
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 f8fb 	bl	800801a <I2C_WaitOnFlagUntilTimeout>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e0cb      	b.n	8007fc6 <HAL_I2C_Master_Receive+0x1f6>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2222      	movs	r2, #34	; 0x22
 8007e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2210      	movs	r2, #16
 8007e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	893a      	ldrh	r2, [r7, #8]
 8007e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	2bff      	cmp	r3, #255	; 0xff
 8007e5e:	d90f      	bls.n	8007e80 <HAL_I2C_Master_Receive+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	22ff      	movs	r2, #255	; 0xff
 8007e64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	8979      	ldrh	r1, [r7, #10]
 8007e6e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 fa41 	bl	8008300 <I2C_TransferConfig>
 8007e7e:	e072      	b.n	8007f66 <HAL_I2C_Master_Receive+0x196>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	8979      	ldrh	r1, [r7, #10]
 8007e92:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 fa2f 	bl	8008300 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8007ea2:	e060      	b.n	8007f66 <HAL_I2C_Master_Receive+0x196>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	6a39      	ldr	r1, [r7, #32]
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 f96d 	bl	8008188 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d007      	beq.n	8007ec4 <HAL_I2C_Master_Receive+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d101      	bne.n	8007ec0 <HAL_I2C_Master_Receive+0xf0>
        {
          return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e082      	b.n	8007fc6 <HAL_I2C_Master_Receive+0x1f6>
        }
        else
        {
          return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e080      	b.n	8007fc6 <HAL_I2C_Master_Receive+0x1f6>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	1c59      	adds	r1, r3, #1
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	6251      	str	r1, [r2, #36]	; 0x24
 8007ed4:	b2c2      	uxtb	r2, r0
 8007ed6:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d135      	bne.n	8007f66 <HAL_I2C_Master_Receive+0x196>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d030      	beq.n	8007f66 <HAL_I2C_Master_Receive+0x196>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2180      	movs	r1, #128	; 0x80
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f883 	bl	800801a <I2C_WaitOnFlagUntilTimeout>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <HAL_I2C_Master_Receive+0x14e>
        {
          return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e053      	b.n	8007fc6 <HAL_I2C_Master_Receive+0x1f6>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	2bff      	cmp	r3, #255	; 0xff
 8007f26:	d90e      	bls.n	8007f46 <HAL_I2C_Master_Receive+0x176>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	22ff      	movs	r2, #255	; 0xff
 8007f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	8979      	ldrh	r1, [r7, #10]
 8007f36:	2300      	movs	r3, #0
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f000 f9de 	bl	8008300 <I2C_TransferConfig>
 8007f44:	e00f      	b.n	8007f66 <HAL_I2C_Master_Receive+0x196>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	8979      	ldrh	r1, [r7, #10]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 f9cd 	bl	8008300 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d199      	bne.n	8007ea4 <HAL_I2C_Master_Receive+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	6a39      	ldr	r1, [r7, #32]
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 f8ca 	bl	800810e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d007      	beq.n	8007f90 <HAL_I2C_Master_Receive+0x1c0>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d101      	bne.n	8007f8c <HAL_I2C_Master_Receive+0x1bc>
      {
        return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e01c      	b.n	8007fc6 <HAL_I2C_Master_Receive+0x1f6>
      }
      else
      {
        return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e01a      	b.n	8007fc6 <HAL_I2C_Master_Receive+0x1f6>
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2220      	movs	r2, #32
 8007f96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6859      	ldr	r1, [r3, #4]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <HAL_I2C_Master_Receive+0x200>)
 8007fa4:	400b      	ands	r3, r1
 8007fa6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	e000      	b.n	8007fc6 <HAL_I2C_Master_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 8007fc4:	2302      	movs	r3, #2
  }
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	fe00e800 	.word	0xfe00e800

08007fd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d103      	bne.n	8007ff2 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d007      	beq.n	8008010 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	699a      	ldr	r2, [r3, #24]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f042 0201 	orr.w	r2, r2, #1
 800800e:	619a      	str	r2, [r3, #24]
  }
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr

0800801a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	603b      	str	r3, [r7, #0]
 8008026:	4613      	mov	r3, r2
 8008028:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800802a:	e01c      	b.n	8008066 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008032:	d018      	beq.n	8008066 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d007      	beq.n	800804a <I2C_WaitOnFlagUntilTimeout+0x30>
 800803a:	f7fe ffb5 	bl	8006fa8 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	429a      	cmp	r2, r3
 8008048:	d20d      	bcs.n	8008066 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2220      	movs	r2, #32
 800804e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e00f      	b.n	8008086 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	699a      	ldr	r2, [r3, #24]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4013      	ands	r3, r2
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	429a      	cmp	r2, r3
 8008074:	bf0c      	ite	eq
 8008076:	2301      	moveq	r3, #1
 8008078:	2300      	movne	r3, #0
 800807a:	b2db      	uxtb	r3, r3
 800807c:	461a      	mov	r2, r3
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	429a      	cmp	r2, r3
 8008082:	d0d3      	beq.n	800802c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800809a:	e02c      	b.n	80080f6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 f8cf 	bl	8008244 <I2C_IsAcknowledgeFailed>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e02a      	b.n	8008106 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b6:	d01e      	beq.n	80080f6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d007      	beq.n	80080ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80080be:	f7fe ff73 	bl	8006fa8 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d213      	bcs.n	80080f6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d2:	f043 0220 	orr.w	r2, r3, #32
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e007      	b.n	8008106 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b02      	cmp	r3, #2
 8008102:	d1cb      	bne.n	800809c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800811a:	e028      	b.n	800816e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	68b9      	ldr	r1, [r7, #8]
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 f88f 	bl	8008244 <I2C_IsAcknowledgeFailed>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e026      	b.n	800817e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d007      	beq.n	8008146 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008136:	f7fe ff37 	bl	8006fa8 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	429a      	cmp	r2, r3
 8008144:	d213      	bcs.n	800816e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814a:	f043 0220 	orr.w	r2, r3, #32
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2220      	movs	r2, #32
 8008156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e007      	b.n	800817e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	f003 0320 	and.w	r3, r3, #32
 8008178:	2b20      	cmp	r3, #32
 800817a:	d1cf      	bne.n	800811c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008194:	e048      	b.n	8008228 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	68b9      	ldr	r1, [r7, #8]
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 f852 	bl	8008244 <I2C_IsAcknowledgeFailed>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e046      	b.n	8008238 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	f003 0320 	and.w	r3, r3, #32
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	d11c      	bne.n	80081f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2220      	movs	r2, #32
 80081be:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6859      	ldr	r1, [r3, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	4b1d      	ldr	r3, [pc, #116]	; (8008240 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 80081cc:	400b      	ands	r3, r1
 80081ce:	6053      	str	r3, [r2, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2220      	movs	r2, #32
 80081da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e022      	b.n	8008238 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 80081f8:	f7fe fed6 	bl	8006fa8 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	429a      	cmp	r2, r3
 8008206:	d20f      	bcs.n	8008228 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820c:	f043 0220 	orr.w	r2, r3, #32
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2220      	movs	r2, #32
 8008218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e007      	b.n	8008238 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b04      	cmp	r3, #4
 8008234:	d1af      	bne.n	8008196 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	fe00e800 	.word	0xfe00e800

08008244 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	f003 0310 	and.w	r3, r3, #16
 800825a:	2b10      	cmp	r3, #16
 800825c:	d148      	bne.n	80082f0 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800825e:	e01c      	b.n	800829a <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008266:	d018      	beq.n	800829a <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d007      	beq.n	800827e <I2C_IsAcknowledgeFailed+0x3a>
 800826e:	f7fe fe9b 	bl	8006fa8 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	429a      	cmp	r2, r3
 800827c:	d20d      	bcs.n	800829a <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2220      	movs	r2, #32
 8008282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e02b      	b.n	80082f2 <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d1db      	bne.n	8008260 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2210      	movs	r2, #16
 80082ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2220      	movs	r2, #32
 80082b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f7ff fe8b 	bl	8007fd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6859      	ldr	r1, [r3, #4]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <I2C_IsAcknowledgeFailed+0xb8>)
 80082ca:	400b      	ands	r3, r1
 80082cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2204      	movs	r2, #4
 80082d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e000      	b.n	80082f2 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	fe00e800 	.word	0xfe00e800

08008300 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	460b      	mov	r3, r1
 800830c:	817b      	strh	r3, [r7, #10]
 800830e:	4613      	mov	r3, r2
 8008310:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <I2C_TransferConfig+0x58>)
 8008322:	4013      	ands	r3, r2
 8008324:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8008326:	897b      	ldrh	r3, [r7, #10]
 8008328:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800832c:	7a7b      	ldrb	r3, [r7, #9]
 800832e:	041b      	lsls	r3, r3, #16
 8008330:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008334:	431a      	orrs	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	431a      	orrs	r2, r3
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	4313      	orrs	r3, r2
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	4313      	orrs	r3, r2
 8008342:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	605a      	str	r2, [r3, #4]
}
 800834c:	bf00      	nop
 800834e:	371c      	adds	r7, #28
 8008350:	46bd      	mov	sp, r7
 8008352:	bc80      	pop	{r7}
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	fc009800 	.word	0xfc009800

0800835c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008360:	4b03      	ldr	r3, [pc, #12]	; (8008370 <HAL_PWREx_GetVoltageRange+0x14>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008368:	4618      	mov	r0, r3
 800836a:	46bd      	mov	sp, r7
 800836c:	bc80      	pop	{r7}
 800836e:	4770      	bx	lr
 8008370:	40007000 	.word	0x40007000

08008374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008386:	d12f      	bne.n	80083e8 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008388:	4b22      	ldr	r3, [pc, #136]	; (8008414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008394:	d037      	beq.n	8008406 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008396:	4b1f      	ldr	r3, [pc, #124]	; (8008414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800839e:	4a1d      	ldr	r2, [pc, #116]	; (8008414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083a4:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80083a6:	4b1c      	ldr	r3, [pc, #112]	; (8008418 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a1c      	ldr	r2, [pc, #112]	; (800841c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80083ac:	fba2 2303 	umull	r2, r3, r2, r3
 80083b0:	0c9b      	lsrs	r3, r3, #18
 80083b2:	2232      	movs	r2, #50	; 0x32
 80083b4:	fb02 f303 	mul.w	r3, r2, r3
 80083b8:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80083ba:	e002      	b.n	80083c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3b01      	subs	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d006      	beq.n	80083d6 <HAL_PWREx_ControlVoltageScaling+0x62>
 80083c8:	4b12      	ldr	r3, [pc, #72]	; (8008414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083d4:	d0f2      	beq.n	80083bc <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80083d6:	4b0f      	ldr	r3, [pc, #60]	; (8008414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083e2:	d110      	bne.n	8008406 <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e00f      	b.n	8008408 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80083e8:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083f4:	d007      	beq.n	8008406 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80083f6:	4b07      	ldr	r3, [pc, #28]	; (8008414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80083fe:	4a05      	ldr	r2, [pc, #20]	; (8008414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008400:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008404:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}  
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	bc80      	pop	{r7}
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40007000 	.word	0x40007000
 8008418:	200002d0 	.word	0x200002d0
 800841c:	431bde83 	.word	0x431bde83

08008420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08c      	sub	sp, #48	; 0x30
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0310 	and.w	r3, r3, #16
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 80db 	beq.w	80085f0 <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800843a:	4ba3      	ldr	r3, [pc, #652]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f003 030c 	and.w	r3, r3, #12
 8008442:	2b00      	cmp	r3, #0
 8008444:	f040 8084 	bne.w	8008550 <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008448:	4b9f      	ldr	r3, [pc, #636]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <HAL_RCC_OscConfig+0x40>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e363      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a1a      	ldr	r2, [r3, #32]
 8008464:	4b98      	ldr	r3, [pc, #608]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b00      	cmp	r3, #0
 800846e:	d004      	beq.n	800847a <HAL_RCC_OscConfig+0x5a>
 8008470:	4b95      	ldr	r3, [pc, #596]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008478:	e005      	b.n	8008486 <HAL_RCC_OscConfig+0x66>
 800847a:	4b93      	ldr	r3, [pc, #588]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 800847c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008480:	091b      	lsrs	r3, r3, #4
 8008482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008486:	4293      	cmp	r3, r2
 8008488:	d223      	bcs.n	80084d2 <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fdba 	bl	8009008 <RCC_SetFlashLatencyFromMSIRange>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e344      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800849e:	4b8a      	ldr	r3, [pc, #552]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a89      	ldr	r2, [pc, #548]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80084a4:	f043 0308 	orr.w	r3, r3, #8
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	4b87      	ldr	r3, [pc, #540]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	4984      	ldr	r1, [pc, #528]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084bc:	4b82      	ldr	r3, [pc, #520]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	021b      	lsls	r3, r3, #8
 80084ca:	497f      	ldr	r1, [pc, #508]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	604b      	str	r3, [r1, #4]
 80084d0:	e022      	b.n	8008518 <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084d2:	4b7d      	ldr	r3, [pc, #500]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a7c      	ldr	r2, [pc, #496]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80084d8:	f043 0308 	orr.w	r3, r3, #8
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	4b7a      	ldr	r3, [pc, #488]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	4977      	ldr	r1, [pc, #476]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084f0:	4b75      	ldr	r3, [pc, #468]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	021b      	lsls	r3, r3, #8
 80084fe:	4972      	ldr	r1, [pc, #456]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008500:	4313      	orrs	r3, r2
 8008502:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	4618      	mov	r0, r3
 800850a:	f000 fd7d 	bl	8009008 <RCC_SetFlashLatencyFromMSIRange>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e307      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8008518:	f000 fc2e 	bl	8008d78 <HAL_RCC_GetSysClockFreq>
 800851c:	4601      	mov	r1, r0
 800851e:	4b6a      	ldr	r3, [pc, #424]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008526:	23f0      	movs	r3, #240	; 0xf0
 8008528:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	fa93 f3a3 	rbit	r3, r3
 8008530:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	fab3 f383 	clz	r3, r3
 8008538:	fa22 f303 	lsr.w	r3, r2, r3
 800853c:	4a63      	ldr	r2, [pc, #396]	; (80086cc <HAL_RCC_OscConfig+0x2ac>)
 800853e:	5cd3      	ldrb	r3, [r2, r3]
 8008540:	fa21 f303 	lsr.w	r3, r1, r3
 8008544:	4a62      	ldr	r2, [pc, #392]	; (80086d0 <HAL_RCC_OscConfig+0x2b0>)
 8008546:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8008548:	200f      	movs	r0, #15
 800854a:	f7fe fd03 	bl	8006f54 <HAL_InitTick>
 800854e:	e04f      	b.n	80085f0 <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d032      	beq.n	80085be <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008558:	4b5b      	ldr	r3, [pc, #364]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a5a      	ldr	r2, [pc, #360]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 800855e:	f043 0301 	orr.w	r3, r3, #1
 8008562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008564:	f7fe fd20 	bl	8006fa8 <HAL_GetTick>
 8008568:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800856a:	e008      	b.n	800857e <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800856c:	f7fe fd1c 	bl	8006fa8 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	2b02      	cmp	r3, #2
 8008578:	d901      	bls.n	800857e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e2d4      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800857e:	4b52      	ldr	r3, [pc, #328]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d0f0      	beq.n	800856c <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800858a:	4b4f      	ldr	r3, [pc, #316]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a4e      	ldr	r2, [pc, #312]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008590:	f043 0308 	orr.w	r3, r3, #8
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	4b4c      	ldr	r3, [pc, #304]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	4949      	ldr	r1, [pc, #292]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085a8:	4b47      	ldr	r3, [pc, #284]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	69db      	ldr	r3, [r3, #28]
 80085b4:	021b      	lsls	r3, r3, #8
 80085b6:	4944      	ldr	r1, [pc, #272]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	604b      	str	r3, [r1, #4]
 80085bc:	e018      	b.n	80085f0 <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80085be:	4b42      	ldr	r3, [pc, #264]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a41      	ldr	r2, [pc, #260]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80085c4:	f023 0301 	bic.w	r3, r3, #1
 80085c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80085ca:	f7fe fced 	bl	8006fa8 <HAL_GetTick>
 80085ce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80085d0:	e008      	b.n	80085e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80085d2:	f7fe fce9 	bl	8006fa8 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d901      	bls.n	80085e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e2a1      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80085e4:	4b38      	ldr	r3, [pc, #224]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1f0      	bne.n	80085d2 <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d07e      	beq.n	80086fa <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80085fc:	4b32      	ldr	r3, [pc, #200]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f003 030c 	and.w	r3, r3, #12
 8008604:	2b08      	cmp	r3, #8
 8008606:	d00b      	beq.n	8008620 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008608:	4b2f      	ldr	r3, [pc, #188]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8008610:	2b0c      	cmp	r3, #12
 8008612:	d111      	bne.n	8008638 <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008614:	4b2c      	ldr	r3, [pc, #176]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f003 0303 	and.w	r3, r3, #3
 800861c:	2b03      	cmp	r3, #3
 800861e:	d10b      	bne.n	8008638 <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008620:	4b29      	ldr	r3, [pc, #164]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d065      	beq.n	80086f8 <HAL_RCC_OscConfig+0x2d8>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d161      	bne.n	80086f8 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e277      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008640:	d106      	bne.n	8008650 <HAL_RCC_OscConfig+0x230>
 8008642:	4b21      	ldr	r3, [pc, #132]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a20      	ldr	r2, [pc, #128]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	e01d      	b.n	800868c <HAL_RCC_OscConfig+0x26c>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008658:	d10c      	bne.n	8008674 <HAL_RCC_OscConfig+0x254>
 800865a:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a1a      	ldr	r2, [pc, #104]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	4b18      	ldr	r3, [pc, #96]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 800866c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	e00b      	b.n	800868c <HAL_RCC_OscConfig+0x26c>
 8008674:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a13      	ldr	r2, [pc, #76]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 800867a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a10      	ldr	r2, [pc, #64]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 8008686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800868a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d015      	beq.n	80086c0 <HAL_RCC_OscConfig+0x2a0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008694:	f7fe fc88 	bl	8006fa8 <HAL_GetTick>
 8008698:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800869a:	e00a      	b.n	80086b2 <HAL_RCC_OscConfig+0x292>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800869c:	f7fe fc84 	bl	8006fa8 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d901      	bls.n	80086b2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e23a      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80086b2:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <HAL_RCC_OscConfig+0x2a8>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0ee      	beq.n	800869c <HAL_RCC_OscConfig+0x27c>
 80086be:	e01c      	b.n	80086fa <HAL_RCC_OscConfig+0x2da>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c0:	f7fe fc72 	bl	8006fa8 <HAL_GetTick>
 80086c4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80086c6:	e010      	b.n	80086ea <HAL_RCC_OscConfig+0x2ca>
 80086c8:	40021000 	.word	0x40021000
 80086cc:	0800dca0 	.word	0x0800dca0
 80086d0:	200002d0 	.word	0x200002d0
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086d4:	f7fe fc68 	bl	8006fa8 <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	f241 3288 	movw	r2, #5000	; 0x1388
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e21e      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80086ea:	4bb0      	ldr	r3, [pc, #704]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1ee      	bne.n	80086d4 <HAL_RCC_OscConfig+0x2b4>
 80086f6:	e000      	b.n	80086fa <HAL_RCC_OscConfig+0x2da>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d07f      	beq.n	8008806 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8008706:	4ba9      	ldr	r3, [pc, #676]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 030c 	and.w	r3, r3, #12
 800870e:	2b04      	cmp	r3, #4
 8008710:	d00b      	beq.n	800872a <HAL_RCC_OscConfig+0x30a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008712:	4ba6      	ldr	r3, [pc, #664]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800871a:	2b0c      	cmp	r3, #12
 800871c:	d127      	bne.n	800876e <HAL_RCC_OscConfig+0x34e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800871e:	4ba3      	ldr	r3, [pc, #652]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f003 0303 	and.w	r3, r3, #3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d121      	bne.n	800876e <HAL_RCC_OscConfig+0x34e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800872a:	4ba0      	ldr	r3, [pc, #640]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <HAL_RCC_OscConfig+0x322>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e1f2      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008742:	4b9a      	ldr	r3, [pc, #616]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6919      	ldr	r1, [r3, #16]
 800874e:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8008752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	fa93 f3a3 	rbit	r3, r3
 800875a:	61bb      	str	r3, [r7, #24]
  return(result);
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	fab3 f383 	clz	r3, r3
 8008762:	fa01 f303 	lsl.w	r3, r1, r3
 8008766:	4991      	ldr	r1, [pc, #580]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008768:	4313      	orrs	r3, r2
 800876a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800876c:	e04b      	b.n	8008806 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d02e      	beq.n	80087d4 <HAL_RCC_OscConfig+0x3b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008776:	4b8d      	ldr	r3, [pc, #564]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a8c      	ldr	r2, [pc, #560]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 800877c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008782:	f7fe fc11 	bl	8006fa8 <HAL_GetTick>
 8008786:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8008788:	e008      	b.n	800879c <HAL_RCC_OscConfig+0x37c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800878a:	f7fe fc0d 	bl	8006fa8 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e1c5      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800879c:	4b83      	ldr	r3, [pc, #524]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d0f0      	beq.n	800878a <HAL_RCC_OscConfig+0x36a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087a8:	4b80      	ldr	r3, [pc, #512]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6919      	ldr	r1, [r3, #16]
 80087b4:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 80087b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	fa93 f3a3 	rbit	r3, r3
 80087c0:	613b      	str	r3, [r7, #16]
  return(result);
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	fab3 f383 	clz	r3, r3
 80087c8:	fa01 f303 	lsl.w	r3, r1, r3
 80087cc:	4977      	ldr	r1, [pc, #476]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	604b      	str	r3, [r1, #4]
 80087d2:	e018      	b.n	8008806 <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087d4:	4b75      	ldr	r3, [pc, #468]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a74      	ldr	r2, [pc, #464]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 80087da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e0:	f7fe fbe2 	bl	8006fa8 <HAL_GetTick>
 80087e4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80087e6:	e008      	b.n	80087fa <HAL_RCC_OscConfig+0x3da>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087e8:	f7fe fbde 	bl	8006fa8 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0x3da>
          {
            return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e196      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80087fa:	4b6c      	ldr	r3, [pc, #432]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1f0      	bne.n	80087e8 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0308 	and.w	r3, r3, #8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d03c      	beq.n	800888c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d01c      	beq.n	8008854 <HAL_RCC_OscConfig+0x434>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800881a:	4b64      	ldr	r3, [pc, #400]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 800881c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008820:	4a62      	ldr	r2, [pc, #392]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008822:	f043 0301 	orr.w	r3, r3, #1
 8008826:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800882a:	f7fe fbbd 	bl	8006fa8 <HAL_GetTick>
 800882e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8008830:	e008      	b.n	8008844 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008832:	f7fe fbb9 	bl	8006fa8 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b02      	cmp	r3, #2
 800883e:	d901      	bls.n	8008844 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e171      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8008844:	4b59      	ldr	r3, [pc, #356]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0ef      	beq.n	8008832 <HAL_RCC_OscConfig+0x412>
 8008852:	e01b      	b.n	800888c <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008854:	4b55      	ldr	r3, [pc, #340]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800885a:	4a54      	ldr	r2, [pc, #336]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 800885c:	f023 0301 	bic.w	r3, r3, #1
 8008860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008864:	f7fe fba0 	bl	8006fa8 <HAL_GetTick>
 8008868:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800886a:	e008      	b.n	800887e <HAL_RCC_OscConfig+0x45e>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800886c:	f7fe fb9c 	bl	8006fa8 <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	2b02      	cmp	r3, #2
 8008878:	d901      	bls.n	800887e <HAL_RCC_OscConfig+0x45e>
        {
          return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e154      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800887e:	4b4b      	ldr	r3, [pc, #300]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1ef      	bne.n	800886c <HAL_RCC_OscConfig+0x44c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 80a9 	beq.w	80089ec <HAL_RCC_OscConfig+0x5cc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800889a:	2300      	movs	r3, #0
 800889c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80088a0:	4b42      	ldr	r3, [pc, #264]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 80088a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10e      	bne.n	80088ca <HAL_RCC_OscConfig+0x4aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088ac:	4b3f      	ldr	r3, [pc, #252]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 80088ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b0:	4a3e      	ldr	r2, [pc, #248]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 80088b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088b6:	6593      	str	r3, [r2, #88]	; 0x58
 80088b8:	4b3c      	ldr	r3, [pc, #240]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 80088ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088ca:	4b39      	ldr	r3, [pc, #228]	; (80089b0 <HAL_RCC_OscConfig+0x590>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d118      	bne.n	8008908 <HAL_RCC_OscConfig+0x4e8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088d6:	4b36      	ldr	r3, [pc, #216]	; (80089b0 <HAL_RCC_OscConfig+0x590>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a35      	ldr	r2, [pc, #212]	; (80089b0 <HAL_RCC_OscConfig+0x590>)
 80088dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088e2:	f7fe fb61 	bl	8006fa8 <HAL_GetTick>
 80088e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088e8:	e008      	b.n	80088fc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088ea:	f7fe fb5d 	bl	8006fa8 <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d901      	bls.n	80088fc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e115      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088fc:	4b2c      	ldr	r3, [pc, #176]	; (80089b0 <HAL_RCC_OscConfig+0x590>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0f0      	beq.n	80088ea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d108      	bne.n	8008922 <HAL_RCC_OscConfig+0x502>
 8008910:	4b26      	ldr	r3, [pc, #152]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008916:	4a25      	ldr	r2, [pc, #148]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008918:	f043 0301 	orr.w	r3, r3, #1
 800891c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008920:	e024      	b.n	800896c <HAL_RCC_OscConfig+0x54c>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	2b05      	cmp	r3, #5
 8008928:	d110      	bne.n	800894c <HAL_RCC_OscConfig+0x52c>
 800892a:	4b20      	ldr	r3, [pc, #128]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 800892c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008930:	4a1e      	ldr	r2, [pc, #120]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008932:	f043 0304 	orr.w	r3, r3, #4
 8008936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800893a:	4b1c      	ldr	r3, [pc, #112]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 800893c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008940:	4a1a      	ldr	r2, [pc, #104]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008942:	f043 0301 	orr.w	r3, r3, #1
 8008946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800894a:	e00f      	b.n	800896c <HAL_RCC_OscConfig+0x54c>
 800894c:	4b17      	ldr	r3, [pc, #92]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 800894e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008952:	4a16      	ldr	r2, [pc, #88]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008954:	f023 0301 	bic.w	r3, r3, #1
 8008958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800895c:	4b13      	ldr	r3, [pc, #76]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 800895e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008962:	4a12      	ldr	r2, [pc, #72]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008964:	f023 0304 	bic.w	r3, r3, #4
 8008968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d016      	beq.n	80089a2 <HAL_RCC_OscConfig+0x582>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008974:	f7fe fb18 	bl	8006fa8 <HAL_GetTick>
 8008978:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800897a:	e00a      	b.n	8008992 <HAL_RCC_OscConfig+0x572>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800897c:	f7fe fb14 	bl	8006fa8 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	f241 3288 	movw	r2, #5000	; 0x1388
 800898a:	4293      	cmp	r3, r2
 800898c:	d901      	bls.n	8008992 <HAL_RCC_OscConfig+0x572>
        {
          return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e0ca      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8008992:	4b06      	ldr	r3, [pc, #24]	; (80089ac <HAL_RCC_OscConfig+0x58c>)
 8008994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0ed      	beq.n	800897c <HAL_RCC_OscConfig+0x55c>
 80089a0:	e01a      	b.n	80089d8 <HAL_RCC_OscConfig+0x5b8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089a2:	f7fe fb01 	bl	8006fa8 <HAL_GetTick>
 80089a6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80089a8:	e00f      	b.n	80089ca <HAL_RCC_OscConfig+0x5aa>
 80089aa:	bf00      	nop
 80089ac:	40021000 	.word	0x40021000
 80089b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089b4:	f7fe faf8 	bl	8006fa8 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	f241 3288 	movw	r2, #5000	; 0x1388
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d901      	bls.n	80089ca <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e0ae      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80089ca:	4b59      	ldr	r3, [pc, #356]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 80089cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1ed      	bne.n	80089b4 <HAL_RCC_OscConfig+0x594>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d105      	bne.n	80089ec <HAL_RCC_OscConfig+0x5cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089e0:	4b53      	ldr	r3, [pc, #332]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 80089e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e4:	4a52      	ldr	r2, [pc, #328]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 80089e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8098 	beq.w	8008b26 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089f6:	4b4e      	ldr	r3, [pc, #312]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f003 030c 	and.w	r3, r3, #12
 80089fe:	2b0c      	cmp	r3, #12
 8008a00:	f000 808f 	beq.w	8008b22 <HAL_RCC_OscConfig+0x702>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d156      	bne.n	8008aba <HAL_RCC_OscConfig+0x69a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a0c:	4b48      	ldr	r3, [pc, #288]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a47      	ldr	r2, [pc, #284]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a18:	f7fe fac6 	bl	8006fa8 <HAL_GetTick>
 8008a1c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8008a1e:	e008      	b.n	8008a32 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a20:	f7fe fac2 	bl	8006fa8 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d901      	bls.n	8008a32 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e07a      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8008a32:	4b3f      	ldr	r3, [pc, #252]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f0      	bne.n	8008a20 <HAL_RCC_OscConfig+0x600>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a42:	3b01      	subs	r3, #1
 8008a44:	011a      	lsls	r2, r3, #4
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4a:	021b      	lsls	r3, r3, #8
 8008a4c:	431a      	orrs	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a52:	091b      	lsrs	r3, r3, #4
 8008a54:	045b      	lsls	r3, r3, #17
 8008a56:	431a      	orrs	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a62:	085b      	lsrs	r3, r3, #1
 8008a64:	3b01      	subs	r3, #1
 8008a66:	055b      	lsls	r3, r3, #21
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	085b      	lsrs	r3, r3, #1
 8008a70:	3b01      	subs	r3, #1
 8008a72:	065b      	lsls	r3, r3, #25
 8008a74:	492e      	ldr	r1, [pc, #184]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a7a:	4b2d      	ldr	r3, [pc, #180]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a2c      	ldr	r2, [pc, #176]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a84:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a86:	4b2a      	ldr	r3, [pc, #168]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	4a29      	ldr	r2, [pc, #164]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a90:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a92:	f7fe fa89 	bl	8006fa8 <HAL_GetTick>
 8008a96:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8008a98:	e008      	b.n	8008aac <HAL_RCC_OscConfig+0x68c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a9a:	f7fe fa85 	bl	8006fa8 <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d901      	bls.n	8008aac <HAL_RCC_OscConfig+0x68c>
          {
            return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e03d      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8008aac:	4b20      	ldr	r3, [pc, #128]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d0f0      	beq.n	8008a9a <HAL_RCC_OscConfig+0x67a>
 8008ab8:	e035      	b.n	8008b26 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aba:	4b1d      	ldr	r3, [pc, #116]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a1c      	ldr	r2, [pc, #112]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008ac0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ac4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8008ac6:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10b      	bne.n	8008aea <HAL_RCC_OscConfig+0x6ca>
#if defined(RCC_PLLSAI2_SUPPORT)
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8008ad2:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           && 
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d105      	bne.n	8008aea <HAL_RCC_OscConfig+0x6ca>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008ade:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	4a13      	ldr	r2, [pc, #76]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008ae4:	f023 0303 	bic.w	r3, r3, #3
 8008ae8:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008aea:	4b11      	ldr	r3, [pc, #68]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	4a10      	ldr	r2, [pc, #64]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008af0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008af8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008afa:	f7fe fa55 	bl	8006fa8 <HAL_GetTick>
 8008afe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8008b00:	e008      	b.n	8008b14 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b02:	f7fe fa51 	bl	8006fa8 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d901      	bls.n	8008b14 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e009      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8008b14:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <HAL_RCC_OscConfig+0x710>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1f0      	bne.n	8008b02 <HAL_RCC_OscConfig+0x6e2>
 8008b20:	e001      	b.n	8008b26 <HAL_RCC_OscConfig+0x706>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e000      	b.n	8008b28 <HAL_RCC_OscConfig+0x708>
    }
  }
  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3730      	adds	r7, #48	; 0x30
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	40021000 	.word	0x40021000

08008b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008b42:	4b89      	ldr	r3, [pc, #548]	; (8008d68 <HAL_RCC_ClockConfig+0x234>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d910      	bls.n	8008b72 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b50:	4b85      	ldr	r3, [pc, #532]	; (8008d68 <HAL_RCC_ClockConfig+0x234>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f023 0207 	bic.w	r2, r3, #7
 8008b58:	4983      	ldr	r1, [pc, #524]	; (8008d68 <HAL_RCC_ClockConfig+0x234>)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008b60:	4b81      	ldr	r3, [pc, #516]	; (8008d68 <HAL_RCC_ClockConfig+0x234>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0307 	and.w	r3, r3, #7
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d001      	beq.n	8008b72 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e0f6      	b.n	8008d60 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d008      	beq.n	8008b90 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b7e:	4b7b      	ldr	r3, [pc, #492]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	4978      	ldr	r1, [pc, #480]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 808e 	beq.w	8008cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d107      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8008ba6:	4b71      	ldr	r3, [pc, #452]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d121      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e0d4      	b.n	8008d60 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d107      	bne.n	8008bce <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8008bbe:	4b6b      	ldr	r3, [pc, #428]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d115      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e0c8      	b.n	8008d60 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d107      	bne.n	8008be6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8008bd6:	4b65      	ldr	r3, [pc, #404]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d109      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e0bc      	b.n	8008d60 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8008be6:	4b61      	ldr	r3, [pc, #388]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e0b4      	b.n	8008d60 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008bf6:	4b5d      	ldr	r3, [pc, #372]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f023 0203 	bic.w	r2, r3, #3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	495a      	ldr	r1, [pc, #360]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c08:	f7fe f9ce 	bl	8006fa8 <HAL_GetTick>
 8008c0c:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d112      	bne.n	8008c3c <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8008c16:	e00a      	b.n	8008c2e <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c18:	f7fe f9c6 	bl	8006fa8 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d901      	bls.n	8008c2e <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e098      	b.n	8008d60 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8008c2e:	4b4f      	ldr	r3, [pc, #316]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 030c 	and.w	r3, r3, #12
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	d1ee      	bne.n	8008c18 <HAL_RCC_ClockConfig+0xe4>
 8008c3a:	e03e      	b.n	8008cba <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d112      	bne.n	8008c6a <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c44:	e00a      	b.n	8008c5c <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c46:	f7fe f9af 	bl	8006fa8 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d901      	bls.n	8008c5c <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e081      	b.n	8008d60 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c5c:	4b43      	ldr	r3, [pc, #268]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f003 030c 	and.w	r3, r3, #12
 8008c64:	2b0c      	cmp	r3, #12
 8008c66:	d1ee      	bne.n	8008c46 <HAL_RCC_ClockConfig+0x112>
 8008c68:	e027      	b.n	8008cba <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d11d      	bne.n	8008cae <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8008c72:	e00a      	b.n	8008c8a <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c74:	f7fe f998 	bl	8006fa8 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d901      	bls.n	8008c8a <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e06a      	b.n	8008d60 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8008c8a:	4b38      	ldr	r3, [pc, #224]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f003 030c 	and.w	r3, r3, #12
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1ee      	bne.n	8008c74 <HAL_RCC_ClockConfig+0x140>
 8008c96:	e010      	b.n	8008cba <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c98:	f7fe f986 	bl	8006fa8 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d901      	bls.n	8008cae <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e058      	b.n	8008d60 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8008cae:	4b2f      	ldr	r3, [pc, #188]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f003 030c 	and.w	r3, r3, #12
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d1ee      	bne.n	8008c98 <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8008cba:	4b2b      	ldr	r3, [pc, #172]	; (8008d68 <HAL_RCC_ClockConfig+0x234>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0307 	and.w	r3, r3, #7
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d210      	bcs.n	8008cea <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cc8:	4b27      	ldr	r3, [pc, #156]	; (8008d68 <HAL_RCC_ClockConfig+0x234>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f023 0207 	bic.w	r2, r3, #7
 8008cd0:	4925      	ldr	r1, [pc, #148]	; (8008d68 <HAL_RCC_ClockConfig+0x234>)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008cd8:	4b23      	ldr	r3, [pc, #140]	; (8008d68 <HAL_RCC_ClockConfig+0x234>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d001      	beq.n	8008cea <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e03a      	b.n	8008d60 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0304 	and.w	r3, r3, #4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d008      	beq.n	8008d08 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cf6:	4b1d      	ldr	r3, [pc, #116]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	491a      	ldr	r1, [pc, #104]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d009      	beq.n	8008d28 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d14:	4b15      	ldr	r3, [pc, #84]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	00db      	lsls	r3, r3, #3
 8008d22:	4912      	ldr	r1, [pc, #72]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8008d28:	f000 f826 	bl	8008d78 <HAL_RCC_GetSysClockFreq>
 8008d2c:	4601      	mov	r1, r0
 8008d2e:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <HAL_RCC_ClockConfig+0x238>)
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008d36:	23f0      	movs	r3, #240	; 0xf0
 8008d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	fa93 f3a3 	rbit	r3, r3
 8008d40:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	fab3 f383 	clz	r3, r3
 8008d48:	fa22 f303 	lsr.w	r3, r2, r3
 8008d4c:	4a08      	ldr	r2, [pc, #32]	; (8008d70 <HAL_RCC_ClockConfig+0x23c>)
 8008d4e:	5cd3      	ldrb	r3, [r2, r3]
 8008d50:	fa21 f303 	lsr.w	r3, r1, r3
 8008d54:	4a07      	ldr	r2, [pc, #28]	; (8008d74 <HAL_RCC_ClockConfig+0x240>)
 8008d56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008d58:	200f      	movs	r0, #15
 8008d5a:	f7fe f8fb 	bl	8006f54 <HAL_InitTick>

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	40022000 	.word	0x40022000
 8008d6c:	40021000 	.word	0x40021000
 8008d70:	0800dca0 	.word	0x0800dca0
 8008d74:	200002d0 	.word	0x200002d0

08008d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b095      	sub	sp, #84	; 0x54
 8008d7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d82:	2300      	movs	r3, #0
 8008d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d86:	2300      	movs	r3, #0
 8008d88:	643b      	str	r3, [r7, #64]	; 0x40
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8e:	2302      	movs	r3, #2
 8008d90:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8008d96:	4b71      	ldr	r3, [pc, #452]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f003 030c 	and.w	r3, r3, #12
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00b      	beq.n	8008dba <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8008da2:	4b6e      	ldr	r3, [pc, #440]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8008daa:	2b0c      	cmp	r3, #12
 8008dac:	d13c      	bne.n	8008e28 <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8008dae:	4b6b      	ldr	r3, [pc, #428]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f003 0303 	and.w	r3, r3, #3
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d136      	bne.n	8008e28 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8008dba:	4b68      	ldr	r3, [pc, #416]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0308 	and.w	r3, r3, #8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d112      	bne.n	8008dec <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8008dc6:	4b65      	ldr	r3, [pc, #404]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dcc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008dd0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8008dd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd8:	fa93 f3a3 	rbit	r3, r3
 8008ddc:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	fab3 f383 	clz	r3, r3
 8008de4:	fa22 f303 	lsr.w	r3, r2, r3
 8008de8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dea:	e00f      	b.n	8008e0c <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8008dec:	4b5b      	ldr	r3, [pc, #364]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008df4:	23f0      	movs	r3, #240	; 0xf0
 8008df6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	fa93 f3a3 	rbit	r3, r3
 8008dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e02:	fab3 f383 	clz	r3, r3
 8008e06:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008e0c:	4a54      	ldr	r2, [pc, #336]	; (8008f60 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8008e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e14:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8008e16:	4b51      	ldr	r3, [pc, #324]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f003 030c 	and.w	r3, r3, #12
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d113      	bne.n	8008e4a <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e24:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8008e26:	e010      	b.n	8008e4a <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008e28:	4b4c      	ldr	r3, [pc, #304]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f003 030c 	and.w	r3, r3, #12
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	d102      	bne.n	8008e3a <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008e34:	4b4b      	ldr	r3, [pc, #300]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8008e36:	647b      	str	r3, [r7, #68]	; 0x44
 8008e38:	e007      	b.n	8008e4a <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008e3a:	4b48      	ldr	r3, [pc, #288]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f003 030c 	and.w	r3, r3, #12
 8008e42:	2b08      	cmp	r3, #8
 8008e44:	d101      	bne.n	8008e4a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008e46:	4b48      	ldr	r3, [pc, #288]	; (8008f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008e48:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008e4a:	4b44      	ldr	r3, [pc, #272]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f003 030c 	and.w	r3, r3, #12
 8008e52:	2b0c      	cmp	r3, #12
 8008e54:	d17b      	bne.n	8008f4e <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008e56:	4b41      	ldr	r3, [pc, #260]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	f003 0303 	and.w	r3, r3, #3
 8008e5e:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8008e60:	4b3e      	ldr	r3, [pc, #248]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008e68:	2370      	movs	r3, #112	; 0x70
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	fa93 f3a3 	rbit	r3, r3
 8008e72:	623b      	str	r3, [r7, #32]
  return(result);
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	fab3 f383 	clz	r3, r3
 8008e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7e:	3301      	adds	r3, #1
 8008e80:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 8008e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d002      	beq.n	8008e8e <HAL_RCC_GetSysClockFreq+0x116>
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d018      	beq.n	8008ebe <HAL_RCC_GetSysClockFreq+0x146>
 8008e8c:	e02f      	b.n	8008eee <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8008e8e:	4a35      	ldr	r2, [pc, #212]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e96:	4a31      	ldr	r2, [pc, #196]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008e98:	68d2      	ldr	r2, [r2, #12]
 8008e9a:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8008e9e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008ea2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	fa92 f2a2 	rbit	r2, r2
 8008eaa:	61ba      	str	r2, [r7, #24]
  return(result);
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	fab2 f282 	clz	r2, r2
 8008eb2:	fa21 f202 	lsr.w	r2, r1, r2
 8008eb6:	fb02 f303 	mul.w	r3, r2, r3
 8008eba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ebc:	e02f      	b.n	8008f1e <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8008ebe:	4a2a      	ldr	r2, [pc, #168]	; (8008f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec6:	4a25      	ldr	r2, [pc, #148]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008ec8:	68d2      	ldr	r2, [r2, #12]
 8008eca:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8008ece:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008ed2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	fa92 f2a2 	rbit	r2, r2
 8008eda:	613a      	str	r2, [r7, #16]
  return(result);
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	fab2 f282 	clz	r2, r2
 8008ee2:	fa21 f202 	lsr.w	r2, r1, r2
 8008ee6:	fb02 f303 	mul.w	r3, r2, r3
 8008eea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008eec:	e017      	b.n	8008f1e <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8008eee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef6:	4a19      	ldr	r2, [pc, #100]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008ef8:	68d2      	ldr	r2, [r2, #12]
 8008efa:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8008efe:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008f02:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	fa92 f2a2 	rbit	r2, r2
 8008f0a:	60ba      	str	r2, [r7, #8]
  return(result);
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	fab2 f282 	clz	r2, r2
 8008f12:	fa21 f202 	lsr.w	r2, r1, r2
 8008f16:	fb02 f303 	mul.w	r3, r2, r3
 8008f1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f1c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8008f1e:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008f26:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8008f2a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	fa93 f3a3 	rbit	r3, r3
 8008f32:	603b      	str	r3, [r7, #0]
  return(result);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	fab3 f383 	clz	r3, r3
 8008f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f3e:	3301      	adds	r3, #1
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 8008f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f4c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 8008f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3754      	adds	r7, #84	; 0x54
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bc80      	pop	{r7}
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	40021000 	.word	0x40021000
 8008f60:	0800dcb8 	.word	0x0800dcb8
 8008f64:	00f42400 	.word	0x00f42400
 8008f68:	007a1200 	.word	0x007a1200

08008f6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f70:	4b02      	ldr	r3, [pc, #8]	; (8008f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8008f72:	681b      	ldr	r3, [r3, #0]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bc80      	pop	{r7}
 8008f7a:	4770      	bx	lr
 8008f7c:	200002d0 	.word	0x200002d0

08008f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8008f86:	f7ff fff1 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 8008f8a:	4601      	mov	r1, r0
 8008f8c:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f94:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008f98:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	fa93 f3a3 	rbit	r3, r3
 8008fa0:	603b      	str	r3, [r7, #0]
  return(result);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	fab3 f383 	clz	r3, r3
 8008fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fac:	4a04      	ldr	r2, [pc, #16]	; (8008fc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008fae:	5cd3      	ldrb	r3, [r2, r3]
 8008fb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40021000 	.word	0x40021000
 8008fc0:	0800dcb0 	.word	0x0800dcb0

08008fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8008fca:	f7ff ffcf 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 8008fce:	4601      	mov	r1, r0
 8008fd0:	4b0b      	ldr	r3, [pc, #44]	; (8009000 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8008fd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008fdc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	fa93 f3a3 	rbit	r3, r3
 8008fe4:	603b      	str	r3, [r7, #0]
  return(result);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	fab3 f383 	clz	r3, r3
 8008fec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff0:	4a04      	ldr	r2, [pc, #16]	; (8009004 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008ff2:	5cd3      	ldrb	r3, [r2, r3]
 8008ff4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	40021000 	.word	0x40021000
 8009004:	0800dcb0 	.word	0x0800dcb0

08009008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009014:	2300      	movs	r3, #0
 8009016:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009018:	4b2a      	ldr	r3, [pc, #168]	; (80090c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800901a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800901c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009024:	f7ff f99a 	bl	800835c <HAL_PWREx_GetVoltageRange>
 8009028:	6178      	str	r0, [r7, #20]
 800902a:	e014      	b.n	8009056 <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800902c:	4b25      	ldr	r3, [pc, #148]	; (80090c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800902e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009030:	4a24      	ldr	r2, [pc, #144]	; (80090c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009036:	6593      	str	r3, [r2, #88]	; 0x58
 8009038:	4b22      	ldr	r3, [pc, #136]	; (80090c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800903a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009040:	60fb      	str	r3, [r7, #12]
 8009042:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009044:	f7ff f98a 	bl	800835c <HAL_PWREx_GetVoltageRange>
 8009048:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800904a:	4b1e      	ldr	r3, [pc, #120]	; (80090c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800904c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800904e:	4a1d      	ldr	r2, [pc, #116]	; (80090c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009054:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800905c:	d10b      	bne.n	8009076 <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b80      	cmp	r3, #128	; 0x80
 8009062:	d919      	bls.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2ba0      	cmp	r3, #160	; 0xa0
 8009068:	d902      	bls.n	8009070 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800906a:	2302      	movs	r3, #2
 800906c:	613b      	str	r3, [r7, #16]
 800906e:	e013      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009070:	2301      	movs	r3, #1
 8009072:	613b      	str	r3, [r7, #16]
 8009074:	e010      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b80      	cmp	r3, #128	; 0x80
 800907a:	d902      	bls.n	8009082 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800907c:	2303      	movs	r3, #3
 800907e:	613b      	str	r3, [r7, #16]
 8009080:	e00a      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b80      	cmp	r3, #128	; 0x80
 8009086:	d102      	bne.n	800908e <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009088:	2302      	movs	r3, #2
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	e004      	b.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b70      	cmp	r3, #112	; 0x70
 8009092:	d101      	bne.n	8009098 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009094:	2301      	movs	r3, #1
 8009096:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8009098:	4b0b      	ldr	r3, [pc, #44]	; (80090c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f023 0207 	bic.w	r2, r3, #7
 80090a0:	4909      	ldr	r1, [pc, #36]	; (80090c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80090a8:	4b07      	ldr	r3, [pc, #28]	; (80090c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0307 	and.w	r3, r3, #7
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d001      	beq.n	80090ba <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e000      	b.n	80090bc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	40021000 	.word	0x40021000
 80090c8:	40022000 	.word	0x40022000

080090cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80090d4:	2300      	movs	r3, #0
 80090d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090dc:	2300      	movs	r3, #0
 80090de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090e0:	2300      	movs	r3, #0
 80090e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d03f      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090f8:	d01c      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80090fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090fe:	d802      	bhi.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00e      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009104:	e01f      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800910a:	d003      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x48>
 800910c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009110:	d01c      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x80>
 8009112:	e018      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009114:	4b82      	ldr	r3, [pc, #520]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	4a81      	ldr	r2, [pc, #516]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800911a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800911e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009120:	e015      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	3304      	adds	r3, #4
 8009126:	2100      	movs	r1, #0
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fab3 	bl	8009694 <RCCEx_PLLSAI1_Config>
 800912e:	4603      	mov	r3, r0
 8009130:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009132:	e00c      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3320      	adds	r3, #32
 8009138:	2100      	movs	r1, #0
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fbfe 	bl	800993c <RCCEx_PLLSAI2_Config>
 8009140:	4603      	mov	r3, r0
 8009142:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009144:	e003      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x82>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	74fb      	strb	r3, [r7, #19]
      break;
 800914a:	e000      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 800914c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800914e:	7cfb      	ldrb	r3, [r7, #19]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10b      	bne.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009154:	4b72      	ldr	r3, [pc, #456]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800915a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009162:	496f      	ldr	r1, [pc, #444]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009164:	4313      	orrs	r3, r2
 8009166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800916a:	e001      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800916c:	7cfb      	ldrb	r3, [r7, #19]
 800916e:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d03f      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009184:	d01c      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009186:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800918a:	d802      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00e      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009190:	e01f      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009196:	d003      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009198:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800919c:	d01c      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800919e:	e018      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80091a0:	4b5f      	ldr	r3, [pc, #380]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	4a5e      	ldr	r2, [pc, #376]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80091a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091ac:	e015      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	3304      	adds	r3, #4
 80091b2:	2100      	movs	r1, #0
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 fa6d 	bl	8009694 <RCCEx_PLLSAI1_Config>
 80091ba:	4603      	mov	r3, r0
 80091bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091be:	e00c      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3320      	adds	r3, #32
 80091c4:	2100      	movs	r1, #0
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fbb8 	bl	800993c <RCCEx_PLLSAI2_Config>
 80091cc:	4603      	mov	r3, r0
 80091ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091d0:	e003      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x10e>
    case RCC_SAI2CLKSOURCE_PIN:      /* External clock is used as source of SAI2 clock*/
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	74fb      	strb	r3, [r7, #19]
      break;
 80091d6:	e000      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80091d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091da:	7cfb      	ldrb	r3, [r7, #19]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10b      	bne.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80091e0:	4b4f      	ldr	r3, [pc, #316]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80091e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091ee:	494c      	ldr	r1, [pc, #304]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80091f6:	e001      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f8:	7cfb      	ldrb	r3, [r7, #19]
 80091fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 809a 	beq.w	800933e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 800920a:	2300      	movs	r3, #0
 800920c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800920e:	4b44      	ldr	r3, [pc, #272]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10d      	bne.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800921a:	4b41      	ldr	r3, [pc, #260]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800921c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921e:	4a40      	ldr	r2, [pc, #256]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009224:	6593      	str	r3, [r2, #88]	; 0x58
 8009226:	4b3e      	ldr	r3, [pc, #248]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800922a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800922e:	60bb      	str	r3, [r7, #8]
 8009230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009232:	2301      	movs	r3, #1
 8009234:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009236:	4b3b      	ldr	r3, [pc, #236]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a3a      	ldr	r2, [pc, #232]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800923c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009242:	f7fd feb1 	bl	8006fa8 <HAL_GetTick>
 8009246:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009248:	e009      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800924a:	f7fd fead 	bl	8006fa8 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	2b02      	cmp	r3, #2
 8009256:	d902      	bls.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	74fb      	strb	r3, [r7, #19]
        break;
 800925c:	e005      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800925e:	4b31      	ldr	r3, [pc, #196]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0ef      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 800926a:	7cfb      	ldrb	r3, [r7, #19]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d15b      	bne.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009270:	4b2b      	ldr	r3, [pc, #172]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800927a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d01f      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	429a      	cmp	r2, r3
 800928c:	d019      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800928e:	4b24      	ldr	r3, [pc, #144]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009298:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800929a:	4b21      	ldr	r3, [pc, #132]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800929c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a0:	4a1f      	ldr	r2, [pc, #124]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80092a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092aa:	4b1d      	ldr	r3, [pc, #116]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80092ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b0:	4a1b      	ldr	r2, [pc, #108]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80092b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092ba:	4a19      	ldr	r2, [pc, #100]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d016      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092cc:	f7fd fe6c 	bl	8006fa8 <HAL_GetTick>
 80092d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80092d2:	e00b      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092d4:	f7fd fe68 	bl	8006fa8 <HAL_GetTick>
 80092d8:	4602      	mov	r2, r0
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d902      	bls.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 80092e6:	2303      	movs	r3, #3
 80092e8:	74fb      	strb	r3, [r7, #19]
            break;
 80092ea:	e006      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80092ec:	4b0c      	ldr	r3, [pc, #48]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80092ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0ec      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }
      
      if(ret == HAL_OK)
 80092fa:	7cfb      	ldrb	r3, [r7, #19]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10c      	bne.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009300:	4b07      	ldr	r3, [pc, #28]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009310:	4903      	ldr	r1, [pc, #12]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009312:	4313      	orrs	r3, r2
 8009314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009318:	e008      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800931a:	7cfb      	ldrb	r3, [r7, #19]
 800931c:	74bb      	strb	r3, [r7, #18]
 800931e:	e005      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x260>
 8009320:	40021000 	.word	0x40021000
 8009324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009328:	7cfb      	ldrb	r3, [r7, #19]
 800932a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800932c:	7c7b      	ldrb	r3, [r7, #17]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d105      	bne.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009332:	4b9e      	ldr	r3, [pc, #632]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8009334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009336:	4a9d      	ldr	r2, [pc, #628]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8009338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800933c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00a      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800934a:	4b98      	ldr	r3, [pc, #608]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800934c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009350:	f023 0203 	bic.w	r2, r3, #3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009358:	4994      	ldr	r1, [pc, #592]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800935a:	4313      	orrs	r3, r2
 800935c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0302 	and.w	r3, r3, #2
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00a      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800936c:	4b8f      	ldr	r3, [pc, #572]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800936e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009372:	f023 020c 	bic.w	r2, r3, #12
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937a:	498c      	ldr	r1, [pc, #560]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800937c:	4313      	orrs	r3, r2
 800937e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0304 	and.w	r3, r3, #4
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800938e:	4b87      	ldr	r3, [pc, #540]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8009390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009394:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939c:	4983      	ldr	r1, [pc, #524]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0308 	and.w	r3, r3, #8
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00a      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80093b0:	4b7e      	ldr	r3, [pc, #504]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80093b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093be:	497b      	ldr	r1, [pc, #492]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0310 	and.w	r3, r3, #16
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80093d2:	4b76      	ldr	r3, [pc, #472]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80093d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093e0:	4972      	ldr	r1, [pc, #456]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0320 	and.w	r3, r3, #32
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00a      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093f4:	4b6d      	ldr	r3, [pc, #436]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009402:	496a      	ldr	r1, [pc, #424]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8009404:	4313      	orrs	r3, r2
 8009406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009416:	4b65      	ldr	r3, [pc, #404]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8009418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800941c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009424:	4961      	ldr	r1, [pc, #388]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8009426:	4313      	orrs	r3, r2
 8009428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00a      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009438:	4b5c      	ldr	r3, [pc, #368]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800943a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800943e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009446:	4959      	ldr	r1, [pc, #356]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8009448:	4313      	orrs	r3, r2
 800944a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00a      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800945a:	4b54      	ldr	r3, [pc, #336]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800945c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009460:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009468:	4950      	ldr	r1, [pc, #320]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800946a:	4313      	orrs	r3, r2
 800946c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00a      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800947c:	4b4b      	ldr	r3, [pc, #300]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800947e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009482:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948a:	4948      	ldr	r1, [pc, #288]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800948c:	4313      	orrs	r3, r2
 800948e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800949e:	4b43      	ldr	r3, [pc, #268]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80094a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ac:	493f      	ldr	r1, [pc, #252]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d028      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094c0:	4b3a      	ldr	r3, [pc, #232]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80094c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094ce:	4937      	ldr	r1, [pc, #220]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094de:	d106      	bne.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094e0:	4b32      	ldr	r3, [pc, #200]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	4a31      	ldr	r2, [pc, #196]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80094e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094ea:	60d3      	str	r3, [r2, #12]
 80094ec:	e011      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094f6:	d10c      	bne.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3304      	adds	r3, #4
 80094fc:	2101      	movs	r1, #1
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 f8c8 	bl	8009694 <RCCEx_PLLSAI1_Config>
 8009504:	4603      	mov	r3, r0
 8009506:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8009508:	7cfb      	ldrb	r3, [r7, #19]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* set overall return value */
        status = ret;
 800950e:	7cfb      	ldrb	r3, [r7, #19]
 8009510:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d028      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800951e:	4b23      	ldr	r3, [pc, #140]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8009520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009524:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952c:	491f      	ldr	r1, [pc, #124]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800952e:	4313      	orrs	r3, r2
 8009530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800953c:	d106      	bne.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800953e:	4b1b      	ldr	r3, [pc, #108]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	4a1a      	ldr	r2, [pc, #104]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8009544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009548:	60d3      	str	r3, [r2, #12]
 800954a:	e011      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009554:	d10c      	bne.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	3304      	adds	r3, #4
 800955a:	2101      	movs	r1, #1
 800955c:	4618      	mov	r0, r3
 800955e:	f000 f899 	bl	8009694 <RCCEx_PLLSAI1_Config>
 8009562:	4603      	mov	r3, r0
 8009564:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8009566:	7cfb      	ldrb	r3, [r7, #19]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 800956c:	7cfb      	ldrb	r3, [r7, #19]
 800956e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d02b      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800957c:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800957e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800958a:	4908      	ldr	r1, [pc, #32]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800958c:	4313      	orrs	r3, r2
 800958e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800959a:	d109      	bne.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800959c:	4b03      	ldr	r3, [pc, #12]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	4a02      	ldr	r2, [pc, #8]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80095a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095a6:	60d3      	str	r3, [r2, #12]
 80095a8:	e014      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80095aa:	bf00      	nop
 80095ac:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095b8:	d10c      	bne.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	3304      	adds	r3, #4
 80095be:	2101      	movs	r1, #1
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 f867 	bl	8009694 <RCCEx_PLLSAI1_Config>
 80095c6:	4603      	mov	r3, r0
 80095c8:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 80095ca:	7cfb      	ldrb	r3, [r7, #19]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 80095d0:	7cfb      	ldrb	r3, [r7, #19]
 80095d2:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d02f      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095e0:	4b2b      	ldr	r3, [pc, #172]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80095e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ee:	4928      	ldr	r1, [pc, #160]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095fe:	d10d      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3304      	adds	r3, #4
 8009604:	2102      	movs	r1, #2
 8009606:	4618      	mov	r0, r3
 8009608:	f000 f844 	bl	8009694 <RCCEx_PLLSAI1_Config>
 800960c:	4603      	mov	r3, r0
 800960e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009610:	7cfb      	ldrb	r3, [r7, #19]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d014      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8009616:	7cfb      	ldrb	r3, [r7, #19]
 8009618:	74bb      	strb	r3, [r7, #18]
 800961a:	e011      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009624:	d10c      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3320      	adds	r3, #32
 800962a:	2102      	movs	r1, #2
 800962c:	4618      	mov	r0, r3
 800962e:	f000 f985 	bl	800993c <RCCEx_PLLSAI2_Config>
 8009632:	4603      	mov	r3, r0
 8009634:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8009636:	7cfb      	ldrb	r3, [r7, #19]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 800963c:	7cfb      	ldrb	r3, [r7, #19]
 800963e:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00a      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800964c:	4b10      	ldr	r3, [pc, #64]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800964e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009652:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800965a:	490d      	ldr	r1, [pc, #52]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800965c:	4313      	orrs	r3, r2
 800965e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00b      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800966e:	4b08      	ldr	r3, [pc, #32]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009674:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800967e:	4904      	ldr	r1, [pc, #16]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009680:	4313      	orrs	r3, r2
 8009682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8009686:	7cbb      	ldrb	r3, [r7, #18]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	40021000 	.word	0x40021000

08009694 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b094      	sub	sp, #80	; 0x50
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80096a8:	4ba3      	ldr	r3, [pc, #652]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	f003 0303 	and.w	r3, r3, #3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d023      	beq.n	80096fc <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80096b4:	4ba0      	ldr	r3, [pc, #640]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f003 0203 	and.w	r2, r3, #3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d117      	bne.n	80096f4 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
       || 
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d013      	beq.n	80096f4 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 80096cc:	4b9a      	ldr	r3, [pc, #616]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80096d4:	2370      	movs	r3, #112	; 0x70
 80096d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096da:	fa93 f3a3 	rbit	r3, r3
 80096de:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80096e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096e2:	fab3 f383 	clz	r3, r3
 80096e6:	fa22 f303 	lsr.w	r3, r2, r3
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
       || 
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d054      	beq.n	800979e <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80096fa:	e050      	b.n	800979e <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b02      	cmp	r3, #2
 8009702:	d00d      	beq.n	8009720 <RCCEx_PLLSAI1_Config+0x8c>
 8009704:	2b03      	cmp	r3, #3
 8009706:	d015      	beq.n	8009734 <RCCEx_PLLSAI1_Config+0xa0>
 8009708:	2b01      	cmp	r3, #1
 800970a:	d123      	bne.n	8009754 <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800970c:	4b8a      	ldr	r3, [pc, #552]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0302 	and.w	r3, r3, #2
 8009714:	2b00      	cmp	r3, #0
 8009716:	d121      	bne.n	800975c <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 800971e:	e01d      	b.n	800975c <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009720:	4b85      	ldr	r3, [pc, #532]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009728:	2b00      	cmp	r3, #0
 800972a:	d119      	bne.n	8009760 <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8009732:	e015      	b.n	8009760 <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009734:	4b80      	ldr	r3, [pc, #512]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d111      	bne.n	8009764 <RCCEx_PLLSAI1_Config+0xd0>
 8009740:	4b7d      	ldr	r3, [pc, #500]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10b      	bne.n	8009764 <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8009752:	e007      	b.n	8009764 <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 800975a:	e004      	b.n	8009766 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 800975c:	bf00      	nop
 800975e:	e002      	b.n	8009766 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8009760:	bf00      	nop
 8009762:	e000      	b.n	8009766 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8009764:	bf00      	nop
    }
    
    if(status == HAL_OK)
 8009766:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800976a:	2b00      	cmp	r3, #0
 800976c:	d117      	bne.n	800979e <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 800976e:	4b72      	ldr	r3, [pc, #456]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6819      	ldr	r1, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	1e58      	subs	r0, r3, #1
 8009780:	2370      	movs	r3, #112	; 0x70
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009786:	fa93 f3a3 	rbit	r3, r3
 800978a:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	fab3 f383 	clz	r3, r3
 8009792:	fa00 f303 	lsl.w	r3, r0, r3
 8009796:	430b      	orrs	r3, r1
 8009798:	4967      	ldr	r1, [pc, #412]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 800979a:	4313      	orrs	r3, r2
 800979c:	60cb      	str	r3, [r1, #12]
    }
  }
  
  if(status == HAL_OK)
 800979e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f040 80c2 	bne.w	800992c <RCCEx_PLLSAI1_Config+0x298>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80097a8:	4b63      	ldr	r3, [pc, #396]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a62      	ldr	r2, [pc, #392]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 80097ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097b4:	f7fd fbf8 	bl	8006fa8 <HAL_GetTick>
 80097b8:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80097ba:	e00a      	b.n	80097d2 <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80097bc:	f7fd fbf4 	bl	8006fa8 <HAL_GetTick>
 80097c0:	4602      	mov	r2, r0
 80097c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d903      	bls.n	80097d2 <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 80097ca:	2303      	movs	r3, #3
 80097cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 80097d0:	e005      	b.n	80097de <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80097d2:	4b59      	ldr	r3, [pc, #356]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1ee      	bne.n	80097bc <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 80097de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f040 80a2 	bne.w	800992c <RCCEx_PLLSAI1_Config+0x298>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d126      	bne.n	800983c <RCCEx_PLLSAI1_Config+0x1a8>
        MODIFY_REG(RCC->PLLSAI1CFGR, 
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (PllSai1->PLLSAI1P << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1PDIV)));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80097ee:	4b52      	ldr	r3, [pc, #328]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80097f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	6891      	ldr	r1, [r2, #8]
 80097fe:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8009802:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009806:	fa92 f2a2 	rbit	r2, r2
 800980a:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 800980c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800980e:	fab2 f282 	clz	r2, r2
 8009812:	4091      	lsls	r1, r2
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	68d2      	ldr	r2, [r2, #12]
 8009818:	0910      	lsrs	r0, r2, #4
 800981a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800981e:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009822:	fa92 f2a2 	rbit	r2, r2
 8009826:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8009828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800982a:	fab2 f282 	clz	r2, r2
 800982e:	fa00 f202 	lsl.w	r2, r0, r2
 8009832:	430a      	orrs	r2, r1
 8009834:	4940      	ldr	r1, [pc, #256]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 8009836:	4313      	orrs	r3, r2
 8009838:	610b      	str	r3, [r1, #16]
 800983a:	e051      	b.n	80098e0 <RCCEx_PLLSAI1_Config+0x24c>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d127      	bne.n	8009892 <RCCEx_PLLSAI1_Config+0x1fe>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8009842:	4b3d      	ldr	r3, [pc, #244]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800984a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	6891      	ldr	r1, [r2, #8]
 8009852:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8009856:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009858:	69fa      	ldr	r2, [r7, #28]
 800985a:	fa92 f2a2 	rbit	r2, r2
 800985e:	61ba      	str	r2, [r7, #24]
  return(result);
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	fab2 f282 	clz	r2, r2
 8009866:	4091      	lsls	r1, r2
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	6912      	ldr	r2, [r2, #16]
 800986c:	0852      	lsrs	r2, r2, #1
 800986e:	1e50      	subs	r0, r2, #1
 8009870:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8009874:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009878:	fa92 f2a2 	rbit	r2, r2
 800987c:	623a      	str	r2, [r7, #32]
  return(result);
 800987e:	6a3a      	ldr	r2, [r7, #32]
 8009880:	fab2 f282 	clz	r2, r2
 8009884:	fa00 f202 	lsl.w	r2, r0, r2
 8009888:	430a      	orrs	r2, r1
 800988a:	492b      	ldr	r1, [pc, #172]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 800988c:	4313      	orrs	r3, r2
 800988e:	610b      	str	r3, [r1, #16]
 8009890:	e026      	b.n	80098e0 <RCCEx_PLLSAI1_Config+0x24c>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8009892:	4b29      	ldr	r3, [pc, #164]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800989a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	6891      	ldr	r1, [r2, #8]
 80098a2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80098a6:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	fa92 f2a2 	rbit	r2, r2
 80098ae:	60ba      	str	r2, [r7, #8]
  return(result);
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	fab2 f282 	clz	r2, r2
 80098b6:	4091      	lsls	r1, r2
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	6952      	ldr	r2, [r2, #20]
 80098bc:	0852      	lsrs	r2, r2, #1
 80098be:	1e50      	subs	r0, r2, #1
 80098c0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80098c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	fa92 f2a2 	rbit	r2, r2
 80098cc:	613a      	str	r2, [r7, #16]
  return(result);
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	fab2 f282 	clz	r2, r2
 80098d4:	fa00 f202 	lsl.w	r2, r0, r2
 80098d8:	430a      	orrs	r2, r1
 80098da:	4917      	ldr	r1, [pc, #92]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	610b      	str	r3, [r1, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80098e0:	4b15      	ldr	r3, [pc, #84]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a14      	ldr	r2, [pc, #80]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 80098e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098ec:	f7fd fb5c 	bl	8006fa8 <HAL_GetTick>
 80098f0:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80098f2:	e00a      	b.n	800990a <RCCEx_PLLSAI1_Config+0x276>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098f4:	f7fd fb58 	bl	8006fa8 <HAL_GetTick>
 80098f8:	4602      	mov	r2, r0
 80098fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d903      	bls.n	800990a <RCCEx_PLLSAI1_Config+0x276>
        {
          status = HAL_TIMEOUT;
 8009902:	2303      	movs	r3, #3
 8009904:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8009908:	e005      	b.n	8009916 <RCCEx_PLLSAI1_Config+0x282>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800990a:	4b0b      	ldr	r3, [pc, #44]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0ee      	beq.n	80098f4 <RCCEx_PLLSAI1_Config+0x260>
        }
      }

      if(status == HAL_OK)    
 8009916:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800991a:	2b00      	cmp	r3, #0
 800991c:	d106      	bne.n	800992c <RCCEx_PLLSAI1_Config+0x298>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800991e:	4b06      	ldr	r3, [pc, #24]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 8009920:	691a      	ldr	r2, [r3, #16]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	4904      	ldr	r1, [pc, #16]	; (8009938 <RCCEx_PLLSAI1_Config+0x2a4>)
 8009928:	4313      	orrs	r3, r2
 800992a:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 800992c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009930:	4618      	mov	r0, r3
 8009932:	3750      	adds	r7, #80	; 0x50
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	40021000 	.word	0x40021000

0800993c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b090      	sub	sp, #64	; 0x40
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
  
  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009950:	4b8d      	ldr	r3, [pc, #564]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	2b00      	cmp	r3, #0
 800995a:	d023      	beq.n	80099a4 <RCCEx_PLLSAI2_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800995c:	4b8a      	ldr	r3, [pc, #552]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f003 0203 	and.w	r2, r3, #3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d117      	bne.n	800999c <RCCEx_PLLSAI2_Config+0x60>
       || 
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
       || 
 8009970:	2b00      	cmp	r3, #0
 8009972:	d013      	beq.n	800999c <RCCEx_PLLSAI2_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai2->PLLSAI2M)
 8009974:	4b84      	ldr	r3, [pc, #528]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800997c:	2370      	movs	r3, #112	; 0x70
 800997e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009982:	fa93 f3a3 	rbit	r3, r3
 8009986:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	fab3 f383 	clz	r3, r3
 800998e:	fa22 f303 	lsr.w	r3, r2, r3
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
       || 
 8009998:	429a      	cmp	r2, r3
 800999a:	d054      	beq.n	8009a46 <RCCEx_PLLSAI2_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80099a2:	e050      	b.n	8009a46 <RCCEx_PLLSAI2_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d00d      	beq.n	80099c8 <RCCEx_PLLSAI2_Config+0x8c>
 80099ac:	2b03      	cmp	r3, #3
 80099ae:	d015      	beq.n	80099dc <RCCEx_PLLSAI2_Config+0xa0>
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d123      	bne.n	80099fc <RCCEx_PLLSAI2_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80099b4:	4b74      	ldr	r3, [pc, #464]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d121      	bne.n	8009a04 <RCCEx_PLLSAI2_Config+0xc8>
      {
        status = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 80099c6:	e01d      	b.n	8009a04 <RCCEx_PLLSAI2_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80099c8:	4b6f      	ldr	r3, [pc, #444]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d119      	bne.n	8009a08 <RCCEx_PLLSAI2_Config+0xcc>
      {
        status = HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 80099da:	e015      	b.n	8009a08 <RCCEx_PLLSAI2_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80099dc:	4b6a      	ldr	r3, [pc, #424]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d111      	bne.n	8009a0c <RCCEx_PLLSAI2_Config+0xd0>
 80099e8:	4b67      	ldr	r3, [pc, #412]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10b      	bne.n	8009a0c <RCCEx_PLLSAI2_Config+0xd0>
      {
        status = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 80099fa:	e007      	b.n	8009a0c <RCCEx_PLLSAI2_Config+0xd0>
    default:
      status = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8009a02:	e004      	b.n	8009a0e <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8009a04:	bf00      	nop
 8009a06:	e002      	b.n	8009a0e <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8009a08:	bf00      	nop
 8009a0a:	e000      	b.n	8009a0e <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8009a0c:	bf00      	nop
    }
    
    if(status == HAL_OK)
 8009a0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d117      	bne.n	8009a46 <RCCEx_PLLSAI2_Config+0x10a>
    {
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8009a16:	4b5c      	ldr	r3, [pc, #368]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6819      	ldr	r1, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	1e58      	subs	r0, r3, #1
 8009a28:	2370      	movs	r3, #112	; 0x70
 8009a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2e:	fa93 f3a3 	rbit	r3, r3
 8009a32:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	fab3 f383 	clz	r3, r3
 8009a3a:	fa00 f303 	lsl.w	r3, r0, r3
 8009a3e:	430b      	orrs	r3, r1
 8009a40:	4951      	ldr	r1, [pc, #324]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60cb      	str	r3, [r1, #12]
    }
  }
  
  if(status == HAL_OK)
 8009a46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f040 8096 	bne.w	8009b7c <RCCEx_PLLSAI2_Config+0x240>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009a50:	4b4d      	ldr	r3, [pc, #308]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a4c      	ldr	r2, [pc, #304]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a5c:	f7fd faa4 	bl	8006fa8 <HAL_GetTick>
 8009a60:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8009a62:	e00a      	b.n	8009a7a <RCCEx_PLLSAI2_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a64:	f7fd faa0 	bl	8006fa8 <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d903      	bls.n	8009a7a <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 8009a78:	e005      	b.n	8009a86 <RCCEx_PLLSAI2_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8009a7a:	4b43      	ldr	r3, [pc, #268]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1ee      	bne.n	8009a64 <RCCEx_PLLSAI2_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 8009a86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d176      	bne.n	8009b7c <RCCEx_PLLSAI2_Config+0x240>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d126      	bne.n	8009ae2 <RCCEx_PLLSAI2_Config+0x1a6>
        MODIFY_REG(RCC->PLLSAI2CFGR, 
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV, 
                   (PllSai2->PLLSAI2N << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2N)) | 
                   (PllSai2->PLLSAI2P << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2PDIV)));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 8009a94:	4b3c      	ldr	r3, [pc, #240]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	6891      	ldr	r1, [r2, #8]
 8009aa4:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8009aa8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aaa:	69fa      	ldr	r2, [r7, #28]
 8009aac:	fa92 f2a2 	rbit	r2, r2
 8009ab0:	61ba      	str	r2, [r7, #24]
  return(result);
 8009ab2:	69ba      	ldr	r2, [r7, #24]
 8009ab4:	fab2 f282 	clz	r2, r2
 8009ab8:	4091      	lsls	r1, r2
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	68d2      	ldr	r2, [r2, #12]
 8009abe:	0910      	lsrs	r0, r2, #4
 8009ac0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009ac4:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac8:	fa92 f2a2 	rbit	r2, r2
 8009acc:	623a      	str	r2, [r7, #32]
  return(result);
 8009ace:	6a3a      	ldr	r2, [r7, #32]
 8009ad0:	fab2 f282 	clz	r2, r2
 8009ad4:	fa00 f202 	lsl.w	r2, r0, r2
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	492b      	ldr	r1, [pc, #172]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	614b      	str	r3, [r1, #20]
 8009ae0:	e026      	b.n	8009b30 <RCCEx_PLLSAI2_Config+0x1f4>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 8009ae2:	4b29      	ldr	r3, [pc, #164]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009aea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	6891      	ldr	r1, [r2, #8]
 8009af2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8009af6:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	fa92 f2a2 	rbit	r2, r2
 8009afe:	60ba      	str	r2, [r7, #8]
  return(result);
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	fab2 f282 	clz	r2, r2
 8009b06:	4091      	lsls	r1, r2
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	6912      	ldr	r2, [r2, #16]
 8009b0c:	0852      	lsrs	r2, r2, #1
 8009b0e:	1e50      	subs	r0, r2, #1
 8009b10:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8009b14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	fa92 f2a2 	rbit	r2, r2
 8009b1c:	613a      	str	r2, [r7, #16]
  return(result);
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	fab2 f282 	clz	r2, r2
 8009b24:	fa00 f202 	lsl.w	r2, r0, r2
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	4917      	ldr	r1, [pc, #92]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	614b      	str	r3, [r1, #20]
                   (PllSai2->PLLSAI2N << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2N)) | 
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2R)));
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009b30:	4b15      	ldr	r3, [pc, #84]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a14      	ldr	r2, [pc, #80]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b3c:	f7fd fa34 	bl	8006fa8 <HAL_GetTick>
 8009b40:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8009b42:	e00a      	b.n	8009b5a <RCCEx_PLLSAI2_Config+0x21e>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009b44:	f7fd fa30 	bl	8006fa8 <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d903      	bls.n	8009b5a <RCCEx_PLLSAI2_Config+0x21e>
        {
          status = HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 8009b58:	e005      	b.n	8009b66 <RCCEx_PLLSAI2_Config+0x22a>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8009b5a:	4b0b      	ldr	r3, [pc, #44]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0ee      	beq.n	8009b44 <RCCEx_PLLSAI2_Config+0x208>
        }
      }

      if(status == HAL_OK)    
 8009b66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d106      	bne.n	8009b7c <RCCEx_PLLSAI2_Config+0x240>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009b6e:	4b06      	ldr	r3, [pc, #24]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009b70:	695a      	ldr	r2, [r3, #20]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	4904      	ldr	r1, [pc, #16]	; (8009b88 <RCCEx_PLLSAI2_Config+0x24c>)
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	614b      	str	r3, [r1, #20]
      }
    }
  }
  
  return status;
 8009b7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3740      	adds	r7, #64	; 0x40
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	40021000 	.word	0x40021000

08009b8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2202      	movs	r2, #2
 8009b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0201 	orr.w	r2, r2, #1
 8009baa:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bc80      	pop	{r7}
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d101      	bne.n	8009bd2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e01d      	b.n	8009c0e <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d106      	bne.n	8009bec <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f002 fafe 	bl	800c1e8 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4610      	mov	r0, r2
 8009c00:	f000 f888 	bl	8009d14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
	...

08009c18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d101      	bne.n	8009c32 <HAL_TIM_OC_ConfigChannel+0x1a>
 8009c2e:	2302      	movs	r3, #2
 8009c30:	e06c      	b.n	8009d0c <HAL_TIM_OC_ConfigChannel+0xf4>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b14      	cmp	r3, #20
 8009c46:	d857      	bhi.n	8009cf8 <HAL_TIM_OC_ConfigChannel+0xe0>
 8009c48:	a201      	add	r2, pc, #4	; (adr r2, 8009c50 <HAL_TIM_OC_ConfigChannel+0x38>)
 8009c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4e:	bf00      	nop
 8009c50:	08009ca5 	.word	0x08009ca5
 8009c54:	08009cf9 	.word	0x08009cf9
 8009c58:	08009cf9 	.word	0x08009cf9
 8009c5c:	08009cf9 	.word	0x08009cf9
 8009c60:	08009cb3 	.word	0x08009cb3
 8009c64:	08009cf9 	.word	0x08009cf9
 8009c68:	08009cf9 	.word	0x08009cf9
 8009c6c:	08009cf9 	.word	0x08009cf9
 8009c70:	08009cc1 	.word	0x08009cc1
 8009c74:	08009cf9 	.word	0x08009cf9
 8009c78:	08009cf9 	.word	0x08009cf9
 8009c7c:	08009cf9 	.word	0x08009cf9
 8009c80:	08009ccf 	.word	0x08009ccf
 8009c84:	08009cf9 	.word	0x08009cf9
 8009c88:	08009cf9 	.word	0x08009cf9
 8009c8c:	08009cf9 	.word	0x08009cf9
 8009c90:	08009cdd 	.word	0x08009cdd
 8009c94:	08009cf9 	.word	0x08009cf9
 8009c98:	08009cf9 	.word	0x08009cf9
 8009c9c:	08009cf9 	.word	0x08009cf9
 8009ca0:	08009ceb 	.word	0x08009ceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

     /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68b9      	ldr	r1, [r7, #8]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 f8c6 	bl	8009e3c <TIM_OC1_SetConfig>
    }
    break;
 8009cb0:	e023      	b.n	8009cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68b9      	ldr	r1, [r7, #8]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 f955 	bl	8009f68 <TIM_OC2_SetConfig>
    }
    break;
 8009cbe:	e01c      	b.n	8009cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68b9      	ldr	r1, [r7, #8]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 f9dc 	bl	800a084 <TIM_OC3_SetConfig>
    }
    break;
 8009ccc:	e015      	b.n	8009cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68b9      	ldr	r1, [r7, #8]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 fa63 	bl	800a1a0 <TIM_OC4_SetConfig>
    }
    break;
 8009cda:	e00e      	b.n	8009cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

       /* Configure the TIM Channel 5 in Output Compare */
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68b9      	ldr	r1, [r7, #8]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 faca 	bl	800a27c <TIM_OC5_SetConfig>
    }
    break;
 8009ce8:	e007      	b.n	8009cfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

       /* Configure the TIM Channel 6 in Output Compare */
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68b9      	ldr	r1, [r7, #8]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 fb2d 	bl	800a350 <TIM_OC6_SetConfig>
    }
    break;
 8009cf6:	e000      	b.n	8009cfa <HAL_TIM_OC_ConfigChannel+0xe2>

    default:
    break;
 8009cf8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a3c      	ldr	r2, [pc, #240]	; (8009e1c <TIM_Base_SetConfig+0x108>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d013      	beq.n	8009d58 <TIM_Base_SetConfig+0x44>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d36:	d00f      	beq.n	8009d58 <TIM_Base_SetConfig+0x44>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a39      	ldr	r2, [pc, #228]	; (8009e20 <TIM_Base_SetConfig+0x10c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d00b      	beq.n	8009d58 <TIM_Base_SetConfig+0x44>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a38      	ldr	r2, [pc, #224]	; (8009e24 <TIM_Base_SetConfig+0x110>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d007      	beq.n	8009d58 <TIM_Base_SetConfig+0x44>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a37      	ldr	r2, [pc, #220]	; (8009e28 <TIM_Base_SetConfig+0x114>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d003      	beq.n	8009d58 <TIM_Base_SetConfig+0x44>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a36      	ldr	r2, [pc, #216]	; (8009e2c <TIM_Base_SetConfig+0x118>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d108      	bne.n	8009d6a <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a2b      	ldr	r2, [pc, #172]	; (8009e1c <TIM_Base_SetConfig+0x108>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d01f      	beq.n	8009db2 <TIM_Base_SetConfig+0x9e>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d78:	d01b      	beq.n	8009db2 <TIM_Base_SetConfig+0x9e>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a28      	ldr	r2, [pc, #160]	; (8009e20 <TIM_Base_SetConfig+0x10c>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d017      	beq.n	8009db2 <TIM_Base_SetConfig+0x9e>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a27      	ldr	r2, [pc, #156]	; (8009e24 <TIM_Base_SetConfig+0x110>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d013      	beq.n	8009db2 <TIM_Base_SetConfig+0x9e>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a26      	ldr	r2, [pc, #152]	; (8009e28 <TIM_Base_SetConfig+0x114>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d00f      	beq.n	8009db2 <TIM_Base_SetConfig+0x9e>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a25      	ldr	r2, [pc, #148]	; (8009e2c <TIM_Base_SetConfig+0x118>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d00b      	beq.n	8009db2 <TIM_Base_SetConfig+0x9e>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a24      	ldr	r2, [pc, #144]	; (8009e30 <TIM_Base_SetConfig+0x11c>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d007      	beq.n	8009db2 <TIM_Base_SetConfig+0x9e>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a23      	ldr	r2, [pc, #140]	; (8009e34 <TIM_Base_SetConfig+0x120>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d003      	beq.n	8009db2 <TIM_Base_SetConfig+0x9e>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a22      	ldr	r2, [pc, #136]	; (8009e38 <TIM_Base_SetConfig+0x124>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d108      	bne.n	8009dc4 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	689a      	ldr	r2, [r3, #8]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a0f      	ldr	r2, [pc, #60]	; (8009e1c <TIM_Base_SetConfig+0x108>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d00f      	beq.n	8009e02 <TIM_Base_SetConfig+0xee>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a11      	ldr	r2, [pc, #68]	; (8009e2c <TIM_Base_SetConfig+0x118>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d00b      	beq.n	8009e02 <TIM_Base_SetConfig+0xee>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a10      	ldr	r2, [pc, #64]	; (8009e30 <TIM_Base_SetConfig+0x11c>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d007      	beq.n	8009e02 <TIM_Base_SetConfig+0xee>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a0f      	ldr	r2, [pc, #60]	; (8009e34 <TIM_Base_SetConfig+0x120>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d003      	beq.n	8009e02 <TIM_Base_SetConfig+0xee>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a0e      	ldr	r2, [pc, #56]	; (8009e38 <TIM_Base_SetConfig+0x124>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d103      	bne.n	8009e0a <TIM_Base_SetConfig+0xf6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	691a      	ldr	r2, [r3, #16]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	615a      	str	r2, [r3, #20]
}
 8009e10:	bf00      	nop
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bc80      	pop	{r7}
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	40012c00 	.word	0x40012c00
 8009e20:	40000400 	.word	0x40000400
 8009e24:	40000800 	.word	0x40000800
 8009e28:	40000c00 	.word	0x40000c00
 8009e2c:	40013400 	.word	0x40013400
 8009e30:	40014000 	.word	0x40014000
 8009e34:	40014400 	.word	0x40014400
 8009e38:	40014800 	.word	0x40014800

08009e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	f023 0201 	bic.w	r2, r3, #1
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 0303 	bic.w	r3, r3, #3
 8009e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	f023 0302 	bic.w	r3, r3, #2
 8009e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a2c      	ldr	r2, [pc, #176]	; (8009f54 <TIM_OC1_SetConfig+0x118>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d00f      	beq.n	8009ec8 <TIM_OC1_SetConfig+0x8c>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a2b      	ldr	r2, [pc, #172]	; (8009f58 <TIM_OC1_SetConfig+0x11c>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d00b      	beq.n	8009ec8 <TIM_OC1_SetConfig+0x8c>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a2a      	ldr	r2, [pc, #168]	; (8009f5c <TIM_OC1_SetConfig+0x120>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d007      	beq.n	8009ec8 <TIM_OC1_SetConfig+0x8c>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a29      	ldr	r2, [pc, #164]	; (8009f60 <TIM_OC1_SetConfig+0x124>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d003      	beq.n	8009ec8 <TIM_OC1_SetConfig+0x8c>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a28      	ldr	r2, [pc, #160]	; (8009f64 <TIM_OC1_SetConfig+0x128>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d10c      	bne.n	8009ee2 <TIM_OC1_SetConfig+0xa6>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f023 0308 	bic.w	r3, r3, #8
 8009ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f023 0304 	bic.w	r3, r3, #4
 8009ee0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a1b      	ldr	r2, [pc, #108]	; (8009f54 <TIM_OC1_SetConfig+0x118>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d00f      	beq.n	8009f0a <TIM_OC1_SetConfig+0xce>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4a1a      	ldr	r2, [pc, #104]	; (8009f58 <TIM_OC1_SetConfig+0x11c>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d00b      	beq.n	8009f0a <TIM_OC1_SetConfig+0xce>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4a19      	ldr	r2, [pc, #100]	; (8009f5c <TIM_OC1_SetConfig+0x120>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d007      	beq.n	8009f0a <TIM_OC1_SetConfig+0xce>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a18      	ldr	r2, [pc, #96]	; (8009f60 <TIM_OC1_SetConfig+0x124>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d003      	beq.n	8009f0a <TIM_OC1_SetConfig+0xce>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a17      	ldr	r2, [pc, #92]	; (8009f64 <TIM_OC1_SetConfig+0x128>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d111      	bne.n	8009f2e <TIM_OC1_SetConfig+0xf2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	685a      	ldr	r2, [r3, #4]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	621a      	str	r2, [r3, #32]
}
 8009f48:	bf00      	nop
 8009f4a:	371c      	adds	r7, #28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bc80      	pop	{r7}
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	40012c00 	.word	0x40012c00
 8009f58:	40013400 	.word	0x40013400
 8009f5c:	40014000 	.word	0x40014000
 8009f60:	40014400 	.word	0x40014400
 8009f64:	40014800 	.word	0x40014800

08009f68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b087      	sub	sp, #28
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	f023 0210 	bic.w	r2, r3, #16
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	021b      	lsls	r3, r3, #8
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	f023 0320 	bic.w	r3, r3, #32
 8009fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	011b      	lsls	r3, r3, #4
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a27      	ldr	r2, [pc, #156]	; (800a070 <TIM_OC2_SetConfig+0x108>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d003      	beq.n	8009fe0 <TIM_OC2_SetConfig+0x78>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a26      	ldr	r2, [pc, #152]	; (800a074 <TIM_OC2_SetConfig+0x10c>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d10d      	bne.n	8009ffc <TIM_OC2_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	011b      	lsls	r3, r3, #4
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ffa:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a1c      	ldr	r2, [pc, #112]	; (800a070 <TIM_OC2_SetConfig+0x108>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d00f      	beq.n	800a024 <TIM_OC2_SetConfig+0xbc>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a1b      	ldr	r2, [pc, #108]	; (800a074 <TIM_OC2_SetConfig+0x10c>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d00b      	beq.n	800a024 <TIM_OC2_SetConfig+0xbc>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a1a      	ldr	r2, [pc, #104]	; (800a078 <TIM_OC2_SetConfig+0x110>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d007      	beq.n	800a024 <TIM_OC2_SetConfig+0xbc>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a19      	ldr	r2, [pc, #100]	; (800a07c <TIM_OC2_SetConfig+0x114>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d003      	beq.n	800a024 <TIM_OC2_SetConfig+0xbc>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a18      	ldr	r2, [pc, #96]	; (800a080 <TIM_OC2_SetConfig+0x118>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d113      	bne.n	800a04c <TIM_OC2_SetConfig+0xe4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a02a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	4313      	orrs	r3, r2
 800a04a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	621a      	str	r2, [r3, #32]
}
 800a066:	bf00      	nop
 800a068:	371c      	adds	r7, #28
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bc80      	pop	{r7}
 800a06e:	4770      	bx	lr
 800a070:	40012c00 	.word	0x40012c00
 800a074:	40013400 	.word	0x40013400
 800a078:	40014000 	.word	0x40014000
 800a07c:	40014400 	.word	0x40014400
 800a080:	40014800 	.word	0x40014800

0800a084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800a08e:	2300      	movs	r3, #0
 800a090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a1b      	ldr	r3, [r3, #32]
 800a0aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	69db      	ldr	r3, [r3, #28]
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f023 0303 	bic.w	r3, r3, #3
 800a0ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a27      	ldr	r2, [pc, #156]	; (800a18c <TIM_OC3_SetConfig+0x108>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d003      	beq.n	800a0fa <TIM_OC3_SetConfig+0x76>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a26      	ldr	r2, [pc, #152]	; (800a190 <TIM_OC3_SetConfig+0x10c>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d10d      	bne.n	800a116 <TIM_OC3_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	021b      	lsls	r3, r3, #8
 800a108:	697a      	ldr	r2, [r7, #20]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a114:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a1c      	ldr	r2, [pc, #112]	; (800a18c <TIM_OC3_SetConfig+0x108>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d00f      	beq.n	800a13e <TIM_OC3_SetConfig+0xba>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a1b      	ldr	r2, [pc, #108]	; (800a190 <TIM_OC3_SetConfig+0x10c>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d00b      	beq.n	800a13e <TIM_OC3_SetConfig+0xba>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a1a      	ldr	r2, [pc, #104]	; (800a194 <TIM_OC3_SetConfig+0x110>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d007      	beq.n	800a13e <TIM_OC3_SetConfig+0xba>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a19      	ldr	r2, [pc, #100]	; (800a198 <TIM_OC3_SetConfig+0x114>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d003      	beq.n	800a13e <TIM_OC3_SetConfig+0xba>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a18      	ldr	r2, [pc, #96]	; (800a19c <TIM_OC3_SetConfig+0x118>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d113      	bne.n	800a166 <TIM_OC3_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a14c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	011b      	lsls	r3, r3, #4
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	4313      	orrs	r3, r2
 800a158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	011b      	lsls	r3, r3, #4
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	4313      	orrs	r3, r2
 800a164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	621a      	str	r2, [r3, #32]
}
 800a180:	bf00      	nop
 800a182:	371c      	adds	r7, #28
 800a184:	46bd      	mov	sp, r7
 800a186:	bc80      	pop	{r7}
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	40012c00 	.word	0x40012c00
 800a190:	40013400 	.word	0x40013400
 800a194:	40014000 	.word	0x40014000
 800a198:	40014400 	.word	0x40014400
 800a19c:	40014800 	.word	0x40014800

0800a1a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b087      	sub	sp, #28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	69db      	ldr	r3, [r3, #28]
 800a1d2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1de:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1e6:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	021b      	lsls	r3, r3, #8
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1fa:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	031b      	lsls	r3, r3, #12
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	4313      	orrs	r3, r2
 800a206:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a17      	ldr	r2, [pc, #92]	; (800a268 <TIM_OC4_SetConfig+0xc8>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d00f      	beq.n	800a230 <TIM_OC4_SetConfig+0x90>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a16      	ldr	r2, [pc, #88]	; (800a26c <TIM_OC4_SetConfig+0xcc>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d00b      	beq.n	800a230 <TIM_OC4_SetConfig+0x90>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a15      	ldr	r2, [pc, #84]	; (800a270 <TIM_OC4_SetConfig+0xd0>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d007      	beq.n	800a230 <TIM_OC4_SetConfig+0x90>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a14      	ldr	r2, [pc, #80]	; (800a274 <TIM_OC4_SetConfig+0xd4>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d003      	beq.n	800a230 <TIM_OC4_SetConfig+0x90>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a13      	ldr	r2, [pc, #76]	; (800a278 <TIM_OC4_SetConfig+0xd8>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d109      	bne.n	800a244 <TIM_OC4_SetConfig+0xa4>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a236:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	019b      	lsls	r3, r3, #6
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	4313      	orrs	r3, r2
 800a242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	621a      	str	r2, [r3, #32]
}
 800a25e:	bf00      	nop
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	bc80      	pop	{r7}
 800a266:	4770      	bx	lr
 800a268:	40012c00 	.word	0x40012c00
 800a26c:	40013400 	.word	0x40013400
 800a270:	40014000 	.word	0x40014000
 800a274:	40014400 	.word	0x40014400
 800a278:	40014800 	.word	0x40014800

0800a27c <TIM_OC5_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b087      	sub	sp, #28
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800a28a:	2300      	movs	r3, #0
 800a28c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ae:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ba:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a2cc:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	041b      	lsls	r3, r3, #16
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a17      	ldr	r2, [pc, #92]	; (800a33c <TIM_OC5_SetConfig+0xc0>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d00f      	beq.n	800a302 <TIM_OC5_SetConfig+0x86>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a16      	ldr	r2, [pc, #88]	; (800a340 <TIM_OC5_SetConfig+0xc4>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d00b      	beq.n	800a302 <TIM_OC5_SetConfig+0x86>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a15      	ldr	r2, [pc, #84]	; (800a344 <TIM_OC5_SetConfig+0xc8>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d007      	beq.n	800a302 <TIM_OC5_SetConfig+0x86>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a14      	ldr	r2, [pc, #80]	; (800a348 <TIM_OC5_SetConfig+0xcc>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d003      	beq.n	800a302 <TIM_OC5_SetConfig+0x86>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a13      	ldr	r2, [pc, #76]	; (800a34c <TIM_OC5_SetConfig+0xd0>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d109      	bne.n	800a316 <TIM_OC5_SetConfig+0x9a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a308:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	021b      	lsls	r3, r3, #8
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	4313      	orrs	r3, r2
 800a314:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	685a      	ldr	r2, [r3, #4]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	621a      	str	r2, [r3, #32]
}
 800a330:	bf00      	nop
 800a332:	371c      	adds	r7, #28
 800a334:	46bd      	mov	sp, r7
 800a336:	bc80      	pop	{r7}
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	40012c00 	.word	0x40012c00
 800a340:	40013400 	.word	0x40013400
 800a344:	40014000 	.word	0x40014000
 800a348:	40014400 	.word	0x40014400
 800a34c:	40014800 	.word	0x40014800

0800a350 <TIM_OC6_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a350:	b480      	push	{r7}
 800a352:	b087      	sub	sp, #28
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a382:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	021b      	lsls	r3, r3, #8
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	4313      	orrs	r3, r2
 800a39a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3a2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	051b      	lsls	r3, r3, #20
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a17      	ldr	r2, [pc, #92]	; (800a410 <TIM_OC6_SetConfig+0xc0>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d00f      	beq.n	800a3d8 <TIM_OC6_SetConfig+0x88>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a16      	ldr	r2, [pc, #88]	; (800a414 <TIM_OC6_SetConfig+0xc4>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d00b      	beq.n	800a3d8 <TIM_OC6_SetConfig+0x88>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a15      	ldr	r2, [pc, #84]	; (800a418 <TIM_OC6_SetConfig+0xc8>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d007      	beq.n	800a3d8 <TIM_OC6_SetConfig+0x88>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a14      	ldr	r2, [pc, #80]	; (800a41c <TIM_OC6_SetConfig+0xcc>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d003      	beq.n	800a3d8 <TIM_OC6_SetConfig+0x88>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a13      	ldr	r2, [pc, #76]	; (800a420 <TIM_OC6_SetConfig+0xd0>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d109      	bne.n	800a3ec <TIM_OC6_SetConfig+0x9c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	029b      	lsls	r3, r3, #10
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	697a      	ldr	r2, [r7, #20]
 800a3f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	621a      	str	r2, [r3, #32]
}
 800a406:	bf00      	nop
 800a408:	371c      	adds	r7, #28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bc80      	pop	{r7}
 800a40e:	4770      	bx	lr
 800a410:	40012c00 	.word	0x40012c00
 800a414:	40013400 	.word	0x40013400
 800a418:	40014000 	.word	0x40014000
 800a41c:	40014400 	.word	0x40014400
 800a420:	40014800 	.word	0x40014800

0800a424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a434:	2b01      	cmp	r3, #1
 800a436:	d101      	bne.n	800a43c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a438:	2302      	movs	r3, #2
 800a43a:	e03d      	b.n	800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a1a      	ldr	r2, [pc, #104]	; (800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d004      	beq.n	800a468 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a19      	ldr	r2, [pc, #100]	; (800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d108      	bne.n	800a47a <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a46e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	4313      	orrs	r3, r2
 800a478:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a480:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4313      	orrs	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a492:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3714      	adds	r7, #20
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bc80      	pop	{r7}
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	40012c00 	.word	0x40012c00
 800a4c8:	40013400 	.word	0x40013400

0800a4cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e043      	b.n	800a566 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d106      	bne.n	800a4f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7f6 fbf0 	bl	8000cd8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2224      	movs	r2, #36	; 0x24
 800a4fc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f022 0201 	bic.w	r2, r2, #1
 800a50e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f9d9 	bl	800a8c8 <UART_SetConfig>
 800a516:	4603      	mov	r3, r0
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d101      	bne.n	800a520 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e022      	b.n	800a566 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fcff 	bl	800af2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a53c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	689a      	ldr	r2, [r3, #8]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a54c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f042 0201 	orr.w	r2, r2, #1
 800a55c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fd85 	bl	800b06e <UART_CheckIdleState>
 800a564:	4603      	mov	r3, r0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	4613      	mov	r3, r2
 800a57c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b20      	cmp	r3, #32
 800a588:	d154      	bne.n	800a634 <HAL_UART_Transmit_DMA+0xc4>
  {
    if((pData == NULL ) || (Size == 0))
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d002      	beq.n	800a596 <HAL_UART_Transmit_DMA+0x26>
 800a590:	88fb      	ldrh	r3, [r7, #6]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d101      	bne.n	800a59a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e04d      	b.n	800a636 <HAL_UART_Transmit_DMA+0xc6>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d101      	bne.n	800a5a8 <HAL_UART_Transmit_DMA+0x38>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	e046      	b.n	800a636 <HAL_UART_Transmit_DMA+0xc6>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pTxBuffPtr = pData;
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	88fa      	ldrh	r2, [r7, #6]
 800a5ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	88fa      	ldrh	r2, [r7, #6]
 800a5c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2221      	movs	r2, #33	; 0x21
 800a5d0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5d8:	4a19      	ldr	r2, [pc, #100]	; (800a640 <HAL_UART_Transmit_DMA+0xd0>)
 800a5da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5e0:	4a18      	ldr	r2, [pc, #96]	; (800a644 <HAL_UART_Transmit_DMA+0xd4>)
 800a5e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5e8:	4a17      	ldr	r2, [pc, #92]	; (800a648 <HAL_UART_Transmit_DMA+0xd8>)
 800a5ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 800a5f4:	f107 0308 	add.w	r3, r7, #8
 800a5f8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	6819      	ldr	r1, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	3328      	adds	r3, #40	; 0x28
 800a608:	461a      	mov	r2, r3
 800a60a:	88fb      	ldrh	r3, [r7, #6]
 800a60c:	f7fc fedc 	bl	80073c8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2240      	movs	r2, #64	; 0x40
 800a616:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	689a      	ldr	r2, [r3, #8]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a62e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	e000      	b.n	800a636 <HAL_UART_Transmit_DMA+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800a634:	2302      	movs	r3, #2
  }
}
 800a636:	4618      	mov	r0, r3
 800a638:	3718      	adds	r7, #24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	0800b1f9 	.word	0x0800b1f9
 800a644:	0800b24d 	.word	0x0800b24d
 800a648:	0800b269 	.word	0x0800b269

0800a64c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	69db      	ldr	r3, [r3, #28]
 800a65a:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f003 030f 	and.w	r3, r3, #15
 800a66a:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10d      	bne.n	800a68e <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f003 0320 	and.w	r3, r3, #32
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d008      	beq.n	800a68e <HAL_UART_IRQHandler+0x42>
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	f003 0320 	and.w	r3, r3, #32
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fead 	bl	800b3e6 <UART_Receive_IT>
      return;
 800a68c:	e0fa      	b.n	800a884 <HAL_UART_IRQHandler+0x238>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	60bb      	str	r3, [r7, #8]
  if((errorflags != RESET) && ((cr3its & (USART_CR3_EIE | USART_CR1_PEIE)) != RESET))
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 80b6 	beq.w	800a80a <HAL_UART_IRQHandler+0x1be>
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	f240 1301 	movw	r3, #257	; 0x101
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 80af 	beq.w	800a80a <HAL_UART_IRQHandler+0x1be>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	f003 0301 	and.w	r3, r3, #1
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00e      	beq.n	800a6d4 <HAL_UART_IRQHandler+0x88>
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d009      	beq.n	800a6d4 <HAL_UART_IRQHandler+0x88>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6cc:	f043 0201 	orr.w	r2, r3, #1
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	f003 0302 	and.w	r3, r3, #2
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00e      	beq.n	800a6fc <HAL_UART_IRQHandler+0xb0>
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d009      	beq.n	800a6fc <HAL_UART_IRQHandler+0xb0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f4:	f043 0204 	orr.w	r2, r3, #4
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f003 0304 	and.w	r3, r3, #4
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00e      	beq.n	800a724 <HAL_UART_IRQHandler+0xd8>
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d009      	beq.n	800a724 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2204      	movs	r2, #4
 800a716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a71c:	f043 0202 	orr.w	r2, r3, #2
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f003 0308 	and.w	r3, r3, #8
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d013      	beq.n	800a756 <HAL_UART_IRQHandler+0x10a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800a734:	2b00      	cmp	r3, #0
 800a736:	d104      	bne.n	800a742 <HAL_UART_IRQHandler+0xf6>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d009      	beq.n	800a756 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2208      	movs	r2, #8
 800a748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a74e:	f043 0208 	orr.w	r2, r3, #8
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 8091 	beq.w	800a882 <HAL_UART_IRQHandler+0x236>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	f003 0320 	and.w	r3, r3, #32
 800a766:	2b00      	cmp	r3, #0
 800a768:	d007      	beq.n	800a77a <HAL_UART_IRQHandler+0x12e>
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	f003 0320 	and.w	r3, r3, #32
 800a770:	2b00      	cmp	r3, #0
 800a772:	d002      	beq.n	800a77a <HAL_UART_IRQHandler+0x12e>
      {
        UART_Receive_IT(huart);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fe36 	bl	800b3e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a77e:	f003 0308 	and.w	r3, r3, #8
 800a782:	2b00      	cmp	r3, #0
 800a784:	d106      	bne.n	800a794 <HAL_UART_IRQHandler+0x148>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800a790:	2b40      	cmp	r3, #64	; 0x40
 800a792:	d131      	bne.n	800a7f8 <HAL_UART_IRQHandler+0x1ac>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fd12 	bl	800b1be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a4:	2b40      	cmp	r3, #64	; 0x40
 800a7a6:	d123      	bne.n	800a7f0 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689a      	ldr	r2, [r3, #8]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7b6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d013      	beq.n	800a7e8 <HAL_UART_IRQHandler+0x19c>
          {
            /* Set the UART DMA Abort callback : 
            will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7c4:	4a31      	ldr	r2, [pc, #196]	; (800a88c <HAL_UART_IRQHandler+0x240>)
 800a7c6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fc fe5b 	bl	8007488 <HAL_DMA_Abort_IT>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d016      	beq.n	800a806 <HAL_UART_IRQHandler+0x1ba>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7e6:	e00e      	b.n	800a806 <HAL_UART_IRQHandler+0x1ba>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 f863 	bl	800a8b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7ee:	e00a      	b.n	800a806 <HAL_UART_IRQHandler+0x1ba>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f85f 	bl	800a8b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7f6:	e006      	b.n	800a806 <HAL_UART_IRQHandler+0x1ba>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f85b 	bl	800a8b4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 800a804:	e03d      	b.n	800a882 <HAL_UART_IRQHandler+0x236>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a806:	bf00      	nop
    return;
 800a808:	e03b      	b.n	800a882 <HAL_UART_IRQHandler+0x236>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  cr3its = READ_REG(huart->Instance->CR3);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	60bb      	str	r3, [r7, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d015      	beq.n	800a848 <HAL_UART_IRQHandler+0x1fc>
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d010      	beq.n	800a848 <HAL_UART_IRQHandler+0x1fc>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a82e:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2220      	movs	r2, #32
 800a834:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2220      	movs	r2, #32
 800a83c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 fe3d 	bl	800b4c0 <HAL_UARTEx_WakeupCallback>
    return;
 800a846:	e01d      	b.n	800a884 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d008      	beq.n	800a864 <HAL_UART_IRQHandler+0x218>
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d003      	beq.n	800a864 <HAL_UART_IRQHandler+0x218>
  {
    UART_Transmit_IT(huart);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fd55 	bl	800b30c <UART_Transmit_IT>
    return;
 800a862:	e00f      	b.n	800a884 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00a      	beq.n	800a884 <HAL_UART_IRQHandler+0x238>
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a874:	2b00      	cmp	r3, #0
 800a876:	d005      	beq.n	800a884 <HAL_UART_IRQHandler+0x238>
  {
    UART_EndTransmit_IT(huart);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fd9c 	bl	800b3b6 <UART_EndTransmit_IT>
    return;
 800a87e:	bf00      	nop
 800a880:	e000      	b.n	800a884 <HAL_UART_IRQHandler+0x238>
    return;
 800a882:	bf00      	nop
  }

}
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	0800b2e1 	.word	0x0800b2e1

0800a890 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bc80      	pop	{r7}
 800a8a0:	4770      	bx	lr

0800a8a2 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b083      	sub	sp, #12
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a8aa:	bf00      	nop
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bc80      	pop	{r7}
 800a8b2:	4770      	bx	lr

0800a8b4 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bc80      	pop	{r7}
 800a8c4:	4770      	bx	lr
	...

0800a8c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a8cc:	b086      	sub	sp, #24
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	617b      	str	r3, [r7, #20]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a8d6:	2310      	movs	r3, #16
 800a8d8:	74fb      	strb	r3, [r7, #19]
  uint16_t brrtemp                    = 0x0000;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	81bb      	strh	r3, [r7, #12]
  uint16_t usartdiv                   = 0x0000;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	823b      	strh	r3, [r7, #16]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	73fb      	strb	r3, [r7, #15]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	431a      	orrs	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	431a      	orrs	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	4bac      	ldr	r3, [pc, #688]	; (800abb8 <UART_SetConfig+0x2f0>)
 800a906:	4013      	ands	r3, r2
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	6812      	ldr	r2, [r2, #0]
 800a90c:	6979      	ldr	r1, [r7, #20]
 800a90e:	430b      	orrs	r3, r1
 800a910:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	68da      	ldr	r2, [r3, #12]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	430a      	orrs	r2, r1
 800a926:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4aa2      	ldr	r2, [pc, #648]	; (800abbc <UART_SetConfig+0x2f4>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d004      	beq.n	800a942 <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a1b      	ldr	r3, [r3, #32]
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	4313      	orrs	r3, r2
 800a940:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	430a      	orrs	r2, r1
 800a954:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a99      	ldr	r2, [pc, #612]	; (800abc0 <UART_SetConfig+0x2f8>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d121      	bne.n	800a9a4 <UART_SetConfig+0xdc>
 800a960:	4b98      	ldr	r3, [pc, #608]	; (800abc4 <UART_SetConfig+0x2fc>)
 800a962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	2b03      	cmp	r3, #3
 800a96c:	d816      	bhi.n	800a99c <UART_SetConfig+0xd4>
 800a96e:	a201      	add	r2, pc, #4	; (adr r2, 800a974 <UART_SetConfig+0xac>)
 800a970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a974:	0800a985 	.word	0x0800a985
 800a978:	0800a991 	.word	0x0800a991
 800a97c:	0800a98b 	.word	0x0800a98b
 800a980:	0800a997 	.word	0x0800a997
 800a984:	2301      	movs	r3, #1
 800a986:	74fb      	strb	r3, [r7, #19]
 800a988:	e0e6      	b.n	800ab58 <UART_SetConfig+0x290>
 800a98a:	2302      	movs	r3, #2
 800a98c:	74fb      	strb	r3, [r7, #19]
 800a98e:	e0e3      	b.n	800ab58 <UART_SetConfig+0x290>
 800a990:	2304      	movs	r3, #4
 800a992:	74fb      	strb	r3, [r7, #19]
 800a994:	e0e0      	b.n	800ab58 <UART_SetConfig+0x290>
 800a996:	2308      	movs	r3, #8
 800a998:	74fb      	strb	r3, [r7, #19]
 800a99a:	e0dd      	b.n	800ab58 <UART_SetConfig+0x290>
 800a99c:	2310      	movs	r3, #16
 800a99e:	74fb      	strb	r3, [r7, #19]
 800a9a0:	bf00      	nop
 800a9a2:	e0d9      	b.n	800ab58 <UART_SetConfig+0x290>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a87      	ldr	r2, [pc, #540]	; (800abc8 <UART_SetConfig+0x300>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d134      	bne.n	800aa18 <UART_SetConfig+0x150>
 800a9ae:	4b85      	ldr	r3, [pc, #532]	; (800abc4 <UART_SetConfig+0x2fc>)
 800a9b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b4:	f003 030c 	and.w	r3, r3, #12
 800a9b8:	2b0c      	cmp	r3, #12
 800a9ba:	d829      	bhi.n	800aa10 <UART_SetConfig+0x148>
 800a9bc:	a201      	add	r2, pc, #4	; (adr r2, 800a9c4 <UART_SetConfig+0xfc>)
 800a9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c2:	bf00      	nop
 800a9c4:	0800a9f9 	.word	0x0800a9f9
 800a9c8:	0800aa11 	.word	0x0800aa11
 800a9cc:	0800aa11 	.word	0x0800aa11
 800a9d0:	0800aa11 	.word	0x0800aa11
 800a9d4:	0800aa05 	.word	0x0800aa05
 800a9d8:	0800aa11 	.word	0x0800aa11
 800a9dc:	0800aa11 	.word	0x0800aa11
 800a9e0:	0800aa11 	.word	0x0800aa11
 800a9e4:	0800a9ff 	.word	0x0800a9ff
 800a9e8:	0800aa11 	.word	0x0800aa11
 800a9ec:	0800aa11 	.word	0x0800aa11
 800a9f0:	0800aa11 	.word	0x0800aa11
 800a9f4:	0800aa0b 	.word	0x0800aa0b
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	74fb      	strb	r3, [r7, #19]
 800a9fc:	e0ac      	b.n	800ab58 <UART_SetConfig+0x290>
 800a9fe:	2302      	movs	r3, #2
 800aa00:	74fb      	strb	r3, [r7, #19]
 800aa02:	e0a9      	b.n	800ab58 <UART_SetConfig+0x290>
 800aa04:	2304      	movs	r3, #4
 800aa06:	74fb      	strb	r3, [r7, #19]
 800aa08:	e0a6      	b.n	800ab58 <UART_SetConfig+0x290>
 800aa0a:	2308      	movs	r3, #8
 800aa0c:	74fb      	strb	r3, [r7, #19]
 800aa0e:	e0a3      	b.n	800ab58 <UART_SetConfig+0x290>
 800aa10:	2310      	movs	r3, #16
 800aa12:	74fb      	strb	r3, [r7, #19]
 800aa14:	bf00      	nop
 800aa16:	e09f      	b.n	800ab58 <UART_SetConfig+0x290>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a6b      	ldr	r2, [pc, #428]	; (800abcc <UART_SetConfig+0x304>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d120      	bne.n	800aa64 <UART_SetConfig+0x19c>
 800aa22:	4b68      	ldr	r3, [pc, #416]	; (800abc4 <UART_SetConfig+0x2fc>)
 800aa24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aa2c:	2b10      	cmp	r3, #16
 800aa2e:	d00f      	beq.n	800aa50 <UART_SetConfig+0x188>
 800aa30:	2b10      	cmp	r3, #16
 800aa32:	d802      	bhi.n	800aa3a <UART_SetConfig+0x172>
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d005      	beq.n	800aa44 <UART_SetConfig+0x17c>
 800aa38:	e010      	b.n	800aa5c <UART_SetConfig+0x194>
 800aa3a:	2b20      	cmp	r3, #32
 800aa3c:	d005      	beq.n	800aa4a <UART_SetConfig+0x182>
 800aa3e:	2b30      	cmp	r3, #48	; 0x30
 800aa40:	d009      	beq.n	800aa56 <UART_SetConfig+0x18e>
 800aa42:	e00b      	b.n	800aa5c <UART_SetConfig+0x194>
 800aa44:	2300      	movs	r3, #0
 800aa46:	74fb      	strb	r3, [r7, #19]
 800aa48:	e086      	b.n	800ab58 <UART_SetConfig+0x290>
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	74fb      	strb	r3, [r7, #19]
 800aa4e:	e083      	b.n	800ab58 <UART_SetConfig+0x290>
 800aa50:	2304      	movs	r3, #4
 800aa52:	74fb      	strb	r3, [r7, #19]
 800aa54:	e080      	b.n	800ab58 <UART_SetConfig+0x290>
 800aa56:	2308      	movs	r3, #8
 800aa58:	74fb      	strb	r3, [r7, #19]
 800aa5a:	e07d      	b.n	800ab58 <UART_SetConfig+0x290>
 800aa5c:	2310      	movs	r3, #16
 800aa5e:	74fb      	strb	r3, [r7, #19]
 800aa60:	bf00      	nop
 800aa62:	e079      	b.n	800ab58 <UART_SetConfig+0x290>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a59      	ldr	r2, [pc, #356]	; (800abd0 <UART_SetConfig+0x308>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d120      	bne.n	800aab0 <UART_SetConfig+0x1e8>
 800aa6e:	4b55      	ldr	r3, [pc, #340]	; (800abc4 <UART_SetConfig+0x2fc>)
 800aa70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa78:	2b40      	cmp	r3, #64	; 0x40
 800aa7a:	d00f      	beq.n	800aa9c <UART_SetConfig+0x1d4>
 800aa7c:	2b40      	cmp	r3, #64	; 0x40
 800aa7e:	d802      	bhi.n	800aa86 <UART_SetConfig+0x1be>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d005      	beq.n	800aa90 <UART_SetConfig+0x1c8>
 800aa84:	e010      	b.n	800aaa8 <UART_SetConfig+0x1e0>
 800aa86:	2b80      	cmp	r3, #128	; 0x80
 800aa88:	d005      	beq.n	800aa96 <UART_SetConfig+0x1ce>
 800aa8a:	2bc0      	cmp	r3, #192	; 0xc0
 800aa8c:	d009      	beq.n	800aaa2 <UART_SetConfig+0x1da>
 800aa8e:	e00b      	b.n	800aaa8 <UART_SetConfig+0x1e0>
 800aa90:	2300      	movs	r3, #0
 800aa92:	74fb      	strb	r3, [r7, #19]
 800aa94:	e060      	b.n	800ab58 <UART_SetConfig+0x290>
 800aa96:	2302      	movs	r3, #2
 800aa98:	74fb      	strb	r3, [r7, #19]
 800aa9a:	e05d      	b.n	800ab58 <UART_SetConfig+0x290>
 800aa9c:	2304      	movs	r3, #4
 800aa9e:	74fb      	strb	r3, [r7, #19]
 800aaa0:	e05a      	b.n	800ab58 <UART_SetConfig+0x290>
 800aaa2:	2308      	movs	r3, #8
 800aaa4:	74fb      	strb	r3, [r7, #19]
 800aaa6:	e057      	b.n	800ab58 <UART_SetConfig+0x290>
 800aaa8:	2310      	movs	r3, #16
 800aaaa:	74fb      	strb	r3, [r7, #19]
 800aaac:	bf00      	nop
 800aaae:	e053      	b.n	800ab58 <UART_SetConfig+0x290>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a47      	ldr	r2, [pc, #284]	; (800abd4 <UART_SetConfig+0x30c>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d124      	bne.n	800ab04 <UART_SetConfig+0x23c>
 800aaba:	4b42      	ldr	r3, [pc, #264]	; (800abc4 <UART_SetConfig+0x2fc>)
 800aabc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aac8:	d012      	beq.n	800aaf0 <UART_SetConfig+0x228>
 800aaca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aace:	d802      	bhi.n	800aad6 <UART_SetConfig+0x20e>
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d007      	beq.n	800aae4 <UART_SetConfig+0x21c>
 800aad4:	e012      	b.n	800aafc <UART_SetConfig+0x234>
 800aad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aada:	d006      	beq.n	800aaea <UART_SetConfig+0x222>
 800aadc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aae0:	d009      	beq.n	800aaf6 <UART_SetConfig+0x22e>
 800aae2:	e00b      	b.n	800aafc <UART_SetConfig+0x234>
 800aae4:	2300      	movs	r3, #0
 800aae6:	74fb      	strb	r3, [r7, #19]
 800aae8:	e036      	b.n	800ab58 <UART_SetConfig+0x290>
 800aaea:	2302      	movs	r3, #2
 800aaec:	74fb      	strb	r3, [r7, #19]
 800aaee:	e033      	b.n	800ab58 <UART_SetConfig+0x290>
 800aaf0:	2304      	movs	r3, #4
 800aaf2:	74fb      	strb	r3, [r7, #19]
 800aaf4:	e030      	b.n	800ab58 <UART_SetConfig+0x290>
 800aaf6:	2308      	movs	r3, #8
 800aaf8:	74fb      	strb	r3, [r7, #19]
 800aafa:	e02d      	b.n	800ab58 <UART_SetConfig+0x290>
 800aafc:	2310      	movs	r3, #16
 800aafe:	74fb      	strb	r3, [r7, #19]
 800ab00:	bf00      	nop
 800ab02:	e029      	b.n	800ab58 <UART_SetConfig+0x290>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a2c      	ldr	r2, [pc, #176]	; (800abbc <UART_SetConfig+0x2f4>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d123      	bne.n	800ab56 <UART_SetConfig+0x28e>
 800ab0e:	4b2d      	ldr	r3, [pc, #180]	; (800abc4 <UART_SetConfig+0x2fc>)
 800ab10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ab18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab1c:	d012      	beq.n	800ab44 <UART_SetConfig+0x27c>
 800ab1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab22:	d802      	bhi.n	800ab2a <UART_SetConfig+0x262>
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d007      	beq.n	800ab38 <UART_SetConfig+0x270>
 800ab28:	e012      	b.n	800ab50 <UART_SetConfig+0x288>
 800ab2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab2e:	d006      	beq.n	800ab3e <UART_SetConfig+0x276>
 800ab30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab34:	d009      	beq.n	800ab4a <UART_SetConfig+0x282>
 800ab36:	e00b      	b.n	800ab50 <UART_SetConfig+0x288>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	74fb      	strb	r3, [r7, #19]
 800ab3c:	e00c      	b.n	800ab58 <UART_SetConfig+0x290>
 800ab3e:	2302      	movs	r3, #2
 800ab40:	74fb      	strb	r3, [r7, #19]
 800ab42:	e009      	b.n	800ab58 <UART_SetConfig+0x290>
 800ab44:	2304      	movs	r3, #4
 800ab46:	74fb      	strb	r3, [r7, #19]
 800ab48:	e006      	b.n	800ab58 <UART_SetConfig+0x290>
 800ab4a:	2308      	movs	r3, #8
 800ab4c:	74fb      	strb	r3, [r7, #19]
 800ab4e:	e003      	b.n	800ab58 <UART_SetConfig+0x290>
 800ab50:	2310      	movs	r3, #16
 800ab52:	74fb      	strb	r3, [r7, #19]
 800ab54:	e000      	b.n	800ab58 <UART_SetConfig+0x290>
 800ab56:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a17      	ldr	r2, [pc, #92]	; (800abbc <UART_SetConfig+0x2f4>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	f040 80fc 	bne.w	800ad5c <UART_SetConfig+0x494>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	617b      	str	r3, [r7, #20]

    switch (clocksource)
 800ab68:	7cfb      	ldrb	r3, [r7, #19]
 800ab6a:	2b08      	cmp	r3, #8
 800ab6c:	d836      	bhi.n	800abdc <UART_SetConfig+0x314>
 800ab6e:	a201      	add	r2, pc, #4	; (adr r2, 800ab74 <UART_SetConfig+0x2ac>)
 800ab70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab74:	0800ab99 	.word	0x0800ab99
 800ab78:	0800abdd 	.word	0x0800abdd
 800ab7c:	0800aba1 	.word	0x0800aba1
 800ab80:	0800abdd 	.word	0x0800abdd
 800ab84:	0800aba7 	.word	0x0800aba7
 800ab88:	0800abdd 	.word	0x0800abdd
 800ab8c:	0800abdd 	.word	0x0800abdd
 800ab90:	0800abdd 	.word	0x0800abdd
 800ab94:	0800abaf 	.word	0x0800abaf
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800ab98:	f7fe f9f2 	bl	8008f80 <HAL_RCC_GetPCLK1Freq>
 800ab9c:	6178      	str	r0, [r7, #20]
      break;
 800ab9e:	e020      	b.n	800abe2 <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 800aba0:	4b0d      	ldr	r3, [pc, #52]	; (800abd8 <UART_SetConfig+0x310>)
 800aba2:	617b      	str	r3, [r7, #20]
      break;
 800aba4:	e01d      	b.n	800abe2 <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 800aba6:	f7fe f8e7 	bl	8008d78 <HAL_RCC_GetSysClockFreq>
 800abaa:	6178      	str	r0, [r7, #20]
      break;
 800abac:	e019      	b.n	800abe2 <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 800abae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abb2:	617b      	str	r3, [r7, #20]
      break;
 800abb4:	e015      	b.n	800abe2 <UART_SetConfig+0x31a>
 800abb6:	bf00      	nop
 800abb8:	efff69f3 	.word	0xefff69f3
 800abbc:	40008000 	.word	0x40008000
 800abc0:	40013800 	.word	0x40013800
 800abc4:	40021000 	.word	0x40021000
 800abc8:	40004400 	.word	0x40004400
 800abcc:	40004800 	.word	0x40004800
 800abd0:	40004c00 	.word	0x40004c00
 800abd4:	40005000 	.word	0x40005000
 800abd8:	00f42400 	.word	0x00f42400
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	73fb      	strb	r3, [r7, #15]
      break;
 800abe0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 8198 	beq.w	800af1a <UART_SetConfig+0x652>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685a      	ldr	r2, [r3, #4]
 800abee:	4613      	mov	r3, r2
 800abf0:	005b      	lsls	r3, r3, #1
 800abf2:	4413      	add	r3, r2
 800abf4:	697a      	ldr	r2, [r7, #20]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d305      	bcc.n	800ac06 <UART_SetConfig+0x33e>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	031b      	lsls	r3, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d902      	bls.n	800ac0c <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	73fb      	strb	r3, [r7, #15]
 800ac0a:	e186      	b.n	800af1a <UART_SetConfig+0x652>
      }
      else
      {
        switch (clocksource)
 800ac0c:	7cfb      	ldrb	r3, [r7, #19]
 800ac0e:	2b08      	cmp	r3, #8
 800ac10:	f200 8091 	bhi.w	800ad36 <UART_SetConfig+0x46e>
 800ac14:	a201      	add	r2, pc, #4	; (adr r2, 800ac1c <UART_SetConfig+0x354>)
 800ac16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac1a:	bf00      	nop
 800ac1c:	0800ac41 	.word	0x0800ac41
 800ac20:	0800ad37 	.word	0x0800ad37
 800ac24:	0800ac8d 	.word	0x0800ac8d
 800ac28:	0800ad37 	.word	0x0800ad37
 800ac2c:	0800acc1 	.word	0x0800acc1
 800ac30:	0800ad37 	.word	0x0800ad37
 800ac34:	0800ad37 	.word	0x0800ad37
 800ac38:	0800ad37 	.word	0x0800ad37
 800ac3c:	0800ad0d 	.word	0x0800ad0d
        {
        case UART_CLOCKSOURCE_PCLK1:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800ac40:	f7fe f99e 	bl	8008f80 <HAL_RCC_GetPCLK1Freq>
 800ac44:	4603      	mov	r3, r0
 800ac46:	4619      	mov	r1, r3
 800ac48:	f04f 0200 	mov.w	r2, #0
 800ac4c:	f04f 0300 	mov.w	r3, #0
 800ac50:	f04f 0400 	mov.w	r4, #0
 800ac54:	0214      	lsls	r4, r2, #8
 800ac56:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ac5a:	020b      	lsls	r3, r1, #8
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	6852      	ldr	r2, [r2, #4]
 800ac60:	0852      	lsrs	r2, r2, #1
 800ac62:	4611      	mov	r1, r2
 800ac64:	f04f 0200 	mov.w	r2, #0
 800ac68:	eb13 0b01 	adds.w	fp, r3, r1
 800ac6c:	eb44 0c02 	adc.w	ip, r4, r2
 800ac70:	4658      	mov	r0, fp
 800ac72:	4661      	mov	r1, ip
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	f04f 0400 	mov.w	r4, #0
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	4623      	mov	r3, r4
 800ac80:	f7f5 faf6 	bl	8000270 <__aeabi_uldivmod>
 800ac84:	4603      	mov	r3, r0
 800ac86:	460c      	mov	r4, r1
 800ac88:	617b      	str	r3, [r7, #20]
          break;
 800ac8a:	e057      	b.n	800ad3c <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_HSI:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	085b      	lsrs	r3, r3, #1
 800ac92:	f04f 0400 	mov.w	r4, #0
 800ac96:	49a4      	ldr	r1, [pc, #656]	; (800af28 <UART_SetConfig+0x660>)
 800ac98:	f04f 0200 	mov.w	r2, #0
 800ac9c:	eb13 0b01 	adds.w	fp, r3, r1
 800aca0:	eb44 0c02 	adc.w	ip, r4, r2
 800aca4:	4658      	mov	r0, fp
 800aca6:	4661      	mov	r1, ip
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	f04f 0400 	mov.w	r4, #0
 800acb0:	461a      	mov	r2, r3
 800acb2:	4623      	mov	r3, r4
 800acb4:	f7f5 fadc 	bl	8000270 <__aeabi_uldivmod>
 800acb8:	4603      	mov	r3, r0
 800acba:	460c      	mov	r4, r1
 800acbc:	617b      	str	r3, [r7, #20]
          break;
 800acbe:	e03d      	b.n	800ad3c <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_SYSCLK:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800acc0:	f7fe f85a 	bl	8008d78 <HAL_RCC_GetSysClockFreq>
 800acc4:	4603      	mov	r3, r0
 800acc6:	4619      	mov	r1, r3
 800acc8:	f04f 0200 	mov.w	r2, #0
 800accc:	f04f 0300 	mov.w	r3, #0
 800acd0:	f04f 0400 	mov.w	r4, #0
 800acd4:	0214      	lsls	r4, r2, #8
 800acd6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800acda:	020b      	lsls	r3, r1, #8
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	6852      	ldr	r2, [r2, #4]
 800ace0:	0852      	lsrs	r2, r2, #1
 800ace2:	4611      	mov	r1, r2
 800ace4:	f04f 0200 	mov.w	r2, #0
 800ace8:	eb13 0b01 	adds.w	fp, r3, r1
 800acec:	eb44 0c02 	adc.w	ip, r4, r2
 800acf0:	4658      	mov	r0, fp
 800acf2:	4661      	mov	r1, ip
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	f04f 0400 	mov.w	r4, #0
 800acfc:	461a      	mov	r2, r3
 800acfe:	4623      	mov	r3, r4
 800ad00:	f7f5 fab6 	bl	8000270 <__aeabi_uldivmod>
 800ad04:	4603      	mov	r3, r0
 800ad06:	460c      	mov	r4, r1
 800ad08:	617b      	str	r3, [r7, #20]
          break;
 800ad0a:	e017      	b.n	800ad3c <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_LSE:
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	085b      	lsrs	r3, r3, #1
 800ad12:	f04f 0400 	mov.w	r4, #0
 800ad16:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800ad1a:	f144 0100 	adc.w	r1, r4, #0
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f04f 0400 	mov.w	r4, #0
 800ad26:	461a      	mov	r2, r3
 800ad28:	4623      	mov	r3, r4
 800ad2a:	f7f5 faa1 	bl	8000270 <__aeabi_uldivmod>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	460c      	mov	r4, r1
 800ad32:	617b      	str	r3, [r7, #20]
          break;
 800ad34:	e002      	b.n	800ad3c <UART_SetConfig+0x474>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
            ret = HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	73fb      	strb	r3, [r7, #15]
          break;
 800ad3a:	bf00      	nop
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad42:	d308      	bcc.n	800ad56 <UART_SetConfig+0x48e>
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad4a:	d204      	bcs.n	800ad56 <UART_SetConfig+0x48e>
        {
           huart->Instance->BRR = tmpreg;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	697a      	ldr	r2, [r7, #20]
 800ad52:	60da      	str	r2, [r3, #12]
 800ad54:	e0e1      	b.n	800af1a <UART_SetConfig+0x652>
        }
        else
        {
          ret = HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	73fb      	strb	r3, [r7, #15]
 800ad5a:	e0de      	b.n	800af1a <UART_SetConfig+0x652>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	69db      	ldr	r3, [r3, #28]
 800ad60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad64:	d16f      	bne.n	800ae46 <UART_SetConfig+0x57e>
  {
    switch (clocksource)
 800ad66:	7cfb      	ldrb	r3, [r7, #19]
 800ad68:	2b08      	cmp	r3, #8
 800ad6a:	d857      	bhi.n	800ae1c <UART_SetConfig+0x554>
 800ad6c:	a201      	add	r2, pc, #4	; (adr r2, 800ad74 <UART_SetConfig+0x4ac>)
 800ad6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad72:	bf00      	nop
 800ad74:	0800ad99 	.word	0x0800ad99
 800ad78:	0800adb5 	.word	0x0800adb5
 800ad7c:	0800add1 	.word	0x0800add1
 800ad80:	0800ae1d 	.word	0x0800ae1d
 800ad84:	0800adeb 	.word	0x0800adeb
 800ad88:	0800ae1d 	.word	0x0800ae1d
 800ad8c:	0800ae1d 	.word	0x0800ae1d
 800ad90:	0800ae1d 	.word	0x0800ae1d
 800ad94:	0800ae07 	.word	0x0800ae07
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800ad98:	f7fe f8f2 	bl	8008f80 <HAL_RCC_GetPCLK1Freq>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	005a      	lsls	r2, r3, #1
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	085b      	lsrs	r3, r3, #1
 800ada6:	441a      	add	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	fbb2 f3f3 	udiv	r3, r2, r3
 800adb0:	823b      	strh	r3, [r7, #16]
      break;
 800adb2:	e036      	b.n	800ae22 <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800adb4:	f7fe f906 	bl	8008fc4 <HAL_RCC_GetPCLK2Freq>
 800adb8:	4603      	mov	r3, r0
 800adba:	005a      	lsls	r2, r3, #1
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	085b      	lsrs	r3, r3, #1
 800adc2:	441a      	add	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800adcc:	823b      	strh	r3, [r7, #16]
      break;
 800adce:	e028      	b.n	800ae22 <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	085b      	lsrs	r3, r3, #1
 800add6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800adda:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	6852      	ldr	r2, [r2, #4]
 800ade2:	fbb3 f3f2 	udiv	r3, r3, r2
 800ade6:	823b      	strh	r3, [r7, #16]
      break;
 800ade8:	e01b      	b.n	800ae22 <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800adea:	f7fd ffc5 	bl	8008d78 <HAL_RCC_GetSysClockFreq>
 800adee:	4603      	mov	r3, r0
 800adf0:	005a      	lsls	r2, r3, #1
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	085b      	lsrs	r3, r3, #1
 800adf8:	441a      	add	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae02:	823b      	strh	r3, [r7, #16]
      break;
 800ae04:	e00d      	b.n	800ae22 <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	085b      	lsrs	r3, r3, #1
 800ae0c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae18:	823b      	strh	r3, [r7, #16]
      break;
 800ae1a:	e002      	b.n	800ae22 <UART_SetConfig+0x55a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae20:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 800ae22:	8a3b      	ldrh	r3, [r7, #16]
 800ae24:	f023 030f 	bic.w	r3, r3, #15
 800ae28:	81bb      	strh	r3, [r7, #12]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 800ae2a:	8a3b      	ldrh	r3, [r7, #16]
 800ae2c:	105b      	asrs	r3, r3, #1
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	f003 0307 	and.w	r3, r3, #7
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	89bb      	ldrh	r3, [r7, #12]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	81bb      	strh	r3, [r7, #12]
    huart->Instance->BRR = brrtemp;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	89ba      	ldrh	r2, [r7, #12]
 800ae42:	60da      	str	r2, [r3, #12]
 800ae44:	e069      	b.n	800af1a <UART_SetConfig+0x652>
  }
  else
  {
    switch (clocksource)
 800ae46:	7cfb      	ldrb	r3, [r7, #19]
 800ae48:	2b08      	cmp	r3, #8
 800ae4a:	d863      	bhi.n	800af14 <UART_SetConfig+0x64c>
 800ae4c:	a201      	add	r2, pc, #4	; (adr r2, 800ae54 <UART_SetConfig+0x58c>)
 800ae4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae52:	bf00      	nop
 800ae54:	0800ae79 	.word	0x0800ae79
 800ae58:	0800ae99 	.word	0x0800ae99
 800ae5c:	0800aeb9 	.word	0x0800aeb9
 800ae60:	0800af15 	.word	0x0800af15
 800ae64:	0800aed9 	.word	0x0800aed9
 800ae68:	0800af15 	.word	0x0800af15
 800ae6c:	0800af15 	.word	0x0800af15
 800ae70:	0800af15 	.word	0x0800af15
 800ae74:	0800aef9 	.word	0x0800aef9
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800ae78:	f7fe f882 	bl	8008f80 <HAL_RCC_GetPCLK1Freq>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	085b      	lsrs	r3, r3, #1
 800ae84:	441a      	add	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae8e:	b29a      	uxth	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	60da      	str	r2, [r3, #12]
      break;
 800ae96:	e040      	b.n	800af1a <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800ae98:	f7fe f894 	bl	8008fc4 <HAL_RCC_GetPCLK2Freq>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	085b      	lsrs	r3, r3, #1
 800aea4:	441a      	add	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60da      	str	r2, [r3, #12]
      break;
 800aeb6:	e030      	b.n	800af1a <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	085b      	lsrs	r3, r3, #1
 800aebe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800aec2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	6852      	ldr	r2, [r2, #4]
 800aeca:	fbb3 f3f2 	udiv	r3, r3, r2
 800aece:	b29a      	uxth	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	60da      	str	r2, [r3, #12]
      break;
 800aed6:	e020      	b.n	800af1a <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800aed8:	f7fd ff4e 	bl	8008d78 <HAL_RCC_GetSysClockFreq>
 800aedc:	4602      	mov	r2, r0
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	085b      	lsrs	r3, r3, #1
 800aee4:	441a      	add	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	60da      	str	r2, [r3, #12]
      break;
 800aef6:	e010      	b.n	800af1a <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	085b      	lsrs	r3, r3, #1
 800aefe:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	fbb2 f3f3 	udiv	r3, r2, r3
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	60da      	str	r2, [r3, #12]
      break;
 800af12:	e002      	b.n	800af1a <UART_SetConfig+0x652>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	73fb      	strb	r3, [r7, #15]
      break;
 800af18:	bf00      	nop
    }
  }

  return ret;
 800af1a:	7bfb      	ldrb	r3, [r7, #15]

}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3718      	adds	r7, #24
 800af20:	46bd      	mov	sp, r7
 800af22:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800af26:	bf00      	nop
 800af28:	f4240000 	.word	0xf4240000

0800af2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00a      	beq.n	800af56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	430a      	orrs	r2, r1
 800af54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5a:	f003 0302 	and.w	r3, r3, #2
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00a      	beq.n	800af78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	430a      	orrs	r2, r1
 800af76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00a      	beq.n	800af9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	430a      	orrs	r2, r1
 800af98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9e:	f003 0308 	and.w	r3, r3, #8
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00a      	beq.n	800afbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	430a      	orrs	r2, r1
 800afba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc0:	f003 0310 	and.w	r3, r3, #16
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00a      	beq.n	800afde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	430a      	orrs	r2, r1
 800afdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	f003 0320 	and.w	r3, r3, #32
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00a      	beq.n	800b000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	430a      	orrs	r2, r1
 800affe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d01a      	beq.n	800b042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b02a:	d10a      	bne.n	800b042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	430a      	orrs	r2, r1
 800b040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00a      	beq.n	800b064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	605a      	str	r2, [r3, #4]
  }
}
 800b064:	bf00      	nop
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	bc80      	pop	{r7}
 800b06c:	4770      	bx	lr

0800b06e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b086      	sub	sp, #24
 800b072:	af02      	add	r7, sp, #8
 800b074:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b076:	2300      	movs	r3, #0
 800b078:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b080:	f7fb ff92 	bl	8006fa8 <HAL_GetTick>
 800b084:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0308 	and.w	r3, r3, #8
 800b090:	2b08      	cmp	r3, #8
 800b092:	d10e      	bne.n	800b0b2 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f82c 	bl	800b100 <UART_WaitOnFlagUntilTimeout>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	e022      	b.n	800b0f8 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d10e      	bne.n	800b0de <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f816 	bl	800b100 <UART_WaitOnFlagUntilTimeout>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e00c      	b.n	800b0f8 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2220      	movs	r2, #32
 800b0e2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2220      	movs	r2, #32
 800b0ea:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	603b      	str	r3, [r7, #0]
 800b10c:	4613      	mov	r3, r2
 800b10e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b110:	e02c      	b.n	800b16c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b118:	d028      	beq.n	800b16c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d007      	beq.n	800b130 <UART_WaitOnFlagUntilTimeout+0x30>
 800b120:	f7fb ff42 	bl	8006fa8 <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d21d      	bcs.n	800b16c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b13e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	689a      	ldr	r2, [r3, #8]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 0201 	bic.w	r2, r2, #1
 800b14e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2220      	movs	r2, #32
 800b154:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2220      	movs	r2, #32
 800b15c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

        return HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	e00f      	b.n	800b18c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	69da      	ldr	r2, [r3, #28]
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	4013      	ands	r3, r2
 800b176:	68ba      	ldr	r2, [r7, #8]
 800b178:	429a      	cmp	r2, r3
 800b17a:	bf0c      	ite	eq
 800b17c:	2301      	moveq	r3, #1
 800b17e:	2300      	movne	r3, #0
 800b180:	b2db      	uxtb	r3, r3
 800b182:	461a      	mov	r2, r3
 800b184:	79fb      	ldrb	r3, [r7, #7]
 800b186:	429a      	cmp	r2, r3
 800b188:	d0c3      	beq.n	800b112 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2220      	movs	r2, #32
 800b1a0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b1b2:	601a      	str	r2, [r3, #0]
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bc80      	pop	{r7}
 800b1bc:	4770      	bx	lr

0800b1be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b083      	sub	sp, #12
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2220      	movs	r2, #32
 800b1ca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b1dc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f022 0201 	bic.w	r2, r2, #1
 800b1ec:	609a      	str	r2, [r3, #8]
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bc80      	pop	{r7}
 800b1f6:	4770      	bx	lr

0800b1f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b204:	60fb      	str	r3, [r7, #12]
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0320 	and.w	r3, r3, #32
 800b210:	2b00      	cmp	r3, #0
 800b212:	d114      	bne.n	800b23e <UART_DMATransmitCplt+0x46>
  {  
    huart->TxXferCount = 0;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	689a      	ldr	r2, [r3, #8]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b22a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b23a:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 800b23c:	e002      	b.n	800b244 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7f5 fc88 	bl	8000b54 <HAL_UART_TxCpltCallback>
}
 800b244:	bf00      	nop
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b258:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f7ff fb18 	bl	800a890 <HAL_UART_TxHalfCpltCallback>
}
 800b260:	bf00      	nop
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b274:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b21      	cmp	r3, #33	; 0x21
 800b290:	d109      	bne.n	800b2a6 <UART_DMAError+0x3e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b29c:	2b80      	cmp	r3, #128	; 0x80
 800b29e:	d102      	bne.n	800b2a6 <UART_DMAError+0x3e>
  {
    UART_EndTxTransfer(huart);
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f7ff ff77 	bl	800b194 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	2b22      	cmp	r3, #34	; 0x22
 800b2b0:	d109      	bne.n	800b2c6 <UART_DMAError+0x5e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2bc:	2b40      	cmp	r3, #64	; 0x40
 800b2be:	d102      	bne.n	800b2c6 <UART_DMAError+0x5e>
  {
    UART_EndRxTransfer(huart);
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7ff ff7c 	bl	800b1be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ca:	f043 0210 	orr.w	r2, r3, #16
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f7ff faee 	bl	800a8b4 <HAL_UART_ErrorCallback>
}
 800b2d8:	bf00      	nop
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <UART_DMAAbortOnError>:
  *        (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f7ff fad8 	bl	800a8b4 <HAL_UART_ErrorCallback>
}
 800b304:	bf00      	nop
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart: UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	2b21      	cmp	r3, #33	; 0x21
 800b31e:	d144      	bne.n	800b3aa <UART_Transmit_IT+0x9e>
  {

    if(huart->TxXferCount == 0)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b326:	2b00      	cmp	r3, #0
 800b328:	d111      	bne.n	800b34e <UART_Transmit_IT+0x42>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b338:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b348:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	e02e      	b.n	800b3ac <UART_Transmit_IT+0xa0>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b356:	d114      	bne.n	800b382 <UART_Transmit_IT+0x76>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d110      	bne.n	800b382 <UART_Transmit_IT+0x76>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b364:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	881a      	ldrh	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b372:	b292      	uxth	r2, r2
 800b374:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b37a:	1c9a      	adds	r2, r3, #2
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	64da      	str	r2, [r3, #76]	; 0x4c
 800b380:	e009      	b.n	800b396 <UART_Transmit_IT+0x8a>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b386:	1c59      	adds	r1, r3, #1
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	64d1      	str	r1, [r2, #76]	; 0x4c
 800b38c:	781a      	ldrb	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	b292      	uxth	r2, r2
 800b394:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      huart->TxXferCount--;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b39c:	3b01      	subs	r3, #1
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e000      	b.n	800b3ac <UART_Transmit_IT+0xa0>
    }
  }
  else
  {
    return HAL_BUSY;
 800b3aa:	2302      	movs	r3, #2
  }
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bc80      	pop	{r7}
 800b3b4:	4770      	bx	lr

0800b3b6 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3cc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2220      	movs	r2, #32
 800b3d2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7f5 fbbc 	bl	8000b54 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b3e6:	b590      	push	{r4, r7, lr}
 800b3e8:	b085      	sub	sp, #20
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b3f4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b22      	cmp	r3, #34	; 0x22
 800b400:	d14f      	bne.n	800b4a2 <UART_Receive_IT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b408:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b412:	d112      	bne.n	800b43a <UART_Receive_IT+0x54>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10e      	bne.n	800b43a <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b420:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 800b422:	89ba      	ldrh	r2, [r7, #12]
 800b424:	89fb      	ldrh	r3, [r7, #14]
 800b426:	4013      	ands	r3, r2
 800b428:	b29a      	uxth	r2, r3
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b432:	1c9a      	adds	r2, r3, #2
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	655a      	str	r2, [r3, #84]	; 0x54
 800b438:	e00b      	b.n	800b452 <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b43a:	89bb      	ldrh	r3, [r7, #12]
 800b43c:	b2d9      	uxtb	r1, r3
 800b43e:	89fb      	ldrh	r3, [r7, #14]
 800b440:	b2da      	uxtb	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b446:	1c5c      	adds	r4, r3, #1
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	6544      	str	r4, [r0, #84]	; 0x54
 800b44c:	400a      	ands	r2, r1
 800b44e:	b2d2      	uxtb	r2, r2
 800b450:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b458:	3b01      	subs	r3, #1
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d118      	bne.n	800b49e <UART_Receive_IT+0xb8>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b47a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	689a      	ldr	r2, [r3, #8]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f022 0201 	bic.w	r2, r2, #1
 800b48a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2220      	movs	r2, #32
 800b490:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7ff fa04 	bl	800a8a2 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	e00c      	b.n	800b4b8 <UART_Receive_IT+0xd2>
    }

    return HAL_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e00a      	b.n	800b4b8 <UART_Receive_IT+0xd2>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	8b1b      	ldrh	r3, [r3, #24]
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f042 0208 	orr.w	r2, r2, #8
 800b4b2:	b292      	uxth	r2, r2
 800b4b4:	831a      	strh	r2, [r3, #24]

    return HAL_BUSY;
 800b4b6:	2302      	movs	r3, #2
  }
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd90      	pop	{r4, r7, pc}

0800b4c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b4c8:	bf00      	nop
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bc80      	pop	{r7}
 800b4d0:	4770      	bx	lr
	...

0800b4d4 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;

/* TIM5 init function */
//configuracao do temporizador
void MX_TIM5_Init(void)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b08a      	sub	sp, #40	; 0x28
 800b4d8:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
 800b4da:	4b17      	ldr	r3, [pc, #92]	; (800b538 <MX_TIM5_Init+0x64>)
 800b4dc:	4a17      	ldr	r2, [pc, #92]	; (800b53c <MX_TIM5_Init+0x68>)
 800b4de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800b4e0:	4b15      	ldr	r3, [pc, #84]	; (800b538 <MX_TIM5_Init+0x64>)
 800b4e2:	2253      	movs	r2, #83	; 0x53
 800b4e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4e6:	4b14      	ldr	r3, [pc, #80]	; (800b538 <MX_TIM5_Init+0x64>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 800b4ec:	4b12      	ldr	r3, [pc, #72]	; (800b538 <MX_TIM5_Init+0x64>)
 800b4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b4f4:	4b10      	ldr	r3, [pc, #64]	; (800b538 <MX_TIM5_Init+0x64>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	611a      	str	r2, [r3, #16]
  HAL_TIM_OC_Init(&htim5);
 800b4fa:	480f      	ldr	r0, [pc, #60]	; (800b538 <MX_TIM5_Init+0x64>)
 800b4fc:	f7fe fb60 	bl	8009bc0 <HAL_TIM_OC_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b500:	2300      	movs	r3, #0
 800b502:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b504:	2300      	movs	r3, #0
 800b506:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 800b508:	f107 031c 	add.w	r3, r7, #28
 800b50c:	4619      	mov	r1, r3
 800b50e:	480a      	ldr	r0, [pc, #40]	; (800b538 <MX_TIM5_Init+0x64>)
 800b510:	f7fe ff88 	bl	800a424 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800b514:	2300      	movs	r3, #0
 800b516:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b51c:	2300      	movs	r3, #0
 800b51e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b520:	2300      	movs	r3, #0
 800b522:	613b      	str	r3, [r7, #16]
  HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
 800b524:	463b      	mov	r3, r7
 800b526:	2200      	movs	r2, #0
 800b528:	4619      	mov	r1, r3
 800b52a:	4803      	ldr	r0, [pc, #12]	; (800b538 <MX_TIM5_Init+0x64>)
 800b52c:	f7fe fb74 	bl	8009c18 <HAL_TIM_OC_ConfigChannel>

}
 800b530:	bf00      	nop
 800b532:	3728      	adds	r7, #40	; 0x28
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	20000ac4 	.word	0x20000ac4
 800b53c:	40000c00 	.word	0x40000c00

0800b540 <TimeStamp_Init>:

void TimeStamp_Init(){
 800b540:	b580      	push	{r7, lr}
 800b542:	af00      	add	r7, sp, #0
    MX_TIM5_Init();
 800b544:	f7ff ffc6 	bl	800b4d4 <MX_TIM5_Init>
}
 800b548:	bf00      	nop
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <TimeStamp_Reset>:

void TimeStamp_Reset(){
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim5);
 800b550:	4804      	ldr	r0, [pc, #16]	; (800b564 <TimeStamp_Reset+0x18>)
 800b552:	f7fe fb1b 	bl	8009b8c <HAL_TIM_Base_Start>
    htim5.Instance->CNT=0;
 800b556:	4b03      	ldr	r3, [pc, #12]	; (800b564 <TimeStamp_Reset+0x18>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2200      	movs	r2, #0
 800b55c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b55e:	bf00      	nop
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20000ac4 	.word	0x20000ac4

0800b568 <TimeStamp_Get>:

uint32_t TimeStamp_Get(){
 800b568:	b480      	push	{r7}
 800b56a:	af00      	add	r7, sp, #0
    return htim5.Instance->CNT;
 800b56c:	4b03      	ldr	r3, [pc, #12]	; (800b57c <TimeStamp_Get+0x14>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800b572:	4618      	mov	r0, r3
 800b574:	46bd      	mov	sp, r7
 800b576:	bc80      	pop	{r7}
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	20000ac4 	.word	0x20000ac4

0800b580 <BSP_GetPushButton>:
#endif

#define BSP_BP_PORT GPIOC
#define BSP_BP_PIN  GPIO_PIN_13

int BSP_GetPushButton(void){
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
    GPIO_PinState state ;
    state = HAL_GPIO_ReadPin(BSP_BP_PORT, BSP_BP_PIN);
 800b586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b58a:	4805      	ldr	r0, [pc, #20]	; (800b5a0 <BSP_GetPushButton+0x20>)
 800b58c:	f7fc fa46 	bl	8007a1c <HAL_GPIO_ReadPin>
 800b590:	4603      	mov	r3, r0
 800b592:	71fb      	strb	r3, [r7, #7]
    return state;
 800b594:	79fb      	ldrb	r3, [r7, #7]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	48000800 	.word	0x48000800

0800b5a4 <PusbButton_WaitUnPress>:
 * As soon as time is elapsed -rb- is displayed to let user know the mode
 * switch is taken into account
 *
 * @return True if button remains pressed more than specified time
 */
int PusbButton_WaitUnPress(void){
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
    uint32_t TimeStarted;
    TimeStarted = HAL_GetTick();
 800b5aa:	f7fb fcfd 	bl	8006fa8 <HAL_GetTick>
 800b5ae:	6078      	str	r0, [r7, #4]
    while( !BSP_GetPushButton() ){ ; /* debounce */
 800b5b0:	e00a      	b.n	800b5c8 <PusbButton_WaitUnPress+0x24>
        if(HAL_GetTick()- TimeStarted> PressBPSwicthTime){
 800b5b2:	f7fb fcf9 	bl	8006fa8 <HAL_GetTick>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b5c0:	d902      	bls.n	800b5c8 <PusbButton_WaitUnPress+0x24>
            XNUCLEO53L0A1_SetDisplayString (" rb ");
 800b5c2:	480b      	ldr	r0, [pc, #44]	; (800b5f0 <PusbButton_WaitUnPress+0x4c>)
 800b5c4:	f7f5 fa5e 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
    while( !BSP_GetPushButton() ){ ; /* debounce */
 800b5c8:	f7ff ffda 	bl	800b580 <BSP_GetPushButton>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d0ef      	beq.n	800b5b2 <PusbButton_WaitUnPress+0xe>
        }
    }
    return  HAL_GetTick() - TimeStarted>PressBPSwicthTime;
 800b5d2:	f7fb fce9 	bl	8006fa8 <HAL_GetTick>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b5e0:	bf8c      	ite	hi
 800b5e2:	2301      	movhi	r3, #1
 800b5e4:	2300      	movls	r3, #0
 800b5e6:	b2db      	uxtb	r3, r3

}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3708      	adds	r7, #8
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	0800dd10 	.word	0x0800dd10

0800b5f4 <HandleError>:
 * Handle Error
 *
 * Set err on display and loop forever
 * @param err Error case code
 */
void HandleError(int err){
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
    char msg[16];
    sprintf(msg,"Er%d", err);
 800b5fc:	f107 0308 	add.w	r3, r7, #8
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	4905      	ldr	r1, [pc, #20]	; (800b618 <HandleError+0x24>)
 800b604:	4618      	mov	r0, r3
 800b606:	f000 fead 	bl	800c364 <siprintf>
    XNUCLEO53L0A1_SetDisplayString(msg);
 800b60a:	f107 0308 	add.w	r3, r7, #8
 800b60e:	4618      	mov	r0, r3
 800b610:	f7f5 fa38 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
    while(1){};
 800b614:	e7fe      	b.n	800b614 <HandleError+0x20>
 800b616:	bf00      	nop
 800b618:	0800dd18 	.word	0x0800dd18

0800b61c <DetectSensors>:
 * Reset all sensor then do presence detection
 *
 * All present devices are data initiated and assigned to their final I2C address
 * @return
 */
int DetectSensors(int SetDisplay) {
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
    int i;
    uint16_t Id;
    int status;
    int FinalAddress;

    char PresentMsg[5]="    ";
 800b624:	4a7e      	ldr	r2, [pc, #504]	; (800b820 <DetectSensors+0x204>)
 800b626:	f107 0308 	add.w	r3, r7, #8
 800b62a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b62e:	6018      	str	r0, [r3, #0]
 800b630:	3304      	adds	r3, #4
 800b632:	7019      	strb	r1, [r3, #0]
    /* Reset all */
    nDevPresent = 0;
 800b634:	4b7b      	ldr	r3, [pc, #492]	; (800b824 <DetectSensors+0x208>)
 800b636:	2200      	movs	r2, #0
 800b638:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i++)
 800b63a:	2300      	movs	r3, #0
 800b63c:	61fb      	str	r3, [r7, #28]
 800b63e:	e007      	b.n	800b650 <DetectSensors+0x34>
        status = XNUCLEO53L0A1_ResetId(i, 0);
 800b640:	2100      	movs	r1, #0
 800b642:	69f8      	ldr	r0, [r7, #28]
 800b644:	f7f5 f918 	bl	8000878 <XNUCLEO53L0A1_ResetId>
 800b648:	61b8      	str	r0, [r7, #24]
    for (i = 0; i < 3; i++)
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	3301      	adds	r3, #1
 800b64e:	61fb      	str	r3, [r7, #28]
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	2b02      	cmp	r3, #2
 800b654:	ddf4      	ble.n	800b640 <DetectSensors+0x24>

    /* detect all sensors (even on-board)*/
    for (i = 0; i < 3; i++) {
 800b656:	2300      	movs	r3, #0
 800b658:	61fb      	str	r3, [r7, #28]
 800b65a:	e0a3      	b.n	800b7a4 <DetectSensors+0x188>
        VL53L0X_Dev_t *pDev;
        pDev = &VL53L0XDevs[i];
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b662:	fb02 f303 	mul.w	r3, r2, r3
 800b666:	4a70      	ldr	r2, [pc, #448]	; (800b828 <DetectSensors+0x20c>)
 800b668:	4413      	add	r3, r2
 800b66a:	617b      	str	r3, [r7, #20]
        pDev->I2cDevAddr = 0x52;
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2252      	movs	r2, #82	; 0x52
 800b670:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        pDev->Present = 0;
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2200      	movs	r2, #0
 800b678:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        status = XNUCLEO53L0A1_ResetId( pDev->Id, 1);
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800b682:	2101      	movs	r1, #1
 800b684:	4618      	mov	r0, r3
 800b686:	f7f5 f8f7 	bl	8000878 <XNUCLEO53L0A1_ResetId>
 800b68a:	61b8      	str	r0, [r7, #24]
        HAL_Delay(2);
 800b68c:	2002      	movs	r0, #2
 800b68e:	f7fb fc95 	bl	8006fbc <HAL_Delay>
        FinalAddress=0x52+(i+1)*2;
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	332a      	adds	r3, #42	; 0x2a
 800b696:	005b      	lsls	r3, r3, #1
 800b698:	613b      	str	r3, [r7, #16]

        do {
        	/* Set I2C standard mode (400 KHz) before doing the first register access */
        	if (status == VL53L0X_ERROR_NONE)
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d106      	bne.n	800b6ae <DetectSensors+0x92>
        		status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2188      	movs	r1, #136	; 0x88
 800b6a4:	6978      	ldr	r0, [r7, #20]
 800b6a6:	f7f5 fc57 	bl	8000f58 <VL53L0X_WrByte>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	61bb      	str	r3, [r7, #24]

        	/* Try to read one register using default 0x52 address */
            status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 800b6ae:	f107 030e 	add.w	r3, r7, #14
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	21c0      	movs	r1, #192	; 0xc0
 800b6b6:	6978      	ldr	r0, [r7, #20]
 800b6b8:	f7f5 fcfa 	bl	80010b0 <VL53L0X_RdWord>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	61bb      	str	r3, [r7, #24]
            if (status) {
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d004      	beq.n	800b6d0 <DetectSensors+0xb4>
                debug_printf("----A Leitura do sensor #%d  falhou\n", i);
 800b6c6:	69f9      	ldr	r1, [r7, #28]
 800b6c8:	4858      	ldr	r0, [pc, #352]	; (800b82c <DetectSensors+0x210>)
 800b6ca:	f7f5 fa8b 	bl	8000be4 <uart_printf>
                break;
 800b6ce:	e05f      	b.n	800b790 <DetectSensors+0x174>
            }
            if (Id == 0xEEAA) {
 800b6d0:	89fb      	ldrh	r3, [r7, #14]
 800b6d2:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d152      	bne.n	800b780 <DetectSensors+0x164>
				/* Sensor is found => Change its I2C address to final one */
                status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6978      	ldr	r0, [r7, #20]
 800b6e2:	f7f5 fda7 	bl	8001234 <VL53L0X_SetDeviceAddress>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	61bb      	str	r3, [r7, #24]
                if (status != 0) {
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d004      	beq.n	800b6fa <DetectSensors+0xde>
                    debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
 800b6f0:	69f9      	ldr	r1, [r7, #28]
 800b6f2:	484f      	ldr	r0, [pc, #316]	; (800b830 <DetectSensors+0x214>)
 800b6f4:	f7f5 fa76 	bl	8000be4 <uart_printf>
                    break;
 800b6f8:	e04a      	b.n	800b790 <DetectSensors+0x174>
                }
                pDev->I2cDevAddr = FinalAddress;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
                /* Check all is OK with the new I2C address and initialize the sensor */
                status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 800b704:	f107 030e 	add.w	r3, r7, #14
 800b708:	461a      	mov	r2, r3
 800b70a:	21c0      	movs	r1, #192	; 0xc0
 800b70c:	6978      	ldr	r0, [r7, #20]
 800b70e:	f7f5 fccf 	bl	80010b0 <VL53L0X_RdWord>
 800b712:	4603      	mov	r3, r0
 800b714:	61bb      	str	r3, [r7, #24]
                if (status != 0) {
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d004      	beq.n	800b726 <DetectSensors+0x10a>
					debug_printf("#i VL53L0X_RdWord fail\n", i);
 800b71c:	69f9      	ldr	r1, [r7, #28]
 800b71e:	4845      	ldr	r0, [pc, #276]	; (800b834 <DetectSensors+0x218>)
 800b720:	f7f5 fa60 	bl	8000be4 <uart_printf>
					break;
 800b724:	e034      	b.n	800b790 <DetectSensors+0x174>
				}

                status = VL53L0X_DataInit(pDev);
 800b726:	6978      	ldr	r0, [r7, #20]
 800b728:	f7f5 fdc8 	bl	80012bc <VL53L0X_DataInit>
 800b72c:	4603      	mov	r3, r0
 800b72e:	61bb      	str	r3, [r7, #24]
                if( status == 0 ){
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d11f      	bne.n	800b776 <DetectSensors+0x15a>
                    pDev->Present = 1;
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	2201      	movs	r2, #1
 800b73a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                else{
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
                    break;
                }
//                trace_printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
                trace_printf("VL53L0X %d Existente e inicializado para o final 0x%x .\n", pDev->Id, pDev->I2cDevAddr);
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b74a:	461a      	mov	r2, r3
 800b74c:	483a      	ldr	r0, [pc, #232]	; (800b838 <DetectSensors+0x21c>)
 800b74e:	f7f5 fa49 	bl	8000be4 <uart_printf>
                nDevPresent++;
 800b752:	4b34      	ldr	r3, [pc, #208]	; (800b824 <DetectSensors+0x208>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	3301      	adds	r3, #1
 800b758:	4a32      	ldr	r2, [pc, #200]	; (800b824 <DetectSensors+0x208>)
 800b75a:	6013      	str	r3, [r2, #0]
                nDevMask |= 1 << i;
 800b75c:	2201      	movs	r2, #1
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	409a      	lsls	r2, r3
 800b762:	4b36      	ldr	r3, [pc, #216]	; (800b83c <DetectSensors+0x220>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4313      	orrs	r3, r2
 800b768:	4a34      	ldr	r2, [pc, #208]	; (800b83c <DetectSensors+0x220>)
 800b76a:	6013      	str	r3, [r2, #0]
                pDev->Present = 1;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2201      	movs	r2, #1
 800b770:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800b774:	e00c      	b.n	800b790 <DetectSensors+0x174>
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
 800b776:	69f9      	ldr	r1, [r7, #28]
 800b778:	4831      	ldr	r0, [pc, #196]	; (800b840 <DetectSensors+0x224>)
 800b77a:	f7f5 fa33 	bl	8000be4 <uart_printf>
                    break;
 800b77e:	e007      	b.n	800b790 <DetectSensors+0x174>
            }
            else {
                debug_printf("#%d unknown ID %x\n", i, Id);
 800b780:	89fb      	ldrh	r3, [r7, #14]
 800b782:	461a      	mov	r2, r3
 800b784:	69f9      	ldr	r1, [r7, #28]
 800b786:	482f      	ldr	r0, [pc, #188]	; (800b844 <DetectSensors+0x228>)
 800b788:	f7f5 fa2c 	bl	8000be4 <uart_printf>
                status = 1;
 800b78c:	2301      	movs	r3, #1
 800b78e:	61bb      	str	r3, [r7, #24]
            }
        } while (0);
        /* if fail r can't use for any reason then put the  device back to reset */
        if (status) {
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d003      	beq.n	800b79e <DetectSensors+0x182>
            XNUCLEO53L0A1_ResetId(i, 0);
 800b796:	2100      	movs	r1, #0
 800b798:	69f8      	ldr	r0, [r7, #28]
 800b79a:	f7f5 f86d 	bl	8000878 <XNUCLEO53L0A1_ResetId>
    for (i = 0; i < 3; i++) {
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	61fb      	str	r3, [r7, #28]
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	f77f af58 	ble.w	800b65c <DetectSensors+0x40>
        }
    }
    /* Display detected sensor(s) */
    if( SetDisplay ){
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d030      	beq.n	800b814 <DetectSensors+0x1f8>
        for(i=0; i<3; i++){
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	61fb      	str	r3, [r7, #28]
 800b7b6:	e01f      	b.n	800b7f8 <DetectSensors+0x1dc>
            if( VL53L0XDevs[i].Present ){
 800b7b8:	4a1b      	ldr	r2, [pc, #108]	; (800b828 <DetectSensors+0x20c>)
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b7c0:	fb01 f303 	mul.w	r3, r1, r3
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d010      	beq.n	800b7f2 <DetectSensors+0x1d6>
                PresentMsg[i+1]=VL53L0XDevs[i].DevLetter;
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	4914      	ldr	r1, [pc, #80]	; (800b828 <DetectSensors+0x20c>)
 800b7d6:	69fa      	ldr	r2, [r7, #28]
 800b7d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b7dc:	fb00 f202 	mul.w	r2, r0, r2
 800b7e0:	440a      	add	r2, r1
 800b7e2:	f202 1261 	addw	r2, r2, #353	; 0x161
 800b7e6:	7812      	ldrb	r2, [r2, #0]
 800b7e8:	f107 0120 	add.w	r1, r7, #32
 800b7ec:	440b      	add	r3, r1
 800b7ee:	f803 2c18 	strb.w	r2, [r3, #-24]
        for(i=0; i<3; i++){
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	61fb      	str	r3, [r7, #28]
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	dddc      	ble.n	800b7b8 <DetectSensors+0x19c>
            }
        }
        PresentMsg[0]=' ';
 800b7fe:	2320      	movs	r3, #32
 800b800:	723b      	strb	r3, [r7, #8]
        XNUCLEO53L0A1_SetDisplayString(PresentMsg);
 800b802:	f107 0308 	add.w	r3, r7, #8
 800b806:	4618      	mov	r0, r3
 800b808:	f7f5 f93c 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
        HAL_Delay(1000);
 800b80c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b810:	f7fb fbd4 	bl	8006fbc <HAL_Delay>
    }

    return nDevPresent;
 800b814:	4b03      	ldr	r3, [pc, #12]	; (800b824 <DetectSensors+0x208>)
 800b816:	681b      	ldr	r3, [r3, #0]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3720      	adds	r7, #32
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	0800ddf0 	.word	0x0800ddf0
 800b824:	20000968 	.word	0x20000968
 800b828:	200002ec 	.word	0x200002ec
 800b82c:	0800dd20 	.word	0x0800dd20
 800b830:	0800dd48 	.word	0x0800dd48
 800b834:	0800dd6c 	.word	0x0800dd6c
 800b838:	0800dda0 	.word	0x0800dda0
 800b83c:	20000ac0 	.word	0x20000ac0
 800b840:	0800dd84 	.word	0x0800dd84
 800b844:	0800dddc 	.word	0x0800dddc

0800b848 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
//configura o
void SetupSingleShot(RangingConfig_e rangingConfig){
 800b848:	b580      	push	{r7, lr}
 800b84a:	b08c      	sub	sp, #48	; 0x30
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	4603      	mov	r3, r0
 800b850:	71fb      	strb	r3, [r7, #7]
    int status;
    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800b852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b856:	62bb      	str	r3, [r7, #40]	; 0x28
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800b858:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800b85c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t timingBudget = 33000;
 800b85e:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800b862:	623b      	str	r3, [r7, #32]
	uint8_t preRangeVcselPeriod = 14;
 800b864:	230e      	movs	r3, #14
 800b866:	77fb      	strb	r3, [r7, #31]
	uint8_t finalRangeVcselPeriod = 10;
 800b868:	230a      	movs	r3, #10
 800b86a:	77bb      	strb	r3, [r7, #30]

    for( i=0; i<3; i++){
 800b86c:	2300      	movs	r3, #0
 800b86e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b870:	e13f      	b.n	800baf2 <SetupSingleShot+0x2aa>
        if( VL53L0XDevs[i].Present){
 800b872:	4aa4      	ldr	r2, [pc, #656]	; (800bb04 <SetupSingleShot+0x2bc>)
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b87a:	fb01 f303 	mul.w	r3, r1, r3
 800b87e:	4413      	add	r3, r2
 800b880:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 8130 	beq.w	800baec <SetupSingleShot+0x2a4>
            status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b892:	fb02 f303 	mul.w	r3, r2, r3
 800b896:	4a9b      	ldr	r2, [pc, #620]	; (800bb04 <SetupSingleShot+0x2bc>)
 800b898:	4413      	add	r3, r2
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7f5 fe9c 	bl	80015d8 <VL53L0X_StaticInit>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	61bb      	str	r3, [r7, #24]
            if( status ){
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d003      	beq.n	800b8b2 <SetupSingleShot+0x6a>
                debug_printf("VL53L0X_StaticInit %d failed\n",i);
 800b8aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8ac:	4896      	ldr	r0, [pc, #600]	; (800bb08 <SetupSingleShot+0x2c0>)
 800b8ae:	f7f5 f999 	bl	8000be4 <uart_printf>
            }

            status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 800b8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b8b8:	fb02 f303 	mul.w	r3, r2, r3
 800b8bc:	4a91      	ldr	r2, [pc, #580]	; (800bb04 <SetupSingleShot+0x2bc>)
 800b8be:	4413      	add	r3, r2
 800b8c0:	f107 0216 	add.w	r2, r7, #22
 800b8c4:	f107 0117 	add.w	r1, r7, #23
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7f7 f8b9 	bl	8002a40 <VL53L0X_PerformRefCalibration>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	61bb      	str	r3, [r7, #24]
			if( status ){
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <SetupSingleShot+0x96>
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
 800b8d8:	488c      	ldr	r0, [pc, #560]	; (800bb0c <SetupSingleShot+0x2c4>)
 800b8da:	f7f5 f983 	bl	8000be4 <uart_printf>
			}

			status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i], &refSpadCount, &isApertureSpads);
 800b8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b8e4:	fb02 f303 	mul.w	r3, r2, r3
 800b8e8:	4a86      	ldr	r2, [pc, #536]	; (800bb04 <SetupSingleShot+0x2bc>)
 800b8ea:	4413      	add	r3, r2
 800b8ec:	f107 020f 	add.w	r2, r7, #15
 800b8f0:	f107 0110 	add.w	r1, r7, #16
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7f7 febb 	bl	8003670 <VL53L0X_PerformRefSpadManagement>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	61bb      	str	r3, [r7, #24]
			if( status ){
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d002      	beq.n	800b90a <SetupSingleShot+0xc2>
			   debug_printf("VL53L0X_PerformRefSpadManagement failed\n");
 800b904:	4882      	ldr	r0, [pc, #520]	; (800bb10 <SetupSingleShot+0x2c8>)
 800b906:	f7f5 f96d 	bl	8000be4 <uart_printf>
			}

            status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i], VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800b90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b910:	fb02 f303 	mul.w	r3, r2, r3
 800b914:	4a7b      	ldr	r2, [pc, #492]	; (800bb04 <SetupSingleShot+0x2bc>)
 800b916:	4413      	add	r3, r2
 800b918:	2100      	movs	r1, #0
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7f6 f8c4 	bl	8001aa8 <VL53L0X_SetDeviceMode>
 800b920:	4603      	mov	r3, r0
 800b922:	61bb      	str	r3, [r7, #24]
            if( status ){
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d002      	beq.n	800b930 <SetupSingleShot+0xe8>
               debug_printf("VL53L0X_SetDeviceMode failed Setup in single ranging mode\n");
 800b92a:	487a      	ldr	r0, [pc, #488]	; (800bb14 <SetupSingleShot+0x2cc>)
 800b92c:	f7f5 f95a 	bl	8000be4 <uart_printf>
            }

            status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 800b930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b932:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b936:	fb02 f303 	mul.w	r3, r2, r3
 800b93a:	4a72      	ldr	r2, [pc, #456]	; (800bb04 <SetupSingleShot+0x2bc>)
 800b93c:	4413      	add	r3, r2
 800b93e:	2201      	movs	r2, #1
 800b940:	2100      	movs	r1, #0
 800b942:	4618      	mov	r0, r3
 800b944:	f7f6 fd76 	bl	8002434 <VL53L0X_SetLimitCheckEnable>
 800b948:	4603      	mov	r3, r0
 800b94a:	61bb      	str	r3, [r7, #24]
			if( status ){
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d002      	beq.n	800b958 <SetupSingleShot+0x110>
			   debug_printf("VL53L0X_SetLimitCheckEnable failed Enable Sigma limit\n");
 800b952:	4871      	ldr	r0, [pc, #452]	; (800bb18 <SetupSingleShot+0x2d0>)
 800b954:	f7f5 f946 	bl	8000be4 <uart_printf>
			}

			status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 800b958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b95e:	fb02 f303 	mul.w	r3, r2, r3
 800b962:	4a68      	ldr	r2, [pc, #416]	; (800bb04 <SetupSingleShot+0x2bc>)
 800b964:	4413      	add	r3, r2
 800b966:	2201      	movs	r2, #1
 800b968:	2101      	movs	r1, #1
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7f6 fd62 	bl	8002434 <VL53L0X_SetLimitCheckEnable>
 800b970:	4603      	mov	r3, r0
 800b972:	61bb      	str	r3, [r7, #24]
			if( status ){
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d002      	beq.n	800b980 <SetupSingleShot+0x138>
			   debug_printf("VL53L0X_SetLimitCheckEnable failed  Enable Signa limit\n");
 800b97a:	4868      	ldr	r0, [pc, #416]	; (800bb1c <SetupSingleShot+0x2d4>)
 800b97c:	f7f5 f932 	bl	8000be4 <uart_printf>
			}
			/* Ranging configuration */
            switch(rangingConfig) {
 800b980:	79fb      	ldrb	r3, [r7, #7]
 800b982:	2b01      	cmp	r3, #1
 800b984:	d01d      	beq.n	800b9c2 <SetupSingleShot+0x17a>
 800b986:	2b02      	cmp	r3, #2
 800b988:	d00e      	beq.n	800b9a8 <SetupSingleShot+0x160>
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d127      	bne.n	800b9de <SetupSingleShot+0x196>
            case LONG_RANGE:
            	signalLimit = (FixPoint1616_t)(0.1*65536);
 800b98e:	f641 1399 	movw	r3, #6553	; 0x1999
 800b992:	62bb      	str	r3, [r7, #40]	; 0x28
            	sigmaLimit = (FixPoint1616_t)(60*65536);
 800b994:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
//            	timingBudget = 33000;
            	timingBudget = 200000;
 800b99a:	4b61      	ldr	r3, [pc, #388]	; (800bb20 <SetupSingleShot+0x2d8>)
 800b99c:	623b      	str	r3, [r7, #32]
            	preRangeVcselPeriod = 18;
 800b99e:	2312      	movs	r3, #18
 800b9a0:	77fb      	strb	r3, [r7, #31]
            	finalRangeVcselPeriod = 14;
 800b9a2:	230e      	movs	r3, #14
 800b9a4:	77bb      	strb	r3, [r7, #30]
            	break;
 800b9a6:	e01d      	b.n	800b9e4 <SetupSingleShot+0x19c>
            case HIGH_ACCURACY:
//            	signalLimit = (FixPoint1616_t)(0.25*65536);
				signalLimit = (FixPoint1616_t)(0.1*65536);
 800b9a8:	f641 1399 	movw	r3, #6553	; 0x1999
 800b9ac:	62bb      	str	r3, [r7, #40]	; 0x28
//				sigmaLimit = (FixPoint1616_t)(18*65536);
				sigmaLimit = (FixPoint1616_t)(60*65536);
 800b9ae:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800b9b2:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 100000;
 800b9b4:	4b5b      	ldr	r3, [pc, #364]	; (800bb24 <SetupSingleShot+0x2dc>)
 800b9b6:	623b      	str	r3, [r7, #32]
//				preRangeVcselPeriod = 14;
				preRangeVcselPeriod = 18;
 800b9b8:	2312      	movs	r3, #18
 800b9ba:	77fb      	strb	r3, [r7, #31]
//				finalRangeVcselPeriod = 10;
				finalRangeVcselPeriod = 14;
 800b9bc:	230e      	movs	r3, #14
 800b9be:	77bb      	strb	r3, [r7, #30]
				break;
 800b9c0:	e010      	b.n	800b9e4 <SetupSingleShot+0x19c>
            case HIGH_SPEED:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 800b9c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b9c6:	62bb      	str	r3, [r7, #40]	; 0x28
				sigmaLimit = (FixPoint1616_t)(32*65536);
 800b9c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b9cc:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 20000;
 800b9ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 800b9d2:	623b      	str	r3, [r7, #32]
				preRangeVcselPeriod = 14;
 800b9d4:	230e      	movs	r3, #14
 800b9d6:	77fb      	strb	r3, [r7, #31]
				finalRangeVcselPeriod = 10;
 800b9d8:	230a      	movs	r3, #10
 800b9da:	77bb      	strb	r3, [r7, #30]
				break;
 800b9dc:	e002      	b.n	800b9e4 <SetupSingleShot+0x19c>
            default:
            	debug_printf("Not Supported");
 800b9de:	4852      	ldr	r0, [pc, #328]	; (800bb28 <SetupSingleShot+0x2e0>)
 800b9e0:	f7f5 f900 	bl	8000be4 <uart_printf>
            }

            status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 800b9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b9ea:	fb02 f303 	mul.w	r3, r2, r3
 800b9ee:	4a45      	ldr	r2, [pc, #276]	; (800bb04 <SetupSingleShot+0x2bc>)
 800b9f0:	4413      	add	r3, r2
 800b9f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9f4:	2101      	movs	r1, #1
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7f6 fe20 	bl	800263c <VL53L0X_SetLimitCheckValue>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	61bb      	str	r3, [r7, #24]
			if( status ){
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d002      	beq.n	800ba0c <SetupSingleShot+0x1c4>
			   debug_printf("VL53L0X_SetLimitCheckValue failed signalLimit \n");
 800ba06:	4849      	ldr	r0, [pc, #292]	; (800bb2c <SetupSingleShot+0x2e4>)
 800ba08:	f7f5 f8ec 	bl	8000be4 <uart_printf>
			}

			status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800ba0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ba12:	fb02 f303 	mul.w	r3, r2, r3
 800ba16:	4a3b      	ldr	r2, [pc, #236]	; (800bb04 <SetupSingleShot+0x2bc>)
 800ba18:	4413      	add	r3, r2
 800ba1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f6 fe0c 	bl	800263c <VL53L0X_SetLimitCheckValue>
 800ba24:	4603      	mov	r3, r0
 800ba26:	61bb      	str	r3, [r7, #24]
			if( status ){
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <SetupSingleShot+0x1ec>
			   debug_printf("VL53L0X_SetLimitCheckValue failed sigmaLimit\n");
 800ba2e:	4840      	ldr	r0, [pc, #256]	; (800bb30 <SetupSingleShot+0x2e8>)
 800ba30:	f7f5 f8d8 	bl	8000be4 <uart_printf>
			}

            status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[i],  timingBudget);
 800ba34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba36:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ba3a:	fb02 f303 	mul.w	r3, r2, r3
 800ba3e:	4a31      	ldr	r2, [pc, #196]	; (800bb04 <SetupSingleShot+0x2bc>)
 800ba40:	4413      	add	r3, r2
 800ba42:	6a39      	ldr	r1, [r7, #32]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7f6 f929 	bl	8001c9c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	61bb      	str	r3, [r7, #24]
            if( status ){
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d002      	beq.n	800ba5a <SetupSingleShot+0x212>
               debug_printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 800ba54:	4837      	ldr	r0, [pc, #220]	; (800bb34 <SetupSingleShot+0x2ec>)
 800ba56:	f7f5 f8c5 	bl	8000be4 <uart_printf>
            }

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800ba5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ba60:	fb02 f303 	mul.w	r3, r2, r3
 800ba64:	4a27      	ldr	r2, [pc, #156]	; (800bb04 <SetupSingleShot+0x2bc>)
 800ba66:	4413      	add	r3, r2
 800ba68:	7ffa      	ldrb	r2, [r7, #31]
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7f6 f991 	bl	8001d94 <VL53L0X_SetVcselPulsePeriod>
 800ba72:	4603      	mov	r3, r0
 800ba74:	61bb      	str	r3, [r7, #24]
			if( status ){
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <SetupSingleShot+0x23a>
			   debug_printf("VL53L0X_SetVcselPulsePeriod pre failed\n");
 800ba7c:	482e      	ldr	r0, [pc, #184]	; (800bb38 <SetupSingleShot+0x2f0>)
 800ba7e:	f7f5 f8b1 	bl	8000be4 <uart_printf>
			}

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800ba82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba84:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ba88:	fb02 f303 	mul.w	r3, r2, r3
 800ba8c:	4a1d      	ldr	r2, [pc, #116]	; (800bb04 <SetupSingleShot+0x2bc>)
 800ba8e:	4413      	add	r3, r2
 800ba90:	7fba      	ldrb	r2, [r7, #30]
 800ba92:	2101      	movs	r1, #1
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7f6 f97d 	bl	8001d94 <VL53L0X_SetVcselPulsePeriod>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	61bb      	str	r3, [r7, #24]
			if( status ){
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d002      	beq.n	800baaa <SetupSingleShot+0x262>
			   debug_printf("VL53L0X_SetVcselPulsePeriod final failed\n");
 800baa4:	4825      	ldr	r0, [pc, #148]	; (800bb3c <SetupSingleShot+0x2f4>)
 800baa6:	f7f5 f89d 	bl	8000be4 <uart_printf>
			}

			status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 800baaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bab0:	fb02 f303 	mul.w	r3, r2, r3
 800bab4:	4a13      	ldr	r2, [pc, #76]	; (800bb04 <SetupSingleShot+0x2bc>)
 800bab6:	4413      	add	r3, r2
 800bab8:	f107 0216 	add.w	r2, r7, #22
 800babc:	f107 0117 	add.w	r1, r7, #23
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7f6 ffbd 	bl	8002a40 <VL53L0X_PerformRefCalibration>
 800bac6:	4603      	mov	r3, r0
 800bac8:	61bb      	str	r3, [r7, #24]
			if( status ){
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <SetupSingleShot+0x28e>
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
 800bad0:	480e      	ldr	r0, [pc, #56]	; (800bb0c <SetupSingleShot+0x2c4>)
 800bad2:	f7f5 f887 	bl	8000be4 <uart_printf>
			}

            VL53L0XDevs[i].LeakyFirst=1;
 800bad6:	4a0b      	ldr	r2, [pc, #44]	; (800bb04 <SetupSingleShot+0x2bc>)
 800bad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bada:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800bade:	fb01 f303 	mul.w	r3, r1, r3
 800bae2:	4413      	add	r3, r2
 800bae4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bae8:	2201      	movs	r2, #1
 800baea:	601a      	str	r2, [r3, #0]
    for( i=0; i<3; i++){
 800baec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baee:	3301      	adds	r3, #1
 800baf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	f77f aebc 	ble.w	800b872 <SetupSingleShot+0x2a>
        }
    }
}
 800bafa:	bf00      	nop
 800bafc:	3730      	adds	r7, #48	; 0x30
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	200002ec 	.word	0x200002ec
 800bb08:	0800ddf8 	.word	0x0800ddf8
 800bb0c:	0800de18 	.word	0x0800de18
 800bb10:	0800de40 	.word	0x0800de40
 800bb14:	0800de6c 	.word	0x0800de6c
 800bb18:	0800dea8 	.word	0x0800dea8
 800bb1c:	0800dee0 	.word	0x0800dee0
 800bb20:	00030d40 	.word	0x00030d40
 800bb24:	000186a0 	.word	0x000186a0
 800bb28:	0800df18 	.word	0x0800df18
 800bb2c:	0800df28 	.word	0x0800df28
 800bb30:	0800df58 	.word	0x0800df58
 800bb34:	0800df88 	.word	0x0800df88
 800bb38:	0800dfc0 	.word	0x0800dfc0
 800bb3c:	0800dfe8 	.word	0x0800dfe8

0800bb40 <RangeToLetter>:

char RangeToLetter(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
    char c;
    if( pRange->RangeStatus == 0 ){
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	7e1b      	ldrb	r3, [r3, #24]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d116      	bne.n	800bb80 <RangeToLetter+0x40>
        if( pDev->LeakyRange < RangeLow ){
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800bb58:	4b0d      	ldr	r3, [pc, #52]	; (800bb90 <RangeToLetter+0x50>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	da02      	bge.n	800bb66 <RangeToLetter+0x26>
            c='_';
 800bb60:	235f      	movs	r3, #95	; 0x5f
 800bb62:	73fb      	strb	r3, [r7, #15]
 800bb64:	e00e      	b.n	800bb84 <RangeToLetter+0x44>
        }
        else if( pDev->LeakyRange < RangeMedium ){
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800bb6c:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <RangeToLetter+0x54>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	da02      	bge.n	800bb7a <RangeToLetter+0x3a>
                c='=';
 800bb74:	233d      	movs	r3, #61	; 0x3d
 800bb76:	73fb      	strb	r3, [r7, #15]
 800bb78:	e004      	b.n	800bb84 <RangeToLetter+0x44>
        }
        else {
            c = '~';
 800bb7a:	237e      	movs	r3, #126	; 0x7e
 800bb7c:	73fb      	strb	r3, [r7, #15]
 800bb7e:	e001      	b.n	800bb84 <RangeToLetter+0x44>
        }

    }
    else{
        c='-';
 800bb80:	232d      	movs	r3, #45	; 0x2d
 800bb82:	73fb      	strb	r3, [r7, #15]
    }
    return c;
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3714      	adds	r7, #20
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bc80      	pop	{r7}
 800bb8e:	4770      	bx	lr
 800bb90:	2000079c 	.word	0x2000079c
 800bb94:	200007a0 	.word	0x200007a0

0800bb98 <Sensor_SetNewRange>:

/* Store new ranging data into the device structure, apply leaky integrator if needed */
void Sensor_SetNewRange(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
    if( pRange->RangeStatus == 0 ){
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	7e1b      	ldrb	r3, [r3, #24]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d124      	bne.n	800bbf4 <Sensor_SetNewRange+0x5c>
        if( pDev->LeakyFirst ){
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00a      	beq.n	800bbca <Sensor_SetNewRange+0x32>
            pDev->LeakyFirst = 0;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            pDev->LeakyRange = pRange->RangeMilliMeter;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	891b      	ldrh	r3, [r3, #8]
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        }
    }
    else{
        pDev->LeakyFirst = 1;
    }
}
 800bbc8:	e018      	b.n	800bbfc <Sensor_SetNewRange+0x64>
            pDev->LeakyRange = (pDev->LeakyRange*LeakyFactorFix8 + (256-LeakyFactorFix8)*pRange->RangeMilliMeter)>>8;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800bbd0:	4a0d      	ldr	r2, [pc, #52]	; (800bc08 <Sensor_SetNewRange+0x70>)
 800bbd2:	6812      	ldr	r2, [r2, #0]
 800bbd4:	fb02 f203 	mul.w	r2, r2, r3
 800bbd8:	4b0b      	ldr	r3, [pc, #44]	; (800bc08 <Sensor_SetNewRange+0x70>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	8909      	ldrh	r1, [r1, #8]
 800bbe4:	fb01 f303 	mul.w	r3, r1, r3
 800bbe8:	4413      	add	r3, r2
 800bbea:	121a      	asrs	r2, r3, #8
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
}
 800bbf2:	e003      	b.n	800bbfc <Sensor_SetNewRange+0x64>
        pDev->LeakyFirst = 1;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bc80      	pop	{r7}
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	200002e8 	.word	0x200002e8

0800bc0c <RangeDemo>:
 * Implement the ranging demo with all modes managed through the blue button (short and long press)
 * This function implements a while loop until the blue button is pressed
 * @param UseSensorsMask Mask of any sensors to use if not only one present
 * @param rangingConfig Ranging configuration to be used (same for all sensors)
 */
int RangeDemo(int UseSensorsMask, RangingConfig_e rangingConfig){
 800bc0c:	b590      	push	{r4, r7, lr}
 800bc0e:	b08d      	sub	sp, #52	; 0x34
 800bc10:	af02      	add	r7, sp, #8
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	460b      	mov	r3, r1
 800bc16:	70fb      	strb	r3, [r7, #3]
    int over=0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	61bb      	str	r3, [r7, #24]
    int status;
    char StrDisplay[5];
    char c;
    int i;
    int nSensorToUse;
    int SingleSensorNo=0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	61fb      	str	r3, [r7, #28]

    /* Setup all sensors in Single Shot mode */
    SetupSingleShot(rangingConfig);
 800bc20:	78fb      	ldrb	r3, [r7, #3]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7ff fe10 	bl	800b848 <SetupSingleShot>

    /* Which sensor to use ? */
    for(i=0, nSensorToUse=0; i<3; i++){
 800bc28:	2300      	movs	r3, #0
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	623b      	str	r3, [r7, #32]
 800bc30:	e01e      	b.n	800bc70 <RangeDemo+0x64>
        if(( UseSensorsMask& (1<<i) ) && VL53L0XDevs[i].Present ){
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc36:	fa42 f303 	asr.w	r3, r2, r3
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d013      	beq.n	800bc6a <RangeDemo+0x5e>
 800bc42:	4aa2      	ldr	r2, [pc, #648]	; (800becc <RangeDemo+0x2c0>)
 800bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc46:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800bc4a:	fb01 f303 	mul.w	r3, r1, r3
 800bc4e:	4413      	add	r3, r2
 800bc50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d007      	beq.n	800bc6a <RangeDemo+0x5e>
            nSensorToUse++;
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	623b      	str	r3, [r7, #32]
            if( nSensorToUse==1 )
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d101      	bne.n	800bc6a <RangeDemo+0x5e>
                SingleSensorNo=i;
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	61fb      	str	r3, [r7, #28]
    for(i=0, nSensorToUse=0; i<3; i++){
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	627b      	str	r3, [r7, #36]	; 0x24
 800bc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	dddd      	ble.n	800bc32 <RangeDemo+0x26>
        }
    }
    if( nSensorToUse == 0 ){
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d102      	bne.n	800bc82 <RangeDemo+0x76>
        return -1;
 800bc7c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc80:	e120      	b.n	800bec4 <RangeDemo+0x2b8>
    }

    /* Start ranging until blue button is pressed */
    do{
        if( nSensorToUse >1 ){
 800bc82:	6a3b      	ldr	r3, [r7, #32]
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	dd77      	ble.n	800bd78 <RangeDemo+0x16c>
        	/* Multiple devices */
            strcpy(StrDisplay, "    ");
 800bc88:	4a91      	ldr	r2, [pc, #580]	; (800bed0 <RangeDemo+0x2c4>)
 800bc8a:	f107 030c 	add.w	r3, r7, #12
 800bc8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc92:	6018      	str	r0, [r3, #0]
 800bc94:	3304      	adds	r3, #4
 800bc96:	7019      	strb	r1, [r3, #0]
            for( i=0; i<3; i++){
 800bc98:	2300      	movs	r3, #0
 800bc9a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc9c:	e068      	b.n	800bd70 <RangeDemo+0x164>
                if( ! VL53L0XDevs[i].Present  || (UseSensorsMask & (1<<i))==0 )
 800bc9e:	4a8b      	ldr	r2, [pc, #556]	; (800becc <RangeDemo+0x2c0>)
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800bca6:	fb01 f303 	mul.w	r3, r1, r3
 800bcaa:	4413      	add	r3, r2
 800bcac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d058      	beq.n	800bd68 <RangeDemo+0x15c>
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcba:	fa42 f303 	asr.w	r3, r2, r3
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d050      	beq.n	800bd68 <RangeDemo+0x15c>
                    continue;
                /* Call All-In-One blocking API function */
                status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[i],&RangingMeasurementData);
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bccc:	fb02 f303 	mul.w	r3, r2, r3
 800bcd0:	4a7e      	ldr	r2, [pc, #504]	; (800becc <RangeDemo+0x2c0>)
 800bcd2:	4413      	add	r3, r2
 800bcd4:	497f      	ldr	r1, [pc, #508]	; (800bed4 <RangeDemo+0x2c8>)
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7f7 fa00 	bl	80030dc <VL53L0X_PerformSingleRangingMeasurement>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	617b      	str	r3, [r7, #20]
                if( status ){
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d002      	beq.n	800bcec <RangeDemo+0xe0>
                    HandleError(ERR_DEMO_RANGE_MULTI);
 800bce6:	2002      	movs	r0, #2
 800bce8:	f7ff fc84 	bl	800b5f4 <HandleError>
                }
                /* Push data logging to UART */
                trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[i].Id, TimeStamp_Get(), RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter, RangingMeasurementData.SignalRateRtnMegaCps);
 800bcec:	4a77      	ldr	r2, [pc, #476]	; (800becc <RangeDemo+0x2c0>)
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800bcf4:	fb01 f303 	mul.w	r3, r1, r3
 800bcf8:	4413      	add	r3, r2
 800bcfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bcfe:	681c      	ldr	r4, [r3, #0]
 800bd00:	f7ff fc32 	bl	800b568 <TimeStamp_Get>
 800bd04:	4601      	mov	r1, r0
 800bd06:	4b73      	ldr	r3, [pc, #460]	; (800bed4 <RangeDemo+0x2c8>)
 800bd08:	7e1b      	ldrb	r3, [r3, #24]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	4b71      	ldr	r3, [pc, #452]	; (800bed4 <RangeDemo+0x2c8>)
 800bd0e:	891b      	ldrh	r3, [r3, #8]
 800bd10:	461a      	mov	r2, r3
 800bd12:	4b70      	ldr	r3, [pc, #448]	; (800bed4 <RangeDemo+0x2c8>)
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	9301      	str	r3, [sp, #4]
 800bd18:	9200      	str	r2, [sp, #0]
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	460a      	mov	r2, r1
 800bd1e:	4621      	mov	r1, r4
 800bd20:	486d      	ldr	r0, [pc, #436]	; (800bed8 <RangeDemo+0x2cc>)
 800bd22:	f7f4 ff5f 	bl	8000be4 <uart_printf>
                /* Store new ranging distance */
                Sensor_SetNewRange(&VL53L0XDevs[i],&RangingMeasurementData);
 800bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd28:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bd2c:	fb02 f303 	mul.w	r3, r2, r3
 800bd30:	4a66      	ldr	r2, [pc, #408]	; (800becc <RangeDemo+0x2c0>)
 800bd32:	4413      	add	r3, r2
 800bd34:	4967      	ldr	r1, [pc, #412]	; (800bed4 <RangeDemo+0x2c8>)
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7ff ff2e 	bl	800bb98 <Sensor_SetNewRange>
                /* Translate distance in bar graph (multiple device) */
                c = RangeToLetter(&VL53L0XDevs[i],&RangingMeasurementData);
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bd42:	fb02 f303 	mul.w	r3, r2, r3
 800bd46:	4a61      	ldr	r2, [pc, #388]	; (800becc <RangeDemo+0x2c0>)
 800bd48:	4413      	add	r3, r2
 800bd4a:	4962      	ldr	r1, [pc, #392]	; (800bed4 <RangeDemo+0x2c8>)
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7ff fef7 	bl	800bb40 <RangeToLetter>
 800bd52:	4603      	mov	r3, r0
 800bd54:	74fb      	strb	r3, [r7, #19]
                StrDisplay[i+1]=c;
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	3301      	adds	r3, #1
 800bd5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bd5e:	4413      	add	r3, r2
 800bd60:	7cfa      	ldrb	r2, [r7, #19]
 800bd62:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800bd66:	e000      	b.n	800bd6a <RangeDemo+0x15e>
                    continue;
 800bd68:	bf00      	nop
            for( i=0; i<3; i++){
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	627b      	str	r3, [r7, #36]	; 0x24
 800bd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	dd93      	ble.n	800bc9e <RangeDemo+0x92>
 800bd76:	e090      	b.n	800be9a <RangeDemo+0x28e>
        }
        else{
            /* only one sensor */
        	/* Call All-In-One blocking API function */
        	//Chama todos os valores armazenados de uma função de blocos
            status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[SingleSensorNo],&RangingMeasurementData);
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bd7e:	fb02 f303 	mul.w	r3, r2, r3
 800bd82:	4a52      	ldr	r2, [pc, #328]	; (800becc <RangeDemo+0x2c0>)
 800bd84:	4413      	add	r3, r2
 800bd86:	4953      	ldr	r1, [pc, #332]	; (800bed4 <RangeDemo+0x2c8>)
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7f7 f9a7 	bl	80030dc <VL53L0X_PerformSingleRangingMeasurement>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	617b      	str	r3, [r7, #20]

            if( status ==0 ){
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d17d      	bne.n	800be94 <RangeDemo+0x288>
            	/* Push data logging to UART */
            	//mostra os valores via uart.
//            	trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[SingleSensorNo].Id, TimeStamp_Get(), RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter, RangingMeasurementData.SignalRateRtnMegaCps);

            	HAL_Delay(2);
 800bd98:	2002      	movs	r0, #2
 800bd9a:	f7fb f90f 	bl	8006fbc <HAL_Delay>
            	Sensor_SetNewRange(&VL53L0XDevs[SingleSensorNo],&RangingMeasurementData);
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bda4:	fb02 f303 	mul.w	r3, r2, r3
 800bda8:	4a48      	ldr	r2, [pc, #288]	; (800becc <RangeDemo+0x2c0>)
 800bdaa:	4413      	add	r3, r2
 800bdac:	4949      	ldr	r1, [pc, #292]	; (800bed4 <RangeDemo+0x2c8>)
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7ff fef2 	bl	800bb98 <Sensor_SetNewRange>
                /* Display distance in cm */
            	if( RangingMeasurementData.RangeStatus == 0 ){
 800bdb4:	4b47      	ldr	r3, [pc, #284]	; (800bed4 <RangeDemo+0x2c8>)
 800bdb6:	7e1b      	ldrb	r3, [r3, #24]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d159      	bne.n	800be70 <RangeDemo+0x264>
            		trace_printf("Sensor #%d com %useg ligado e distancia do alvo de %dcm com desvio de %dcps.\n", VL53L0XDevs[SingleSensorNo].Id, TimeStamp_Get()/1000000, RangingMeasurementData.RangeMilliMeter/10, RangingMeasurementData.SignalRateRtnMegaCps/1000);
 800bdbc:	4a43      	ldr	r2, [pc, #268]	; (800becc <RangeDemo+0x2c0>)
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800bdc4:	fb01 f303 	mul.w	r3, r1, r3
 800bdc8:	4413      	add	r3, r2
 800bdca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bdce:	681c      	ldr	r4, [r3, #0]
 800bdd0:	f7ff fbca 	bl	800b568 <TimeStamp_Get>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	4b41      	ldr	r3, [pc, #260]	; (800bedc <RangeDemo+0x2d0>)
 800bdd8:	fba3 2302 	umull	r2, r3, r3, r2
 800bddc:	0c99      	lsrs	r1, r3, #18
 800bdde:	4b3d      	ldr	r3, [pc, #244]	; (800bed4 <RangeDemo+0x2c8>)
 800bde0:	891b      	ldrh	r3, [r3, #8]
 800bde2:	4a3f      	ldr	r2, [pc, #252]	; (800bee0 <RangeDemo+0x2d4>)
 800bde4:	fba2 2303 	umull	r2, r3, r2, r3
 800bde8:	08db      	lsrs	r3, r3, #3
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	4618      	mov	r0, r3
 800bdee:	4b39      	ldr	r3, [pc, #228]	; (800bed4 <RangeDemo+0x2c8>)
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	4a3c      	ldr	r2, [pc, #240]	; (800bee4 <RangeDemo+0x2d8>)
 800bdf4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdf8:	099b      	lsrs	r3, r3, #6
 800bdfa:	9300      	str	r3, [sp, #0]
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	460a      	mov	r2, r1
 800be00:	4621      	mov	r1, r4
 800be02:	4839      	ldr	r0, [pc, #228]	; (800bee8 <RangeDemo+0x2dc>)
 800be04:	f7f4 feee 	bl	8000be4 <uart_printf>
            		sprintf(StrDisplay, "%3dc",(int)VL53L0XDevs[SingleSensorNo].LeakyRange/10);
 800be08:	4a30      	ldr	r2, [pc, #192]	; (800becc <RangeDemo+0x2c0>)
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800be10:	fb01 f303 	mul.w	r3, r1, r3
 800be14:	4413      	add	r3, r2
 800be16:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a33      	ldr	r2, [pc, #204]	; (800beec <RangeDemo+0x2e0>)
 800be1e:	fb82 1203 	smull	r1, r2, r2, r3
 800be22:	1092      	asrs	r2, r2, #2
 800be24:	17db      	asrs	r3, r3, #31
 800be26:	1ad2      	subs	r2, r2, r3
 800be28:	f107 030c 	add.w	r3, r7, #12
 800be2c:	4930      	ldr	r1, [pc, #192]	; (800bef0 <RangeDemo+0x2e4>)
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 fa98 	bl	800c364 <siprintf>

                    if((RangingMeasurementData.RangeMilliMeter/10) < 50){
 800be34:	4b27      	ldr	r3, [pc, #156]	; (800bed4 <RangeDemo+0x2c8>)
 800be36:	891b      	ldrh	r3, [r3, #8]
 800be38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800be3c:	d211      	bcs.n	800be62 <RangeDemo+0x256>
                    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800be3e:	2201      	movs	r2, #1
 800be40:	2120      	movs	r1, #32
 800be42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800be46:	f7fb fe00 	bl	8007a4a <HAL_GPIO_WritePin>
                    	trace_printf("Acesso no momento %us!\n",TimeStamp_Get()/1000000);
 800be4a:	f7ff fb8d 	bl	800b568 <TimeStamp_Get>
 800be4e:	4602      	mov	r2, r0
 800be50:	4b22      	ldr	r3, [pc, #136]	; (800bedc <RangeDemo+0x2d0>)
 800be52:	fba3 2302 	umull	r2, r3, r3, r2
 800be56:	0c9b      	lsrs	r3, r3, #18
 800be58:	4619      	mov	r1, r3
 800be5a:	4826      	ldr	r0, [pc, #152]	; (800bef4 <RangeDemo+0x2e8>)
 800be5c:	f7f4 fec2 	bl	8000be4 <uart_printf>
 800be60:	e01b      	b.n	800be9a <RangeDemo+0x28e>

                    }
                    else {
                    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800be62:	2200      	movs	r2, #0
 800be64:	2120      	movs	r1, #32
 800be66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800be6a:	f7fb fdee 	bl	8007a4a <HAL_GPIO_WritePin>
 800be6e:	e014      	b.n	800be9a <RangeDemo+0x28e>
                    }
                }

                else{
                    sprintf(StrDisplay, "----");
 800be70:	4a21      	ldr	r2, [pc, #132]	; (800bef8 <RangeDemo+0x2ec>)
 800be72:	f107 030c 	add.w	r3, r7, #12
 800be76:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be7a:	6018      	str	r0, [r3, #0]
 800be7c:	3304      	adds	r3, #4
 800be7e:	7019      	strb	r1, [r3, #0]
//                    StrDisplay[0]=VL53L0XDevs[SingleSensorNo].DevLetter;
                    trace_printf("sensor fora de alcance.\n");
 800be80:	481e      	ldr	r0, [pc, #120]	; (800befc <RangeDemo+0x2f0>)
 800be82:	f7f4 feaf 	bl	8000be4 <uart_printf>
                    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800be86:	2200      	movs	r2, #0
 800be88:	2120      	movs	r1, #32
 800be8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800be8e:	f7fb fddc 	bl	8007a4a <HAL_GPIO_WritePin>
 800be92:	e002      	b.n	800be9a <RangeDemo+0x28e>
                }
            }
            else{
                HandleError(ERR_DEMO_RANGE_ONE);
 800be94:	2001      	movs	r0, #1
 800be96:	f7ff fbad 	bl	800b5f4 <HandleError>
            }
        }
        XNUCLEO53L0A1_SetDisplayString(StrDisplay);
 800be9a:	f107 030c 	add.w	r3, r7, #12
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7f4 fdf0 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
        /* Check blue button */
        if( !BSP_GetPushButton() ){
 800bea4:	f7ff fb6c 	bl	800b580 <BSP_GetPushButton>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d102      	bne.n	800beb4 <RangeDemo+0x2a8>
            over=1;
 800beae:	2301      	movs	r3, #1
 800beb0:	61bb      	str	r3, [r7, #24]
            break;
 800beb2:	e003      	b.n	800bebc <RangeDemo+0x2b0>
        }
    }while( !over);
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f43f aee3 	beq.w	800bc82 <RangeDemo+0x76>
    /* Wait button to be un-pressed to decide if it is a short or long press */
    status=PusbButton_WaitUnPress();
 800bebc:	f7ff fb72 	bl	800b5a4 <PusbButton_WaitUnPress>
 800bec0:	6178      	str	r0, [r7, #20]
    return status;
 800bec2:	697b      	ldr	r3, [r7, #20]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	372c      	adds	r7, #44	; 0x2c
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd90      	pop	{r4, r7, pc}
 800becc:	200002ec 	.word	0x200002ec
 800bed0:	0800ddf0 	.word	0x0800ddf0
 800bed4:	20000b00 	.word	0x20000b00
 800bed8:	0800e014 	.word	0x0800e014
 800bedc:	431bde83 	.word	0x431bde83
 800bee0:	cccccccd 	.word	0xcccccccd
 800bee4:	10624dd3 	.word	0x10624dd3
 800bee8:	0800e024 	.word	0x0800e024
 800beec:	66666667 	.word	0x66666667
 800bef0:	0800e074 	.word	0x0800e074
 800bef4:	0800e07c 	.word	0x0800e07c
 800bef8:	0800e094 	.word	0x0800e094
 800befc:	0800e09c 	.word	0x0800e09c

0800bf00 <ResetAndDetectSensor>:
    XNUCLEO53L0A1_SetIntrStateId(0, XNUCLEO53L0A1_DEV_CENTER);
    VL53L0A1_EXTI_IOUnconfigure(XNUCLEO53L0A1_DEV_CENTER);
}
#endif

void ResetAndDetectSensor(int SetDisplay){
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
    int nSensor;
    nSensor = DetectSensors(SetDisplay);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f7ff fb87 	bl	800b61c <DetectSensors>
 800bf0e:	60f8      	str	r0, [r7, #12]
    /* at least one sensor and if one it must be the built-in one  */
    if( (nSensor <=0) ||  (nSensor ==1 && VL53L0XDevs[1].Present==0) ){
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	dd07      	ble.n	800bf26 <ResetAndDetectSensor+0x26>
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d108      	bne.n	800bf2e <ResetAndDetectSensor+0x2e>
 800bf1c:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <ResetAndDetectSensor+0x38>)
 800bf1e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d103      	bne.n	800bf2e <ResetAndDetectSensor+0x2e>
        HandleError(ERR_DETECT);
 800bf26:	f04f 30ff 	mov.w	r0, #4294967295
 800bf2a:	f7ff fb63 	bl	800b5f4 <HandleError>
    }
}
 800bf2e:	bf00      	nop
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	200002ec 	.word	0x200002ec

0800bf3c <main>:

/* USER CODE END 0 */

int main(void)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  //tratamento do sensor
    int ExitWithLongPress;
  //valor ira pegar o primeiro sensor
  int UseSensorsMask = 1<<XNUCLEO53L0A1_DEV_CENTER;
 800bf42:	2302      	movs	r3, #2
 800bf44:	60fb      	str	r3, [r7, #12]
  //valores para aparecer no display
  DemoMode_e DemoMode = RANGE_VALUE;
 800bf46:	2300      	movs	r3, #0
 800bf48:	72fb      	strb	r3, [r7, #11]
  RangingConfig_e RangingConfig = HIGH_ACCURACY;
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	72bb      	strb	r3, [r7, #10]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800bf4e:	f7fa ffeb 	bl	8006f28 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800bf52:	f000 f867 	bl	800c024 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800bf56:	f000 f8df 	bl	800c118 <MX_GPIO_Init>

  /* Initialize timestamping for UART logging */
  TimeStamp_Init();
 800bf5a:	f7ff faf1 	bl	800b540 <TimeStamp_Init>

  /* USER CODE BEGIN 2 */
  XNUCLEO53L0A1_Init();
 800bf5e:	f7f4 fc03 	bl	8000768 <XNUCLEO53L0A1_Init>
  uart_printf(WelcomeMsg);
 800bf62:	482b      	ldr	r0, [pc, #172]	; (800c010 <main+0xd4>)
 800bf64:	f7f4 fe3e 	bl	8000be4 <uart_printf>
  XNUCLEO53L0A1_SetDisplayString("LOCO");
 800bf68:	482a      	ldr	r0, [pc, #168]	; (800c014 <main+0xd8>)
 800bf6a:	f7f4 fd8b 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
//  XNUCLEO53L0A1_SetDisplayString("53L0");
  HAL_Delay(WelcomeTime);
 800bf6e:	f44f 7025 	mov.w	r0, #660	; 0x294
 800bf72:	f7fb f823 	bl	8006fbc <HAL_Delay>
  ResetAndDetectSensor(1);
 800bf76:	2001      	movs	r0, #1
 800bf78:	f7ff ffc2 	bl	800bf00 <ResetAndDetectSensor>

  /* Set VL53L0X API trace level */
  VL53L0X_trace_config(NULL, TRACE_MODULE_NONE, TRACE_LEVEL_NONE, TRACE_FUNCTION_NONE);
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	2200      	movs	r2, #0
 800bf80:	2100      	movs	r1, #0
 800bf82:	2000      	movs	r0, #0
 800bf84:	f7fa ff5a 	bl	8006e3c <VL53L0X_trace_config>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
      /* Display demo mode */
      XNUCLEO53L0A1_SetDisplayString(DemoModeTxt[DemoMode]);
 800bf88:	7afb      	ldrb	r3, [r7, #11]
 800bf8a:	4a23      	ldr	r2, [pc, #140]	; (800c018 <main+0xdc>)
 800bf8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7f4 fd77 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
      HAL_Delay(ModeChangeDispTime);
 800bf96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bf9a:	f7fb f80f 	bl	8006fbc <HAL_Delay>

//      /* Display Ranging config */
	  XNUCLEO53L0A1_SetDisplayString(RangingConfigTxt[RangingConfig]);
 800bf9e:	7abb      	ldrb	r3, [r7, #10]
 800bfa0:	4a1e      	ldr	r2, [pc, #120]	; (800c01c <main+0xe0>)
 800bfa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7f4 fd6c 	bl	8000a84 <XNUCLEO53L0A1_SetDisplayString>
	  HAL_Delay(ModeChangeDispTime);
 800bfac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bfb0:	f7fb f804 	bl	8006fbc <HAL_Delay>
//
//	  /* Reset and Detect all sensors */
      ResetAndDetectSensor(0);
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f7ff ffa3 	bl	800bf00 <ResetAndDetectSensor>
//
//      /* Reset Timestamping */
      TimeStamp_Reset();
 800bfba:	f7ff fac7 	bl	800b54c <TimeStamp_Reset>
//      ResetAndDetectSensor(0);
//      AlarmDemo();
#else

      /* Start Ranging demo */
      ExitWithLongPress = RangeDemo(UseSensorsMask, RangingConfig);
 800bfbe:	7abb      	ldrb	r3, [r7, #10]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f7ff fe22 	bl	800bc0c <RangeDemo>
 800bfc8:	6078      	str	r0, [r7, #4]

      /* Blue button has been pressed (long or short press) */
      if(ExitWithLongPress){
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d012      	beq.n	800bff6 <main+0xba>
    	  /* Long press : change demo mode if multiple sensors present*/
    	  if( nDevPresent >1 ){
 800bfd0:	4b13      	ldr	r3, [pc, #76]	; (800c020 <main+0xe4>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	ddd7      	ble.n	800bf88 <main+0x4c>
    		  /* If more than one sensor is present then toggle demo mode */
    		  DemoMode = (DemoMode == RANGE_VALUE) ? BAR_GRAPH : RANGE_VALUE;
 800bfd8:	7afb      	ldrb	r3, [r7, #11]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	bf0c      	ite	eq
 800bfde:	2301      	moveq	r3, #1
 800bfe0:	2300      	movne	r3, #0
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	72fb      	strb	r3, [r7, #11]
    		  UseSensorsMask = (DemoMode == BAR_GRAPH) ? 0x7 : 1<<XNUCLEO53L0A1_DEV_CENTER;
 800bfe6:	7afb      	ldrb	r3, [r7, #11]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d101      	bne.n	800bff0 <main+0xb4>
 800bfec:	2307      	movs	r3, #7
 800bfee:	e000      	b.n	800bff2 <main+0xb6>
 800bff0:	2302      	movs	r3, #2
 800bff2:	60fb      	str	r3, [r7, #12]
 800bff4:	e7c8      	b.n	800bf88 <main+0x4c>
    	  }
      } else {
    	  /* Short press : change ranging config */
    	  RangingConfig = (RangingConfig == LONG_RANGE) ? HIGH_SPEED : ((RangingConfig == HIGH_SPEED) ? HIGH_ACCURACY : LONG_RANGE);
 800bff6:	7abb      	ldrb	r3, [r7, #10]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d006      	beq.n	800c00a <main+0xce>
 800bffc:	7abb      	ldrb	r3, [r7, #10]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d101      	bne.n	800c006 <main+0xca>
 800c002:	2302      	movs	r3, #2
 800c004:	e002      	b.n	800c00c <main+0xd0>
 800c006:	2300      	movs	r3, #0
 800c008:	e000      	b.n	800c00c <main+0xd0>
 800c00a:	2301      	movs	r3, #1
 800c00c:	72bb      	strb	r3, [r7, #10]
      XNUCLEO53L0A1_SetDisplayString(DemoModeTxt[DemoMode]);
 800c00e:	e7bb      	b.n	800bf88 <main+0x4c>
 800c010:	200007a4 	.word	0x200007a4
 800c014:	0800e0b8 	.word	0x0800e0b8
 800c018:	200002e0 	.word	0x200002e0
 800c01c:	200002d4 	.word	0x200002d4
 800c020:	20000968 	.word	0x20000968

0800c024 <SystemClock_Config>:
}
#endif

#ifdef STM32L476xx
void SystemClock_Config(void)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b0ba      	sub	sp, #232	; 0xe8
 800c028:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c02a:	2302      	movs	r3, #2
 800c02c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c030:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800c038:	2310      	movs	r3, #16
 800c03a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c03e:	2302      	movs	r3, #2
 800c040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c044:	2302      	movs	r3, #2
 800c046:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800c04a:	2301      	movs	r3, #1
 800c04c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 10;
 800c050:	230a      	movs	r3, #10
 800c052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800c056:	2307      	movs	r3, #7
 800c058:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800c05c:	2302      	movs	r3, #2
 800c05e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800c062:	2302      	movs	r3, #2
 800c064:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c068:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fc f9d7 	bl	8008420 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c072:	230f      	movs	r3, #15
 800c074:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c078:	2303      	movs	r3, #3
 800c07a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c07e:	2300      	movs	r3, #0
 800c080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c084:	2300      	movs	r3, #0
 800c086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c08a:	2300      	movs	r3, #0
 800c08c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800c090:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c094:	2104      	movs	r1, #4
 800c096:	4618      	mov	r0, r3
 800c098:	f7fc fd4c 	bl	8008b34 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800c09c:	2340      	movs	r3, #64	; 0x40
 800c09e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	65bb      	str	r3, [r7, #88]	; 0x58
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800c0a4:	f107 0308 	add.w	r3, r7, #8
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fd f80f 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800c0b6:	f107 0308 	add.w	r3, r7, #8
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fd f806 	bl	80090cc <HAL_RCCEx_PeriphCLKConfig>


  __PWR_CLK_ENABLE();
 800c0c0:	4b13      	ldr	r3, [pc, #76]	; (800c110 <SystemClock_Config+0xec>)
 800c0c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0c4:	4a12      	ldr	r2, [pc, #72]	; (800c110 <SystemClock_Config+0xec>)
 800c0c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0ca:	6593      	str	r3, [r2, #88]	; 0x58
 800c0cc:	4b10      	ldr	r3, [pc, #64]	; (800c110 <SystemClock_Config+0xec>)
 800c0ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0d4:	607b      	str	r3, [r7, #4]
 800c0d6:	687b      	ldr	r3, [r7, #4]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c0d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c0dc:	f7fc f94a 	bl	8008374 <HAL_PWREx_ControlVoltageScaling>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800c0e0:	f7fc ff44 	bl	8008f6c <HAL_RCC_GetHCLKFreq>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	4b0b      	ldr	r3, [pc, #44]	; (800c114 <SystemClock_Config+0xf0>)
 800c0e8:	fba3 2302 	umull	r2, r3, r3, r2
 800c0ec:	099b      	lsrs	r3, r3, #6
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fb f877 	bl	80071e2 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800c0f4:	2004      	movs	r0, #4
 800c0f6:	f7fb f881 	bl	80071fc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c102:	f7fb f844 	bl	800718e <HAL_NVIC_SetPriority>
}
 800c106:	bf00      	nop
 800c108:	37e8      	adds	r7, #232	; 0xe8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	40021000 	.word	0x40021000
 800c114:	10624dd3 	.word	0x10624dd3

0800c118 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08a      	sub	sp, #40	; 0x28
 800c11c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800c11e:	4b28      	ldr	r3, [pc, #160]	; (800c1c0 <MX_GPIO_Init+0xa8>)
 800c120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c122:	4a27      	ldr	r2, [pc, #156]	; (800c1c0 <MX_GPIO_Init+0xa8>)
 800c124:	f043 0304 	orr.w	r3, r3, #4
 800c128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c12a:	4b25      	ldr	r3, [pc, #148]	; (800c1c0 <MX_GPIO_Init+0xa8>)
 800c12c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c12e:	f003 0304 	and.w	r3, r3, #4
 800c132:	613b      	str	r3, [r7, #16]
 800c134:	693b      	ldr	r3, [r7, #16]
  __GPIOH_CLK_ENABLE();
 800c136:	4b22      	ldr	r3, [pc, #136]	; (800c1c0 <MX_GPIO_Init+0xa8>)
 800c138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c13a:	4a21      	ldr	r2, [pc, #132]	; (800c1c0 <MX_GPIO_Init+0xa8>)
 800c13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c140:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c142:	4b1f      	ldr	r3, [pc, #124]	; (800c1c0 <MX_GPIO_Init+0xa8>)
 800c144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	68fb      	ldr	r3, [r7, #12]
  __GPIOA_CLK_ENABLE();
 800c14e:	4b1c      	ldr	r3, [pc, #112]	; (800c1c0 <MX_GPIO_Init+0xa8>)
 800c150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c152:	4a1b      	ldr	r2, [pc, #108]	; (800c1c0 <MX_GPIO_Init+0xa8>)
 800c154:	f043 0301 	orr.w	r3, r3, #1
 800c158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c15a:	4b19      	ldr	r3, [pc, #100]	; (800c1c0 <MX_GPIO_Init+0xa8>)
 800c15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c15e:	f003 0301 	and.w	r3, r3, #1
 800c162:	60bb      	str	r3, [r7, #8]
 800c164:	68bb      	ldr	r3, [r7, #8]
  __GPIOB_CLK_ENABLE();
 800c166:	4b16      	ldr	r3, [pc, #88]	; (800c1c0 <MX_GPIO_Init+0xa8>)
 800c168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c16a:	4a15      	ldr	r2, [pc, #84]	; (800c1c0 <MX_GPIO_Init+0xa8>)
 800c16c:	f043 0302 	orr.w	r3, r3, #2
 800c170:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c172:	4b13      	ldr	r3, [pc, #76]	; (800c1c0 <MX_GPIO_Init+0xa8>)
 800c174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c176:	f003 0302 	and.w	r3, r3, #2
 800c17a:	607b      	str	r3, [r7, #4]
 800c17c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800c17e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c184:	4b0f      	ldr	r3, [pc, #60]	; (800c1c4 <MX_GPIO_Init+0xac>)
 800c186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c188:	2300      	movs	r3, #0
 800c18a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c18c:	f107 0314 	add.w	r3, r7, #20
 800c190:	4619      	mov	r1, r3
 800c192:	480d      	ldr	r0, [pc, #52]	; (800c1c8 <MX_GPIO_Init+0xb0>)
 800c194:	f7fb fa96 	bl	80076c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800c198:	2320      	movs	r3, #32
 800c19a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c19c:	2301      	movs	r3, #1
 800c19e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800c1a8:	f107 0314 	add.w	r3, r7, #20
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c1b2:	f7fb fa87 	bl	80076c4 <HAL_GPIO_Init>

}
 800c1b6:	bf00      	nop
 800c1b8:	3728      	adds	r7, #40	; 0x28
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	40021000 	.word	0x40021000
 800c1c4:	10120000 	.word	0x10120000
 800c1c8:	48000800 	.word	0x48000800

0800c1cc <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c1d0:	2003      	movs	r0, #3
 800c1d2:	f7fa ffd1 	bl	8007178 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2100      	movs	r1, #0
 800c1da:	f04f 30ff 	mov.w	r0, #4294967295
 800c1de:	f7fa ffd6 	bl	800718e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c1e2:	bf00      	nop
 800c1e4:	bd80      	pop	{r7, pc}
	...

0800c1e8 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]

  if(htim_oc->Instance==TIM2)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1f8:	d10c      	bne.n	800c214 <HAL_TIM_OC_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 800c1fa:	4b11      	ldr	r3, [pc, #68]	; (800c240 <HAL_TIM_OC_MspInit+0x58>)
 800c1fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1fe:	4a10      	ldr	r2, [pc, #64]	; (800c240 <HAL_TIM_OC_MspInit+0x58>)
 800c200:	f043 0301 	orr.w	r3, r3, #1
 800c204:	6593      	str	r3, [r2, #88]	; 0x58
 800c206:	4b0e      	ldr	r3, [pc, #56]	; (800c240 <HAL_TIM_OC_MspInit+0x58>)
 800c208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c20a:	f003 0301 	and.w	r3, r3, #1
 800c20e:	60fb      	str	r3, [r7, #12]
 800c210:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800c212:	e010      	b.n	800c236 <HAL_TIM_OC_MspInit+0x4e>
  else if(htim_oc->Instance==TIM5)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a0a      	ldr	r2, [pc, #40]	; (800c244 <HAL_TIM_OC_MspInit+0x5c>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d10b      	bne.n	800c236 <HAL_TIM_OC_MspInit+0x4e>
    __TIM5_CLK_ENABLE();
 800c21e:	4b08      	ldr	r3, [pc, #32]	; (800c240 <HAL_TIM_OC_MspInit+0x58>)
 800c220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c222:	4a07      	ldr	r2, [pc, #28]	; (800c240 <HAL_TIM_OC_MspInit+0x58>)
 800c224:	f043 0308 	orr.w	r3, r3, #8
 800c228:	6593      	str	r3, [r2, #88]	; 0x58
 800c22a:	4b05      	ldr	r3, [pc, #20]	; (800c240 <HAL_TIM_OC_MspInit+0x58>)
 800c22c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c22e:	f003 0308 	and.w	r3, r3, #8
 800c232:	60bb      	str	r3, [r7, #8]
 800c234:	68bb      	ldr	r3, [r7, #8]
}
 800c236:	bf00      	nop
 800c238:	3714      	adds	r7, #20
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bc80      	pop	{r7}
 800c23e:	4770      	bx	lr
 800c240:	40021000 	.word	0x40021000
 800c244:	40000c00 	.word	0x40000c00

0800c248 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800c248:	b480      	push	{r7}
 800c24a:	af00      	add	r7, sp, #0
}
 800c24c:	bf00      	nop
 800c24e:	46bd      	mov	sp, r7
 800c250:	bc80      	pop	{r7}
 800c252:	4770      	bx	lr

0800c254 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800c254:	b480      	push	{r7}
 800c256:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800c258:	e7fe      	b.n	800c258 <HardFault_Handler+0x4>

0800c25a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800c25a:	b480      	push	{r7}
 800c25c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800c25e:	e7fe      	b.n	800c25e <MemManage_Handler+0x4>

0800c260 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800c260:	b480      	push	{r7}
 800c262:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800c264:	e7fe      	b.n	800c264 <BusFault_Handler+0x4>

0800c266 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800c266:	b480      	push	{r7}
 800c268:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800c26a:	e7fe      	b.n	800c26a <UsageFault_Handler+0x4>

0800c26c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800c26c:	b480      	push	{r7}
 800c26e:	af00      	add	r7, sp, #0
}
 800c270:	bf00      	nop
 800c272:	46bd      	mov	sp, r7
 800c274:	bc80      	pop	{r7}
 800c276:	4770      	bx	lr

0800c278 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800c278:	b480      	push	{r7}
 800c27a:	af00      	add	r7, sp, #0
}
 800c27c:	bf00      	nop
 800c27e:	46bd      	mov	sp, r7
 800c280:	bc80      	pop	{r7}
 800c282:	4770      	bx	lr

0800c284 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800c284:	b480      	push	{r7}
 800c286:	af00      	add	r7, sp, #0
}
 800c288:	bf00      	nop
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bc80      	pop	{r7}
 800c28e:	4770      	bx	lr

0800c290 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800c294:	f7fa fe7a 	bl	8006f8c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800c298:	f7fa ffcc 	bl	8007234 <HAL_SYSTICK_IRQHandler>
}
 800c29c:	bf00      	nop
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c2a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c2d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800c2a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800c2a6:	e003      	b.n	800c2b0 <LoopCopyDataInit>

0800c2a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800c2a8:	4b0c      	ldr	r3, [pc, #48]	; (800c2dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800c2aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800c2ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800c2ae:	3104      	adds	r1, #4

0800c2b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800c2b0:	480b      	ldr	r0, [pc, #44]	; (800c2e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 800c2b2:	4b0c      	ldr	r3, [pc, #48]	; (800c2e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 800c2b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800c2b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800c2b8:	d3f6      	bcc.n	800c2a8 <CopyDataInit>
	ldr	r2, =_sbss
 800c2ba:	4a0b      	ldr	r2, [pc, #44]	; (800c2e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800c2bc:	e002      	b.n	800c2c4 <LoopFillZerobss>

0800c2be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800c2be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800c2c0:	f842 3b04 	str.w	r3, [r2], #4

0800c2c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800c2c4:	4b09      	ldr	r3, [pc, #36]	; (800c2ec <LoopForever+0x16>)
	cmp	r2, r3
 800c2c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800c2c8:	d3f9      	bcc.n	800c2be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c2ca:	f7fa fe01 	bl	8006ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c2ce:	f000 f811 	bl	800c2f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c2d2:	f7ff fe33 	bl	800bf3c <main>

0800c2d6 <LoopForever>:

LoopForever:
    b LoopForever
 800c2d6:	e7fe      	b.n	800c2d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800c2d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800c2dc:	0800e108 	.word	0x0800e108
	ldr	r0, =_sdata
 800c2e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800c2e4:	20000838 	.word	0x20000838
	ldr	r2, =_sbss
 800c2e8:	20000838 	.word	0x20000838
	ldr	r3, = _ebss
 800c2ec:	20000b20 	.word	0x20000b20

0800c2f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c2f0:	e7fe      	b.n	800c2f0 <ADC1_2_IRQHandler>
	...

0800c2f4 <__libc_init_array>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	4e0d      	ldr	r6, [pc, #52]	; (800c32c <__libc_init_array+0x38>)
 800c2f8:	4c0d      	ldr	r4, [pc, #52]	; (800c330 <__libc_init_array+0x3c>)
 800c2fa:	1ba4      	subs	r4, r4, r6
 800c2fc:	10a4      	asrs	r4, r4, #2
 800c2fe:	2500      	movs	r5, #0
 800c300:	42a5      	cmp	r5, r4
 800c302:	d109      	bne.n	800c318 <__libc_init_array+0x24>
 800c304:	4e0b      	ldr	r6, [pc, #44]	; (800c334 <__libc_init_array+0x40>)
 800c306:	4c0c      	ldr	r4, [pc, #48]	; (800c338 <__libc_init_array+0x44>)
 800c308:	f000 fc78 	bl	800cbfc <_init>
 800c30c:	1ba4      	subs	r4, r4, r6
 800c30e:	10a4      	asrs	r4, r4, #2
 800c310:	2500      	movs	r5, #0
 800c312:	42a5      	cmp	r5, r4
 800c314:	d105      	bne.n	800c322 <__libc_init_array+0x2e>
 800c316:	bd70      	pop	{r4, r5, r6, pc}
 800c318:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c31c:	4798      	blx	r3
 800c31e:	3501      	adds	r5, #1
 800c320:	e7ee      	b.n	800c300 <__libc_init_array+0xc>
 800c322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c326:	4798      	blx	r3
 800c328:	3501      	adds	r5, #1
 800c32a:	e7f2      	b.n	800c312 <__libc_init_array+0x1e>
 800c32c:	0800e0f8 	.word	0x0800e0f8
 800c330:	0800e0f8 	.word	0x0800e0f8
 800c334:	0800e0f8 	.word	0x0800e0f8
 800c338:	0800e0fc 	.word	0x0800e0fc

0800c33c <memcpy>:
 800c33c:	b510      	push	{r4, lr}
 800c33e:	1e43      	subs	r3, r0, #1
 800c340:	440a      	add	r2, r1
 800c342:	4291      	cmp	r1, r2
 800c344:	d100      	bne.n	800c348 <memcpy+0xc>
 800c346:	bd10      	pop	{r4, pc}
 800c348:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c34c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c350:	e7f7      	b.n	800c342 <memcpy+0x6>

0800c352 <memset>:
 800c352:	4402      	add	r2, r0
 800c354:	4603      	mov	r3, r0
 800c356:	4293      	cmp	r3, r2
 800c358:	d100      	bne.n	800c35c <memset+0xa>
 800c35a:	4770      	bx	lr
 800c35c:	f803 1b01 	strb.w	r1, [r3], #1
 800c360:	e7f9      	b.n	800c356 <memset+0x4>
	...

0800c364 <siprintf>:
 800c364:	b40e      	push	{r1, r2, r3}
 800c366:	b500      	push	{lr}
 800c368:	b09c      	sub	sp, #112	; 0x70
 800c36a:	ab1d      	add	r3, sp, #116	; 0x74
 800c36c:	9002      	str	r0, [sp, #8]
 800c36e:	9006      	str	r0, [sp, #24]
 800c370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c374:	4809      	ldr	r0, [pc, #36]	; (800c39c <siprintf+0x38>)
 800c376:	9107      	str	r1, [sp, #28]
 800c378:	9104      	str	r1, [sp, #16]
 800c37a:	4909      	ldr	r1, [pc, #36]	; (800c3a0 <siprintf+0x3c>)
 800c37c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c380:	9105      	str	r1, [sp, #20]
 800c382:	6800      	ldr	r0, [r0, #0]
 800c384:	9301      	str	r3, [sp, #4]
 800c386:	a902      	add	r1, sp, #8
 800c388:	f000 f8a8 	bl	800c4dc <_svfiprintf_r>
 800c38c:	9b02      	ldr	r3, [sp, #8]
 800c38e:	2200      	movs	r2, #0
 800c390:	701a      	strb	r2, [r3, #0]
 800c392:	b01c      	add	sp, #112	; 0x70
 800c394:	f85d eb04 	ldr.w	lr, [sp], #4
 800c398:	b003      	add	sp, #12
 800c39a:	4770      	bx	lr
 800c39c:	200007d4 	.word	0x200007d4
 800c3a0:	ffff0208 	.word	0xffff0208

0800c3a4 <strcpy>:
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3aa:	f803 2b01 	strb.w	r2, [r3], #1
 800c3ae:	2a00      	cmp	r2, #0
 800c3b0:	d1f9      	bne.n	800c3a6 <strcpy+0x2>
 800c3b2:	4770      	bx	lr

0800c3b4 <_vsniprintf_r>:
 800c3b4:	b530      	push	{r4, r5, lr}
 800c3b6:	1e14      	subs	r4, r2, #0
 800c3b8:	4605      	mov	r5, r0
 800c3ba:	b09b      	sub	sp, #108	; 0x6c
 800c3bc:	4618      	mov	r0, r3
 800c3be:	da05      	bge.n	800c3cc <_vsniprintf_r+0x18>
 800c3c0:	238b      	movs	r3, #139	; 0x8b
 800c3c2:	602b      	str	r3, [r5, #0]
 800c3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c8:	b01b      	add	sp, #108	; 0x6c
 800c3ca:	bd30      	pop	{r4, r5, pc}
 800c3cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c3d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c3d4:	bf14      	ite	ne
 800c3d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c3da:	4623      	moveq	r3, r4
 800c3dc:	9302      	str	r3, [sp, #8]
 800c3de:	9305      	str	r3, [sp, #20]
 800c3e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3e4:	9100      	str	r1, [sp, #0]
 800c3e6:	9104      	str	r1, [sp, #16]
 800c3e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c3f0:	4669      	mov	r1, sp
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f000 f872 	bl	800c4dc <_svfiprintf_r>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	bfbc      	itt	lt
 800c3fc:	238b      	movlt	r3, #139	; 0x8b
 800c3fe:	602b      	strlt	r3, [r5, #0]
 800c400:	2c00      	cmp	r4, #0
 800c402:	d0e1      	beq.n	800c3c8 <_vsniprintf_r+0x14>
 800c404:	9b00      	ldr	r3, [sp, #0]
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
 800c40a:	e7dd      	b.n	800c3c8 <_vsniprintf_r+0x14>

0800c40c <vsniprintf>:
 800c40c:	b507      	push	{r0, r1, r2, lr}
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	4613      	mov	r3, r2
 800c412:	460a      	mov	r2, r1
 800c414:	4601      	mov	r1, r0
 800c416:	4803      	ldr	r0, [pc, #12]	; (800c424 <vsniprintf+0x18>)
 800c418:	6800      	ldr	r0, [r0, #0]
 800c41a:	f7ff ffcb 	bl	800c3b4 <_vsniprintf_r>
 800c41e:	b003      	add	sp, #12
 800c420:	f85d fb04 	ldr.w	pc, [sp], #4
 800c424:	200007d4 	.word	0x200007d4

0800c428 <__ssputs_r>:
 800c428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c42c:	688e      	ldr	r6, [r1, #8]
 800c42e:	429e      	cmp	r6, r3
 800c430:	4682      	mov	sl, r0
 800c432:	460c      	mov	r4, r1
 800c434:	4690      	mov	r8, r2
 800c436:	4699      	mov	r9, r3
 800c438:	d837      	bhi.n	800c4aa <__ssputs_r+0x82>
 800c43a:	898a      	ldrh	r2, [r1, #12]
 800c43c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c440:	d031      	beq.n	800c4a6 <__ssputs_r+0x7e>
 800c442:	6825      	ldr	r5, [r4, #0]
 800c444:	6909      	ldr	r1, [r1, #16]
 800c446:	1a6f      	subs	r7, r5, r1
 800c448:	6965      	ldr	r5, [r4, #20]
 800c44a:	2302      	movs	r3, #2
 800c44c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c450:	fb95 f5f3 	sdiv	r5, r5, r3
 800c454:	f109 0301 	add.w	r3, r9, #1
 800c458:	443b      	add	r3, r7
 800c45a:	429d      	cmp	r5, r3
 800c45c:	bf38      	it	cc
 800c45e:	461d      	movcc	r5, r3
 800c460:	0553      	lsls	r3, r2, #21
 800c462:	d530      	bpl.n	800c4c6 <__ssputs_r+0x9e>
 800c464:	4629      	mov	r1, r5
 800c466:	f000 fb21 	bl	800caac <_malloc_r>
 800c46a:	4606      	mov	r6, r0
 800c46c:	b950      	cbnz	r0, 800c484 <__ssputs_r+0x5c>
 800c46e:	230c      	movs	r3, #12
 800c470:	f8ca 3000 	str.w	r3, [sl]
 800c474:	89a3      	ldrh	r3, [r4, #12]
 800c476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c47a:	81a3      	strh	r3, [r4, #12]
 800c47c:	f04f 30ff 	mov.w	r0, #4294967295
 800c480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c484:	463a      	mov	r2, r7
 800c486:	6921      	ldr	r1, [r4, #16]
 800c488:	f7ff ff58 	bl	800c33c <memcpy>
 800c48c:	89a3      	ldrh	r3, [r4, #12]
 800c48e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c496:	81a3      	strh	r3, [r4, #12]
 800c498:	6126      	str	r6, [r4, #16]
 800c49a:	6165      	str	r5, [r4, #20]
 800c49c:	443e      	add	r6, r7
 800c49e:	1bed      	subs	r5, r5, r7
 800c4a0:	6026      	str	r6, [r4, #0]
 800c4a2:	60a5      	str	r5, [r4, #8]
 800c4a4:	464e      	mov	r6, r9
 800c4a6:	454e      	cmp	r6, r9
 800c4a8:	d900      	bls.n	800c4ac <__ssputs_r+0x84>
 800c4aa:	464e      	mov	r6, r9
 800c4ac:	4632      	mov	r2, r6
 800c4ae:	4641      	mov	r1, r8
 800c4b0:	6820      	ldr	r0, [r4, #0]
 800c4b2:	f000 fa93 	bl	800c9dc <memmove>
 800c4b6:	68a3      	ldr	r3, [r4, #8]
 800c4b8:	1b9b      	subs	r3, r3, r6
 800c4ba:	60a3      	str	r3, [r4, #8]
 800c4bc:	6823      	ldr	r3, [r4, #0]
 800c4be:	441e      	add	r6, r3
 800c4c0:	6026      	str	r6, [r4, #0]
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	e7dc      	b.n	800c480 <__ssputs_r+0x58>
 800c4c6:	462a      	mov	r2, r5
 800c4c8:	f000 fb4a 	bl	800cb60 <_realloc_r>
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d1e2      	bne.n	800c498 <__ssputs_r+0x70>
 800c4d2:	6921      	ldr	r1, [r4, #16]
 800c4d4:	4650      	mov	r0, sl
 800c4d6:	f000 fa9b 	bl	800ca10 <_free_r>
 800c4da:	e7c8      	b.n	800c46e <__ssputs_r+0x46>

0800c4dc <_svfiprintf_r>:
 800c4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e0:	461d      	mov	r5, r3
 800c4e2:	898b      	ldrh	r3, [r1, #12]
 800c4e4:	061f      	lsls	r7, r3, #24
 800c4e6:	b09d      	sub	sp, #116	; 0x74
 800c4e8:	4680      	mov	r8, r0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	4616      	mov	r6, r2
 800c4ee:	d50f      	bpl.n	800c510 <_svfiprintf_r+0x34>
 800c4f0:	690b      	ldr	r3, [r1, #16]
 800c4f2:	b96b      	cbnz	r3, 800c510 <_svfiprintf_r+0x34>
 800c4f4:	2140      	movs	r1, #64	; 0x40
 800c4f6:	f000 fad9 	bl	800caac <_malloc_r>
 800c4fa:	6020      	str	r0, [r4, #0]
 800c4fc:	6120      	str	r0, [r4, #16]
 800c4fe:	b928      	cbnz	r0, 800c50c <_svfiprintf_r+0x30>
 800c500:	230c      	movs	r3, #12
 800c502:	f8c8 3000 	str.w	r3, [r8]
 800c506:	f04f 30ff 	mov.w	r0, #4294967295
 800c50a:	e0c8      	b.n	800c69e <_svfiprintf_r+0x1c2>
 800c50c:	2340      	movs	r3, #64	; 0x40
 800c50e:	6163      	str	r3, [r4, #20]
 800c510:	2300      	movs	r3, #0
 800c512:	9309      	str	r3, [sp, #36]	; 0x24
 800c514:	2320      	movs	r3, #32
 800c516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c51a:	2330      	movs	r3, #48	; 0x30
 800c51c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c520:	9503      	str	r5, [sp, #12]
 800c522:	f04f 0b01 	mov.w	fp, #1
 800c526:	4637      	mov	r7, r6
 800c528:	463d      	mov	r5, r7
 800c52a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c52e:	b10b      	cbz	r3, 800c534 <_svfiprintf_r+0x58>
 800c530:	2b25      	cmp	r3, #37	; 0x25
 800c532:	d13e      	bne.n	800c5b2 <_svfiprintf_r+0xd6>
 800c534:	ebb7 0a06 	subs.w	sl, r7, r6
 800c538:	d00b      	beq.n	800c552 <_svfiprintf_r+0x76>
 800c53a:	4653      	mov	r3, sl
 800c53c:	4632      	mov	r2, r6
 800c53e:	4621      	mov	r1, r4
 800c540:	4640      	mov	r0, r8
 800c542:	f7ff ff71 	bl	800c428 <__ssputs_r>
 800c546:	3001      	adds	r0, #1
 800c548:	f000 80a4 	beq.w	800c694 <_svfiprintf_r+0x1b8>
 800c54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c54e:	4453      	add	r3, sl
 800c550:	9309      	str	r3, [sp, #36]	; 0x24
 800c552:	783b      	ldrb	r3, [r7, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 809d 	beq.w	800c694 <_svfiprintf_r+0x1b8>
 800c55a:	2300      	movs	r3, #0
 800c55c:	f04f 32ff 	mov.w	r2, #4294967295
 800c560:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c564:	9304      	str	r3, [sp, #16]
 800c566:	9307      	str	r3, [sp, #28]
 800c568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c56c:	931a      	str	r3, [sp, #104]	; 0x68
 800c56e:	462f      	mov	r7, r5
 800c570:	2205      	movs	r2, #5
 800c572:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c576:	4850      	ldr	r0, [pc, #320]	; (800c6b8 <_svfiprintf_r+0x1dc>)
 800c578:	f7f3 fe2a 	bl	80001d0 <memchr>
 800c57c:	9b04      	ldr	r3, [sp, #16]
 800c57e:	b9d0      	cbnz	r0, 800c5b6 <_svfiprintf_r+0xda>
 800c580:	06d9      	lsls	r1, r3, #27
 800c582:	bf44      	itt	mi
 800c584:	2220      	movmi	r2, #32
 800c586:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c58a:	071a      	lsls	r2, r3, #28
 800c58c:	bf44      	itt	mi
 800c58e:	222b      	movmi	r2, #43	; 0x2b
 800c590:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c594:	782a      	ldrb	r2, [r5, #0]
 800c596:	2a2a      	cmp	r2, #42	; 0x2a
 800c598:	d015      	beq.n	800c5c6 <_svfiprintf_r+0xea>
 800c59a:	9a07      	ldr	r2, [sp, #28]
 800c59c:	462f      	mov	r7, r5
 800c59e:	2000      	movs	r0, #0
 800c5a0:	250a      	movs	r5, #10
 800c5a2:	4639      	mov	r1, r7
 800c5a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5a8:	3b30      	subs	r3, #48	; 0x30
 800c5aa:	2b09      	cmp	r3, #9
 800c5ac:	d94d      	bls.n	800c64a <_svfiprintf_r+0x16e>
 800c5ae:	b1b8      	cbz	r0, 800c5e0 <_svfiprintf_r+0x104>
 800c5b0:	e00f      	b.n	800c5d2 <_svfiprintf_r+0xf6>
 800c5b2:	462f      	mov	r7, r5
 800c5b4:	e7b8      	b.n	800c528 <_svfiprintf_r+0x4c>
 800c5b6:	4a40      	ldr	r2, [pc, #256]	; (800c6b8 <_svfiprintf_r+0x1dc>)
 800c5b8:	1a80      	subs	r0, r0, r2
 800c5ba:	fa0b f000 	lsl.w	r0, fp, r0
 800c5be:	4318      	orrs	r0, r3
 800c5c0:	9004      	str	r0, [sp, #16]
 800c5c2:	463d      	mov	r5, r7
 800c5c4:	e7d3      	b.n	800c56e <_svfiprintf_r+0x92>
 800c5c6:	9a03      	ldr	r2, [sp, #12]
 800c5c8:	1d11      	adds	r1, r2, #4
 800c5ca:	6812      	ldr	r2, [r2, #0]
 800c5cc:	9103      	str	r1, [sp, #12]
 800c5ce:	2a00      	cmp	r2, #0
 800c5d0:	db01      	blt.n	800c5d6 <_svfiprintf_r+0xfa>
 800c5d2:	9207      	str	r2, [sp, #28]
 800c5d4:	e004      	b.n	800c5e0 <_svfiprintf_r+0x104>
 800c5d6:	4252      	negs	r2, r2
 800c5d8:	f043 0302 	orr.w	r3, r3, #2
 800c5dc:	9207      	str	r2, [sp, #28]
 800c5de:	9304      	str	r3, [sp, #16]
 800c5e0:	783b      	ldrb	r3, [r7, #0]
 800c5e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c5e4:	d10c      	bne.n	800c600 <_svfiprintf_r+0x124>
 800c5e6:	787b      	ldrb	r3, [r7, #1]
 800c5e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c5ea:	d133      	bne.n	800c654 <_svfiprintf_r+0x178>
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	1d1a      	adds	r2, r3, #4
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	9203      	str	r2, [sp, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	bfb8      	it	lt
 800c5f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5fc:	3702      	adds	r7, #2
 800c5fe:	9305      	str	r3, [sp, #20]
 800c600:	4d2e      	ldr	r5, [pc, #184]	; (800c6bc <_svfiprintf_r+0x1e0>)
 800c602:	7839      	ldrb	r1, [r7, #0]
 800c604:	2203      	movs	r2, #3
 800c606:	4628      	mov	r0, r5
 800c608:	f7f3 fde2 	bl	80001d0 <memchr>
 800c60c:	b138      	cbz	r0, 800c61e <_svfiprintf_r+0x142>
 800c60e:	2340      	movs	r3, #64	; 0x40
 800c610:	1b40      	subs	r0, r0, r5
 800c612:	fa03 f000 	lsl.w	r0, r3, r0
 800c616:	9b04      	ldr	r3, [sp, #16]
 800c618:	4303      	orrs	r3, r0
 800c61a:	3701      	adds	r7, #1
 800c61c:	9304      	str	r3, [sp, #16]
 800c61e:	7839      	ldrb	r1, [r7, #0]
 800c620:	4827      	ldr	r0, [pc, #156]	; (800c6c0 <_svfiprintf_r+0x1e4>)
 800c622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c626:	2206      	movs	r2, #6
 800c628:	1c7e      	adds	r6, r7, #1
 800c62a:	f7f3 fdd1 	bl	80001d0 <memchr>
 800c62e:	2800      	cmp	r0, #0
 800c630:	d038      	beq.n	800c6a4 <_svfiprintf_r+0x1c8>
 800c632:	4b24      	ldr	r3, [pc, #144]	; (800c6c4 <_svfiprintf_r+0x1e8>)
 800c634:	bb13      	cbnz	r3, 800c67c <_svfiprintf_r+0x1a0>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	3307      	adds	r3, #7
 800c63a:	f023 0307 	bic.w	r3, r3, #7
 800c63e:	3308      	adds	r3, #8
 800c640:	9303      	str	r3, [sp, #12]
 800c642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c644:	444b      	add	r3, r9
 800c646:	9309      	str	r3, [sp, #36]	; 0x24
 800c648:	e76d      	b.n	800c526 <_svfiprintf_r+0x4a>
 800c64a:	fb05 3202 	mla	r2, r5, r2, r3
 800c64e:	2001      	movs	r0, #1
 800c650:	460f      	mov	r7, r1
 800c652:	e7a6      	b.n	800c5a2 <_svfiprintf_r+0xc6>
 800c654:	2300      	movs	r3, #0
 800c656:	3701      	adds	r7, #1
 800c658:	9305      	str	r3, [sp, #20]
 800c65a:	4619      	mov	r1, r3
 800c65c:	250a      	movs	r5, #10
 800c65e:	4638      	mov	r0, r7
 800c660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c664:	3a30      	subs	r2, #48	; 0x30
 800c666:	2a09      	cmp	r2, #9
 800c668:	d903      	bls.n	800c672 <_svfiprintf_r+0x196>
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d0c8      	beq.n	800c600 <_svfiprintf_r+0x124>
 800c66e:	9105      	str	r1, [sp, #20]
 800c670:	e7c6      	b.n	800c600 <_svfiprintf_r+0x124>
 800c672:	fb05 2101 	mla	r1, r5, r1, r2
 800c676:	2301      	movs	r3, #1
 800c678:	4607      	mov	r7, r0
 800c67a:	e7f0      	b.n	800c65e <_svfiprintf_r+0x182>
 800c67c:	ab03      	add	r3, sp, #12
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	4622      	mov	r2, r4
 800c682:	4b11      	ldr	r3, [pc, #68]	; (800c6c8 <_svfiprintf_r+0x1ec>)
 800c684:	a904      	add	r1, sp, #16
 800c686:	4640      	mov	r0, r8
 800c688:	f3af 8000 	nop.w
 800c68c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c690:	4681      	mov	r9, r0
 800c692:	d1d6      	bne.n	800c642 <_svfiprintf_r+0x166>
 800c694:	89a3      	ldrh	r3, [r4, #12]
 800c696:	065b      	lsls	r3, r3, #25
 800c698:	f53f af35 	bmi.w	800c506 <_svfiprintf_r+0x2a>
 800c69c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c69e:	b01d      	add	sp, #116	; 0x74
 800c6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a4:	ab03      	add	r3, sp, #12
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	4622      	mov	r2, r4
 800c6aa:	4b07      	ldr	r3, [pc, #28]	; (800c6c8 <_svfiprintf_r+0x1ec>)
 800c6ac:	a904      	add	r1, sp, #16
 800c6ae:	4640      	mov	r0, r8
 800c6b0:	f000 f882 	bl	800c7b8 <_printf_i>
 800c6b4:	e7ea      	b.n	800c68c <_svfiprintf_r+0x1b0>
 800c6b6:	bf00      	nop
 800c6b8:	0800e0bd 	.word	0x0800e0bd
 800c6bc:	0800e0c3 	.word	0x0800e0c3
 800c6c0:	0800e0c7 	.word	0x0800e0c7
 800c6c4:	00000000 	.word	0x00000000
 800c6c8:	0800c429 	.word	0x0800c429

0800c6cc <_printf_common>:
 800c6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d0:	4691      	mov	r9, r2
 800c6d2:	461f      	mov	r7, r3
 800c6d4:	688a      	ldr	r2, [r1, #8]
 800c6d6:	690b      	ldr	r3, [r1, #16]
 800c6d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	bfb8      	it	lt
 800c6e0:	4613      	movlt	r3, r2
 800c6e2:	f8c9 3000 	str.w	r3, [r9]
 800c6e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	460c      	mov	r4, r1
 800c6ee:	b112      	cbz	r2, 800c6f6 <_printf_common+0x2a>
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	f8c9 3000 	str.w	r3, [r9]
 800c6f6:	6823      	ldr	r3, [r4, #0]
 800c6f8:	0699      	lsls	r1, r3, #26
 800c6fa:	bf42      	ittt	mi
 800c6fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c700:	3302      	addmi	r3, #2
 800c702:	f8c9 3000 	strmi.w	r3, [r9]
 800c706:	6825      	ldr	r5, [r4, #0]
 800c708:	f015 0506 	ands.w	r5, r5, #6
 800c70c:	d107      	bne.n	800c71e <_printf_common+0x52>
 800c70e:	f104 0a19 	add.w	sl, r4, #25
 800c712:	68e3      	ldr	r3, [r4, #12]
 800c714:	f8d9 2000 	ldr.w	r2, [r9]
 800c718:	1a9b      	subs	r3, r3, r2
 800c71a:	42ab      	cmp	r3, r5
 800c71c:	dc28      	bgt.n	800c770 <_printf_common+0xa4>
 800c71e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c722:	6822      	ldr	r2, [r4, #0]
 800c724:	3300      	adds	r3, #0
 800c726:	bf18      	it	ne
 800c728:	2301      	movne	r3, #1
 800c72a:	0692      	lsls	r2, r2, #26
 800c72c:	d42d      	bmi.n	800c78a <_printf_common+0xbe>
 800c72e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c732:	4639      	mov	r1, r7
 800c734:	4630      	mov	r0, r6
 800c736:	47c0      	blx	r8
 800c738:	3001      	adds	r0, #1
 800c73a:	d020      	beq.n	800c77e <_printf_common+0xb2>
 800c73c:	6823      	ldr	r3, [r4, #0]
 800c73e:	68e5      	ldr	r5, [r4, #12]
 800c740:	f8d9 2000 	ldr.w	r2, [r9]
 800c744:	f003 0306 	and.w	r3, r3, #6
 800c748:	2b04      	cmp	r3, #4
 800c74a:	bf08      	it	eq
 800c74c:	1aad      	subeq	r5, r5, r2
 800c74e:	68a3      	ldr	r3, [r4, #8]
 800c750:	6922      	ldr	r2, [r4, #16]
 800c752:	bf0c      	ite	eq
 800c754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c758:	2500      	movne	r5, #0
 800c75a:	4293      	cmp	r3, r2
 800c75c:	bfc4      	itt	gt
 800c75e:	1a9b      	subgt	r3, r3, r2
 800c760:	18ed      	addgt	r5, r5, r3
 800c762:	f04f 0900 	mov.w	r9, #0
 800c766:	341a      	adds	r4, #26
 800c768:	454d      	cmp	r5, r9
 800c76a:	d11a      	bne.n	800c7a2 <_printf_common+0xd6>
 800c76c:	2000      	movs	r0, #0
 800c76e:	e008      	b.n	800c782 <_printf_common+0xb6>
 800c770:	2301      	movs	r3, #1
 800c772:	4652      	mov	r2, sl
 800c774:	4639      	mov	r1, r7
 800c776:	4630      	mov	r0, r6
 800c778:	47c0      	blx	r8
 800c77a:	3001      	adds	r0, #1
 800c77c:	d103      	bne.n	800c786 <_printf_common+0xba>
 800c77e:	f04f 30ff 	mov.w	r0, #4294967295
 800c782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c786:	3501      	adds	r5, #1
 800c788:	e7c3      	b.n	800c712 <_printf_common+0x46>
 800c78a:	18e1      	adds	r1, r4, r3
 800c78c:	1c5a      	adds	r2, r3, #1
 800c78e:	2030      	movs	r0, #48	; 0x30
 800c790:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c794:	4422      	add	r2, r4
 800c796:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c79a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c79e:	3302      	adds	r3, #2
 800c7a0:	e7c5      	b.n	800c72e <_printf_common+0x62>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	4622      	mov	r2, r4
 800c7a6:	4639      	mov	r1, r7
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	47c0      	blx	r8
 800c7ac:	3001      	adds	r0, #1
 800c7ae:	d0e6      	beq.n	800c77e <_printf_common+0xb2>
 800c7b0:	f109 0901 	add.w	r9, r9, #1
 800c7b4:	e7d8      	b.n	800c768 <_printf_common+0x9c>
	...

0800c7b8 <_printf_i>:
 800c7b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c7c0:	460c      	mov	r4, r1
 800c7c2:	7e09      	ldrb	r1, [r1, #24]
 800c7c4:	b085      	sub	sp, #20
 800c7c6:	296e      	cmp	r1, #110	; 0x6e
 800c7c8:	4617      	mov	r7, r2
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	4698      	mov	r8, r3
 800c7ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7d0:	f000 80b3 	beq.w	800c93a <_printf_i+0x182>
 800c7d4:	d822      	bhi.n	800c81c <_printf_i+0x64>
 800c7d6:	2963      	cmp	r1, #99	; 0x63
 800c7d8:	d036      	beq.n	800c848 <_printf_i+0x90>
 800c7da:	d80a      	bhi.n	800c7f2 <_printf_i+0x3a>
 800c7dc:	2900      	cmp	r1, #0
 800c7de:	f000 80b9 	beq.w	800c954 <_printf_i+0x19c>
 800c7e2:	2958      	cmp	r1, #88	; 0x58
 800c7e4:	f000 8083 	beq.w	800c8ee <_printf_i+0x136>
 800c7e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c7f0:	e032      	b.n	800c858 <_printf_i+0xa0>
 800c7f2:	2964      	cmp	r1, #100	; 0x64
 800c7f4:	d001      	beq.n	800c7fa <_printf_i+0x42>
 800c7f6:	2969      	cmp	r1, #105	; 0x69
 800c7f8:	d1f6      	bne.n	800c7e8 <_printf_i+0x30>
 800c7fa:	6820      	ldr	r0, [r4, #0]
 800c7fc:	6813      	ldr	r3, [r2, #0]
 800c7fe:	0605      	lsls	r5, r0, #24
 800c800:	f103 0104 	add.w	r1, r3, #4
 800c804:	d52a      	bpl.n	800c85c <_printf_i+0xa4>
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	6011      	str	r1, [r2, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	da03      	bge.n	800c816 <_printf_i+0x5e>
 800c80e:	222d      	movs	r2, #45	; 0x2d
 800c810:	425b      	negs	r3, r3
 800c812:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c816:	486f      	ldr	r0, [pc, #444]	; (800c9d4 <_printf_i+0x21c>)
 800c818:	220a      	movs	r2, #10
 800c81a:	e039      	b.n	800c890 <_printf_i+0xd8>
 800c81c:	2973      	cmp	r1, #115	; 0x73
 800c81e:	f000 809d 	beq.w	800c95c <_printf_i+0x1a4>
 800c822:	d808      	bhi.n	800c836 <_printf_i+0x7e>
 800c824:	296f      	cmp	r1, #111	; 0x6f
 800c826:	d020      	beq.n	800c86a <_printf_i+0xb2>
 800c828:	2970      	cmp	r1, #112	; 0x70
 800c82a:	d1dd      	bne.n	800c7e8 <_printf_i+0x30>
 800c82c:	6823      	ldr	r3, [r4, #0]
 800c82e:	f043 0320 	orr.w	r3, r3, #32
 800c832:	6023      	str	r3, [r4, #0]
 800c834:	e003      	b.n	800c83e <_printf_i+0x86>
 800c836:	2975      	cmp	r1, #117	; 0x75
 800c838:	d017      	beq.n	800c86a <_printf_i+0xb2>
 800c83a:	2978      	cmp	r1, #120	; 0x78
 800c83c:	d1d4      	bne.n	800c7e8 <_printf_i+0x30>
 800c83e:	2378      	movs	r3, #120	; 0x78
 800c840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c844:	4864      	ldr	r0, [pc, #400]	; (800c9d8 <_printf_i+0x220>)
 800c846:	e055      	b.n	800c8f4 <_printf_i+0x13c>
 800c848:	6813      	ldr	r3, [r2, #0]
 800c84a:	1d19      	adds	r1, r3, #4
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6011      	str	r1, [r2, #0]
 800c850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c858:	2301      	movs	r3, #1
 800c85a:	e08c      	b.n	800c976 <_printf_i+0x1be>
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6011      	str	r1, [r2, #0]
 800c860:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c864:	bf18      	it	ne
 800c866:	b21b      	sxthne	r3, r3
 800c868:	e7cf      	b.n	800c80a <_printf_i+0x52>
 800c86a:	6813      	ldr	r3, [r2, #0]
 800c86c:	6825      	ldr	r5, [r4, #0]
 800c86e:	1d18      	adds	r0, r3, #4
 800c870:	6010      	str	r0, [r2, #0]
 800c872:	0628      	lsls	r0, r5, #24
 800c874:	d501      	bpl.n	800c87a <_printf_i+0xc2>
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	e002      	b.n	800c880 <_printf_i+0xc8>
 800c87a:	0668      	lsls	r0, r5, #25
 800c87c:	d5fb      	bpl.n	800c876 <_printf_i+0xbe>
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	4854      	ldr	r0, [pc, #336]	; (800c9d4 <_printf_i+0x21c>)
 800c882:	296f      	cmp	r1, #111	; 0x6f
 800c884:	bf14      	ite	ne
 800c886:	220a      	movne	r2, #10
 800c888:	2208      	moveq	r2, #8
 800c88a:	2100      	movs	r1, #0
 800c88c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c890:	6865      	ldr	r5, [r4, #4]
 800c892:	60a5      	str	r5, [r4, #8]
 800c894:	2d00      	cmp	r5, #0
 800c896:	f2c0 8095 	blt.w	800c9c4 <_printf_i+0x20c>
 800c89a:	6821      	ldr	r1, [r4, #0]
 800c89c:	f021 0104 	bic.w	r1, r1, #4
 800c8a0:	6021      	str	r1, [r4, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d13d      	bne.n	800c922 <_printf_i+0x16a>
 800c8a6:	2d00      	cmp	r5, #0
 800c8a8:	f040 808e 	bne.w	800c9c8 <_printf_i+0x210>
 800c8ac:	4665      	mov	r5, ip
 800c8ae:	2a08      	cmp	r2, #8
 800c8b0:	d10b      	bne.n	800c8ca <_printf_i+0x112>
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	07db      	lsls	r3, r3, #31
 800c8b6:	d508      	bpl.n	800c8ca <_printf_i+0x112>
 800c8b8:	6923      	ldr	r3, [r4, #16]
 800c8ba:	6862      	ldr	r2, [r4, #4]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	bfde      	ittt	le
 800c8c0:	2330      	movle	r3, #48	; 0x30
 800c8c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c8c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c8ca:	ebac 0305 	sub.w	r3, ip, r5
 800c8ce:	6123      	str	r3, [r4, #16]
 800c8d0:	f8cd 8000 	str.w	r8, [sp]
 800c8d4:	463b      	mov	r3, r7
 800c8d6:	aa03      	add	r2, sp, #12
 800c8d8:	4621      	mov	r1, r4
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7ff fef6 	bl	800c6cc <_printf_common>
 800c8e0:	3001      	adds	r0, #1
 800c8e2:	d14d      	bne.n	800c980 <_printf_i+0x1c8>
 800c8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e8:	b005      	add	sp, #20
 800c8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8ee:	4839      	ldr	r0, [pc, #228]	; (800c9d4 <_printf_i+0x21c>)
 800c8f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c8f4:	6813      	ldr	r3, [r2, #0]
 800c8f6:	6821      	ldr	r1, [r4, #0]
 800c8f8:	1d1d      	adds	r5, r3, #4
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6015      	str	r5, [r2, #0]
 800c8fe:	060a      	lsls	r2, r1, #24
 800c900:	d50b      	bpl.n	800c91a <_printf_i+0x162>
 800c902:	07ca      	lsls	r2, r1, #31
 800c904:	bf44      	itt	mi
 800c906:	f041 0120 	orrmi.w	r1, r1, #32
 800c90a:	6021      	strmi	r1, [r4, #0]
 800c90c:	b91b      	cbnz	r3, 800c916 <_printf_i+0x15e>
 800c90e:	6822      	ldr	r2, [r4, #0]
 800c910:	f022 0220 	bic.w	r2, r2, #32
 800c914:	6022      	str	r2, [r4, #0]
 800c916:	2210      	movs	r2, #16
 800c918:	e7b7      	b.n	800c88a <_printf_i+0xd2>
 800c91a:	064d      	lsls	r5, r1, #25
 800c91c:	bf48      	it	mi
 800c91e:	b29b      	uxthmi	r3, r3
 800c920:	e7ef      	b.n	800c902 <_printf_i+0x14a>
 800c922:	4665      	mov	r5, ip
 800c924:	fbb3 f1f2 	udiv	r1, r3, r2
 800c928:	fb02 3311 	mls	r3, r2, r1, r3
 800c92c:	5cc3      	ldrb	r3, [r0, r3]
 800c92e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c932:	460b      	mov	r3, r1
 800c934:	2900      	cmp	r1, #0
 800c936:	d1f5      	bne.n	800c924 <_printf_i+0x16c>
 800c938:	e7b9      	b.n	800c8ae <_printf_i+0xf6>
 800c93a:	6813      	ldr	r3, [r2, #0]
 800c93c:	6825      	ldr	r5, [r4, #0]
 800c93e:	6961      	ldr	r1, [r4, #20]
 800c940:	1d18      	adds	r0, r3, #4
 800c942:	6010      	str	r0, [r2, #0]
 800c944:	0628      	lsls	r0, r5, #24
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	d501      	bpl.n	800c94e <_printf_i+0x196>
 800c94a:	6019      	str	r1, [r3, #0]
 800c94c:	e002      	b.n	800c954 <_printf_i+0x19c>
 800c94e:	066a      	lsls	r2, r5, #25
 800c950:	d5fb      	bpl.n	800c94a <_printf_i+0x192>
 800c952:	8019      	strh	r1, [r3, #0]
 800c954:	2300      	movs	r3, #0
 800c956:	6123      	str	r3, [r4, #16]
 800c958:	4665      	mov	r5, ip
 800c95a:	e7b9      	b.n	800c8d0 <_printf_i+0x118>
 800c95c:	6813      	ldr	r3, [r2, #0]
 800c95e:	1d19      	adds	r1, r3, #4
 800c960:	6011      	str	r1, [r2, #0]
 800c962:	681d      	ldr	r5, [r3, #0]
 800c964:	6862      	ldr	r2, [r4, #4]
 800c966:	2100      	movs	r1, #0
 800c968:	4628      	mov	r0, r5
 800c96a:	f7f3 fc31 	bl	80001d0 <memchr>
 800c96e:	b108      	cbz	r0, 800c974 <_printf_i+0x1bc>
 800c970:	1b40      	subs	r0, r0, r5
 800c972:	6060      	str	r0, [r4, #4]
 800c974:	6863      	ldr	r3, [r4, #4]
 800c976:	6123      	str	r3, [r4, #16]
 800c978:	2300      	movs	r3, #0
 800c97a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c97e:	e7a7      	b.n	800c8d0 <_printf_i+0x118>
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	462a      	mov	r2, r5
 800c984:	4639      	mov	r1, r7
 800c986:	4630      	mov	r0, r6
 800c988:	47c0      	blx	r8
 800c98a:	3001      	adds	r0, #1
 800c98c:	d0aa      	beq.n	800c8e4 <_printf_i+0x12c>
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	079b      	lsls	r3, r3, #30
 800c992:	d413      	bmi.n	800c9bc <_printf_i+0x204>
 800c994:	68e0      	ldr	r0, [r4, #12]
 800c996:	9b03      	ldr	r3, [sp, #12]
 800c998:	4298      	cmp	r0, r3
 800c99a:	bfb8      	it	lt
 800c99c:	4618      	movlt	r0, r3
 800c99e:	e7a3      	b.n	800c8e8 <_printf_i+0x130>
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	464a      	mov	r2, r9
 800c9a4:	4639      	mov	r1, r7
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	47c0      	blx	r8
 800c9aa:	3001      	adds	r0, #1
 800c9ac:	d09a      	beq.n	800c8e4 <_printf_i+0x12c>
 800c9ae:	3501      	adds	r5, #1
 800c9b0:	68e3      	ldr	r3, [r4, #12]
 800c9b2:	9a03      	ldr	r2, [sp, #12]
 800c9b4:	1a9b      	subs	r3, r3, r2
 800c9b6:	42ab      	cmp	r3, r5
 800c9b8:	dcf2      	bgt.n	800c9a0 <_printf_i+0x1e8>
 800c9ba:	e7eb      	b.n	800c994 <_printf_i+0x1dc>
 800c9bc:	2500      	movs	r5, #0
 800c9be:	f104 0919 	add.w	r9, r4, #25
 800c9c2:	e7f5      	b.n	800c9b0 <_printf_i+0x1f8>
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1ac      	bne.n	800c922 <_printf_i+0x16a>
 800c9c8:	7803      	ldrb	r3, [r0, #0]
 800c9ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9d2:	e76c      	b.n	800c8ae <_printf_i+0xf6>
 800c9d4:	0800e0ce 	.word	0x0800e0ce
 800c9d8:	0800e0df 	.word	0x0800e0df

0800c9dc <memmove>:
 800c9dc:	4288      	cmp	r0, r1
 800c9de:	b510      	push	{r4, lr}
 800c9e0:	eb01 0302 	add.w	r3, r1, r2
 800c9e4:	d807      	bhi.n	800c9f6 <memmove+0x1a>
 800c9e6:	1e42      	subs	r2, r0, #1
 800c9e8:	4299      	cmp	r1, r3
 800c9ea:	d00a      	beq.n	800ca02 <memmove+0x26>
 800c9ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c9f4:	e7f8      	b.n	800c9e8 <memmove+0xc>
 800c9f6:	4283      	cmp	r3, r0
 800c9f8:	d9f5      	bls.n	800c9e6 <memmove+0xa>
 800c9fa:	1881      	adds	r1, r0, r2
 800c9fc:	1ad2      	subs	r2, r2, r3
 800c9fe:	42d3      	cmn	r3, r2
 800ca00:	d100      	bne.n	800ca04 <memmove+0x28>
 800ca02:	bd10      	pop	{r4, pc}
 800ca04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ca0c:	e7f7      	b.n	800c9fe <memmove+0x22>
	...

0800ca10 <_free_r>:
 800ca10:	b538      	push	{r3, r4, r5, lr}
 800ca12:	4605      	mov	r5, r0
 800ca14:	2900      	cmp	r1, #0
 800ca16:	d045      	beq.n	800caa4 <_free_r+0x94>
 800ca18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca1c:	1f0c      	subs	r4, r1, #4
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	bfb8      	it	lt
 800ca22:	18e4      	addlt	r4, r4, r3
 800ca24:	f000 f8d2 	bl	800cbcc <__malloc_lock>
 800ca28:	4a1f      	ldr	r2, [pc, #124]	; (800caa8 <_free_r+0x98>)
 800ca2a:	6813      	ldr	r3, [r2, #0]
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	b933      	cbnz	r3, 800ca3e <_free_r+0x2e>
 800ca30:	6063      	str	r3, [r4, #4]
 800ca32:	6014      	str	r4, [r2, #0]
 800ca34:	4628      	mov	r0, r5
 800ca36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca3a:	f000 b8c8 	b.w	800cbce <__malloc_unlock>
 800ca3e:	42a3      	cmp	r3, r4
 800ca40:	d90c      	bls.n	800ca5c <_free_r+0x4c>
 800ca42:	6821      	ldr	r1, [r4, #0]
 800ca44:	1862      	adds	r2, r4, r1
 800ca46:	4293      	cmp	r3, r2
 800ca48:	bf04      	itt	eq
 800ca4a:	681a      	ldreq	r2, [r3, #0]
 800ca4c:	685b      	ldreq	r3, [r3, #4]
 800ca4e:	6063      	str	r3, [r4, #4]
 800ca50:	bf04      	itt	eq
 800ca52:	1852      	addeq	r2, r2, r1
 800ca54:	6022      	streq	r2, [r4, #0]
 800ca56:	6004      	str	r4, [r0, #0]
 800ca58:	e7ec      	b.n	800ca34 <_free_r+0x24>
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	685a      	ldr	r2, [r3, #4]
 800ca5e:	b10a      	cbz	r2, 800ca64 <_free_r+0x54>
 800ca60:	42a2      	cmp	r2, r4
 800ca62:	d9fa      	bls.n	800ca5a <_free_r+0x4a>
 800ca64:	6819      	ldr	r1, [r3, #0]
 800ca66:	1858      	adds	r0, r3, r1
 800ca68:	42a0      	cmp	r0, r4
 800ca6a:	d10b      	bne.n	800ca84 <_free_r+0x74>
 800ca6c:	6820      	ldr	r0, [r4, #0]
 800ca6e:	4401      	add	r1, r0
 800ca70:	1858      	adds	r0, r3, r1
 800ca72:	4282      	cmp	r2, r0
 800ca74:	6019      	str	r1, [r3, #0]
 800ca76:	d1dd      	bne.n	800ca34 <_free_r+0x24>
 800ca78:	6810      	ldr	r0, [r2, #0]
 800ca7a:	6852      	ldr	r2, [r2, #4]
 800ca7c:	605a      	str	r2, [r3, #4]
 800ca7e:	4401      	add	r1, r0
 800ca80:	6019      	str	r1, [r3, #0]
 800ca82:	e7d7      	b.n	800ca34 <_free_r+0x24>
 800ca84:	d902      	bls.n	800ca8c <_free_r+0x7c>
 800ca86:	230c      	movs	r3, #12
 800ca88:	602b      	str	r3, [r5, #0]
 800ca8a:	e7d3      	b.n	800ca34 <_free_r+0x24>
 800ca8c:	6820      	ldr	r0, [r4, #0]
 800ca8e:	1821      	adds	r1, r4, r0
 800ca90:	428a      	cmp	r2, r1
 800ca92:	bf04      	itt	eq
 800ca94:	6811      	ldreq	r1, [r2, #0]
 800ca96:	6852      	ldreq	r2, [r2, #4]
 800ca98:	6062      	str	r2, [r4, #4]
 800ca9a:	bf04      	itt	eq
 800ca9c:	1809      	addeq	r1, r1, r0
 800ca9e:	6021      	streq	r1, [r4, #0]
 800caa0:	605c      	str	r4, [r3, #4]
 800caa2:	e7c7      	b.n	800ca34 <_free_r+0x24>
 800caa4:	bd38      	pop	{r3, r4, r5, pc}
 800caa6:	bf00      	nop
 800caa8:	2000096c 	.word	0x2000096c

0800caac <_malloc_r>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	1ccd      	adds	r5, r1, #3
 800cab0:	f025 0503 	bic.w	r5, r5, #3
 800cab4:	3508      	adds	r5, #8
 800cab6:	2d0c      	cmp	r5, #12
 800cab8:	bf38      	it	cc
 800caba:	250c      	movcc	r5, #12
 800cabc:	2d00      	cmp	r5, #0
 800cabe:	4606      	mov	r6, r0
 800cac0:	db01      	blt.n	800cac6 <_malloc_r+0x1a>
 800cac2:	42a9      	cmp	r1, r5
 800cac4:	d903      	bls.n	800cace <_malloc_r+0x22>
 800cac6:	230c      	movs	r3, #12
 800cac8:	6033      	str	r3, [r6, #0]
 800caca:	2000      	movs	r0, #0
 800cacc:	bd70      	pop	{r4, r5, r6, pc}
 800cace:	f000 f87d 	bl	800cbcc <__malloc_lock>
 800cad2:	4a21      	ldr	r2, [pc, #132]	; (800cb58 <_malloc_r+0xac>)
 800cad4:	6814      	ldr	r4, [r2, #0]
 800cad6:	4621      	mov	r1, r4
 800cad8:	b991      	cbnz	r1, 800cb00 <_malloc_r+0x54>
 800cada:	4c20      	ldr	r4, [pc, #128]	; (800cb5c <_malloc_r+0xb0>)
 800cadc:	6823      	ldr	r3, [r4, #0]
 800cade:	b91b      	cbnz	r3, 800cae8 <_malloc_r+0x3c>
 800cae0:	4630      	mov	r0, r6
 800cae2:	f000 f863 	bl	800cbac <_sbrk_r>
 800cae6:	6020      	str	r0, [r4, #0]
 800cae8:	4629      	mov	r1, r5
 800caea:	4630      	mov	r0, r6
 800caec:	f000 f85e 	bl	800cbac <_sbrk_r>
 800caf0:	1c43      	adds	r3, r0, #1
 800caf2:	d124      	bne.n	800cb3e <_malloc_r+0x92>
 800caf4:	230c      	movs	r3, #12
 800caf6:	6033      	str	r3, [r6, #0]
 800caf8:	4630      	mov	r0, r6
 800cafa:	f000 f868 	bl	800cbce <__malloc_unlock>
 800cafe:	e7e4      	b.n	800caca <_malloc_r+0x1e>
 800cb00:	680b      	ldr	r3, [r1, #0]
 800cb02:	1b5b      	subs	r3, r3, r5
 800cb04:	d418      	bmi.n	800cb38 <_malloc_r+0x8c>
 800cb06:	2b0b      	cmp	r3, #11
 800cb08:	d90f      	bls.n	800cb2a <_malloc_r+0x7e>
 800cb0a:	600b      	str	r3, [r1, #0]
 800cb0c:	50cd      	str	r5, [r1, r3]
 800cb0e:	18cc      	adds	r4, r1, r3
 800cb10:	4630      	mov	r0, r6
 800cb12:	f000 f85c 	bl	800cbce <__malloc_unlock>
 800cb16:	f104 000b 	add.w	r0, r4, #11
 800cb1a:	1d23      	adds	r3, r4, #4
 800cb1c:	f020 0007 	bic.w	r0, r0, #7
 800cb20:	1ac3      	subs	r3, r0, r3
 800cb22:	d0d3      	beq.n	800cacc <_malloc_r+0x20>
 800cb24:	425a      	negs	r2, r3
 800cb26:	50e2      	str	r2, [r4, r3]
 800cb28:	e7d0      	b.n	800cacc <_malloc_r+0x20>
 800cb2a:	428c      	cmp	r4, r1
 800cb2c:	684b      	ldr	r3, [r1, #4]
 800cb2e:	bf16      	itet	ne
 800cb30:	6063      	strne	r3, [r4, #4]
 800cb32:	6013      	streq	r3, [r2, #0]
 800cb34:	460c      	movne	r4, r1
 800cb36:	e7eb      	b.n	800cb10 <_malloc_r+0x64>
 800cb38:	460c      	mov	r4, r1
 800cb3a:	6849      	ldr	r1, [r1, #4]
 800cb3c:	e7cc      	b.n	800cad8 <_malloc_r+0x2c>
 800cb3e:	1cc4      	adds	r4, r0, #3
 800cb40:	f024 0403 	bic.w	r4, r4, #3
 800cb44:	42a0      	cmp	r0, r4
 800cb46:	d005      	beq.n	800cb54 <_malloc_r+0xa8>
 800cb48:	1a21      	subs	r1, r4, r0
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f000 f82e 	bl	800cbac <_sbrk_r>
 800cb50:	3001      	adds	r0, #1
 800cb52:	d0cf      	beq.n	800caf4 <_malloc_r+0x48>
 800cb54:	6025      	str	r5, [r4, #0]
 800cb56:	e7db      	b.n	800cb10 <_malloc_r+0x64>
 800cb58:	2000096c 	.word	0x2000096c
 800cb5c:	20000970 	.word	0x20000970

0800cb60 <_realloc_r>:
 800cb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb62:	4607      	mov	r7, r0
 800cb64:	4614      	mov	r4, r2
 800cb66:	460e      	mov	r6, r1
 800cb68:	b921      	cbnz	r1, 800cb74 <_realloc_r+0x14>
 800cb6a:	4611      	mov	r1, r2
 800cb6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cb70:	f7ff bf9c 	b.w	800caac <_malloc_r>
 800cb74:	b922      	cbnz	r2, 800cb80 <_realloc_r+0x20>
 800cb76:	f7ff ff4b 	bl	800ca10 <_free_r>
 800cb7a:	4625      	mov	r5, r4
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb80:	f000 f826 	bl	800cbd0 <_malloc_usable_size_r>
 800cb84:	42a0      	cmp	r0, r4
 800cb86:	d20f      	bcs.n	800cba8 <_realloc_r+0x48>
 800cb88:	4621      	mov	r1, r4
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	f7ff ff8e 	bl	800caac <_malloc_r>
 800cb90:	4605      	mov	r5, r0
 800cb92:	2800      	cmp	r0, #0
 800cb94:	d0f2      	beq.n	800cb7c <_realloc_r+0x1c>
 800cb96:	4631      	mov	r1, r6
 800cb98:	4622      	mov	r2, r4
 800cb9a:	f7ff fbcf 	bl	800c33c <memcpy>
 800cb9e:	4631      	mov	r1, r6
 800cba0:	4638      	mov	r0, r7
 800cba2:	f7ff ff35 	bl	800ca10 <_free_r>
 800cba6:	e7e9      	b.n	800cb7c <_realloc_r+0x1c>
 800cba8:	4635      	mov	r5, r6
 800cbaa:	e7e7      	b.n	800cb7c <_realloc_r+0x1c>

0800cbac <_sbrk_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4c06      	ldr	r4, [pc, #24]	; (800cbc8 <_sbrk_r+0x1c>)
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4605      	mov	r5, r0
 800cbb4:	4608      	mov	r0, r1
 800cbb6:	6023      	str	r3, [r4, #0]
 800cbb8:	f000 f812 	bl	800cbe0 <_sbrk>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	d102      	bne.n	800cbc6 <_sbrk_r+0x1a>
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	b103      	cbz	r3, 800cbc6 <_sbrk_r+0x1a>
 800cbc4:	602b      	str	r3, [r5, #0]
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
 800cbc8:	20000b1c 	.word	0x20000b1c

0800cbcc <__malloc_lock>:
 800cbcc:	4770      	bx	lr

0800cbce <__malloc_unlock>:
 800cbce:	4770      	bx	lr

0800cbd0 <_malloc_usable_size_r>:
 800cbd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbd4:	1f18      	subs	r0, r3, #4
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	bfbc      	itt	lt
 800cbda:	580b      	ldrlt	r3, [r1, r0]
 800cbdc:	18c0      	addlt	r0, r0, r3
 800cbde:	4770      	bx	lr

0800cbe0 <_sbrk>:
 800cbe0:	4b04      	ldr	r3, [pc, #16]	; (800cbf4 <_sbrk+0x14>)
 800cbe2:	6819      	ldr	r1, [r3, #0]
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	b909      	cbnz	r1, 800cbec <_sbrk+0xc>
 800cbe8:	4903      	ldr	r1, [pc, #12]	; (800cbf8 <_sbrk+0x18>)
 800cbea:	6019      	str	r1, [r3, #0]
 800cbec:	6818      	ldr	r0, [r3, #0]
 800cbee:	4402      	add	r2, r0
 800cbf0:	601a      	str	r2, [r3, #0]
 800cbf2:	4770      	bx	lr
 800cbf4:	20000974 	.word	0x20000974
 800cbf8:	20000b20 	.word	0x20000b20

0800cbfc <_init>:
 800cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfe:	bf00      	nop
 800cc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc02:	bc08      	pop	{r3}
 800cc04:	469e      	mov	lr, r3
 800cc06:	4770      	bx	lr

0800cc08 <_fini>:
 800cc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0a:	bf00      	nop
 800cc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc0e:	bc08      	pop	{r3}
 800cc10:	469e      	mov	lr, r3
 800cc12:	4770      	bx	lr
 800cc14:	0000      	movs	r0, r0
	...
